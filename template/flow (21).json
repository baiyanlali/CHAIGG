{
  "nodes": [
    {
      "type": "StringInput",
      "id": "StringInput_1726302111781",
      "data": {
        "label": "",
        "data": "I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact",
        "runflowGenerating": false
      },
      "position": { "x": -435, "y": 15 },
      "measured": { "width": 205, "height": 113 },
      "selected": true,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1726302211017",
      "data": {
        "label": "",
        "prompt": "I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact",
        "data": "Certainly! Sokoban is a classic puzzle game where the player pushes boxes around a warehouse, trying to get them to designated storage locations. Here's a breakdown of the game elements and interactions for Sokoban:\n\n**Game Elements**:\n- **Player (Sokoban)**: The character controlled by the player, whose objective is to push boxes onto target locations.\n- **Box**: Movable objects that the player must push to specific target locations.\n- **Wall**: Obstacle elements that block both the player and boxes; neither can move through or occupy these spaces.\n- **Floor Space**: The traversable area where the player can move and where boxes can be pushed around.\n- **Target Space**: Specific locations marked on the floor where boxes need to be placed to win the game.\n\n**Game Interactions**:\n- **Player, Floor Space**: The player can move freely across floor spaces without restriction.\n- **Player, Wall**: The player cannot pass through walls; they act as barriers.\n- **Player, Box**: The player can push (but not pull) a box if there is an empty floor space or a target space on the opposite side of the box.\n- **Box, Wall**: A box cannot be moved into a space occupied by a wall.\n- **Box, Floor Space**: Boxes can be pushed onto empty floor spaces by the player.\n- **Box, Target Space**: When a box is pushed onto a target space, it is considered \"in place\" if all target spaces have boxes on them at the same time.\n- **Player, Target Space**: The player can move onto target spaces without any special effect.\n- **Box, Box**: A box cannot be pushed into another box.\n\nThese fundamental elements and interactions form the basis of a typical Sokoban game, challenging the player to figure out how to move boxes efficiently to their target destinations.",
        "runflowGenerating": false
      },
      "position": { "x": 375, "y": 375 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1726302264545",
      "data": {
        "label": "",
        "data": "Please split the **Game Elements**  part of the following text. Please ONLY output the part needed and no other things:\n\nCertainly! Sokoban is a classic puzzle game where the player pushes boxes around a warehouse, trying to get them to designated storage locations. Here's a breakdown of the game elements and interactions for Sokoban:\n\n**Game Elements**:\n- **Player (Sokoban)**: The character controlled by the player, whose objective is to push boxes onto target locations.\n- **Box**: Movable objects that the player must push to specific target locations.\n- **Wall**: Obstacle elements that block both the player and boxes; neither can move through or occupy these spaces.\n- **Floor Space**: The traversable area where the player can move and where boxes can be pushed around.\n- **Target Space**: Specific locations marked on the floor where boxes need to be placed to win the game.\n\n**Game Interactions**:\n- **Player, Floor Space**: The player can move freely across floor spaces without restriction.\n- **Player, Wall**: The player cannot pass through walls; they act as barriers.\n- **Player, Box**: The player can push (but not pull) a box if there is an empty floor space or a target space on the opposite side of the box.\n- **Box, Wall**: A box cannot be moved into a space occupied by a wall.\n- **Box, Floor Space**: Boxes can be pushed onto empty floor spaces by the player.\n- **Box, Target Space**: When a box is pushed onto a target space, it is considered \"in place\" if all target spaces have boxes on them at the same time.\n- **Player, Target Space**: The player can move onto target spaces without any special effect.\n- **Box, Box**: A box cannot be pushed into another box.\n\nThese fundamental elements and interactions form the basis of a typical Sokoban game, challenging the player to figure out how to move boxes efficiently to their target destinations.",
        "string": "Please split the **Game Elements**  part of the following text. Please ONLY output the part needed and no other things:\n\n{output}",
        "dict": {
          "output": "Certainly! Sokoban is a classic puzzle game where the player pushes boxes around a warehouse, trying to get them to designated storage locations. Here's a breakdown of the game elements and interactions for Sokoban:\n\n**Game Elements**:\n- **Player (Sokoban)**: The character controlled by the player, whose objective is to push boxes onto target locations.\n- **Box**: Movable objects that the player must push to specific target locations.\n- **Wall**: Obstacle elements that block both the player and boxes; neither can move through or occupy these spaces.\n- **Floor Space**: The traversable area where the player can move and where boxes can be pushed around.\n- **Target Space**: Specific locations marked on the floor where boxes need to be placed to win the game.\n\n**Game Interactions**:\n- **Player, Floor Space**: The player can move freely across floor spaces without restriction.\n- **Player, Wall**: The player cannot pass through walls; they act as barriers.\n- **Player, Box**: The player can push (but not pull) a box if there is an empty floor space or a target space on the opposite side of the box.\n- **Box, Wall**: A box cannot be moved into a space occupied by a wall.\n- **Box, Floor Space**: Boxes can be pushed onto empty floor spaces by the player.\n- **Box, Target Space**: When a box is pushed onto a target space, it is considered \"in place\" if all target spaces have boxes on them at the same time.\n- **Player, Target Space**: The player can move onto target spaces without any special effect.\n- **Box, Box**: A box cannot be pushed into another box.\n\nThese fundamental elements and interactions form the basis of a typical Sokoban game, challenging the player to figure out how to move boxes efficiently to their target destinations."
        }
      },
      "position": { "x": 1440, "y": 540 },
      "measured": { "width": 300, "height": 243 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1726302345407",
      "data": {
        "label": "",
        "prompt": "",
        "data": "**Game Elements** :\n- **Player**: The character controlled by the player. The player can move up, down, left, and right.\n- **Box/Crate**: Objects that need to be pushed to specific storage locations.\n- **Storage Location/Goal**: Designated spots where the boxes need to be placed to complete the level.\n- **Walls**: Obstacles that cannot be passed through or moved.\n- **Floor**: The walkable area where the player and boxes can move.",
        "runflowGenerating": true
      },
      "position": { "x": 1860, "y": 585 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1726302462343",
      "data": {
        "label": "",
        "data": "Please split the **Game Interactions**  part of the following text. Please ONLY output the part needed and no other things:\n\nCertainly! Sokoban is a classic puzzle game where the player pushes boxes around a warehouse, trying to get them to designated storage locations. Here's a breakdown of the game elements and interactions for Sokoban:\n\n**Game Elements**:\n- **Player (Sokoban)**: The character controlled by the player, whose objective is to push boxes onto target locations.\n- **Box**: Movable objects that the player must push to specific target locations.\n- **Wall**: Obstacle elements that block both the player and boxes; neither can move through or occupy these spaces.\n- **Floor Space**: The traversable area where the player can move and where boxes can be pushed around.\n- **Target Space**: Specific locations marked on the floor where boxes need to be placed to win the game.\n\n**Game Interactions**:\n- **Player, Floor Space**: The player can move freely across floor spaces without restriction.\n- **Player, Wall**: The player cannot pass through walls; they act as barriers.\n- **Player, Box**: The player can push (but not pull) a box if there is an empty floor space or a target space on the opposite side of the box.\n- **Box, Wall**: A box cannot be moved into a space occupied by a wall.\n- **Box, Floor Space**: Boxes can be pushed onto empty floor spaces by the player.\n- **Box, Target Space**: When a box is pushed onto a target space, it is considered \"in place\" if all target spaces have boxes on them at the same time.\n- **Player, Target Space**: The player can move onto target spaces without any special effect.\n- **Box, Box**: A box cannot be pushed into another box.\n\nThese fundamental elements and interactions form the basis of a typical Sokoban game, challenging the player to figure out how to move boxes efficiently to their target destinations.",
        "string": "Please split the **Game Interactions**  part of the following text. Please ONLY output the part needed and no other things:\n\n{output}",
        "dict": {
          "output": "Certainly! Sokoban is a classic puzzle game where the player pushes boxes around a warehouse, trying to get them to designated storage locations. Here's a breakdown of the game elements and interactions for Sokoban:\n\n**Game Elements**:\n- **Player (Sokoban)**: The character controlled by the player, whose objective is to push boxes onto target locations.\n- **Box**: Movable objects that the player must push to specific target locations.\n- **Wall**: Obstacle elements that block both the player and boxes; neither can move through or occupy these spaces.\n- **Floor Space**: The traversable area where the player can move and where boxes can be pushed around.\n- **Target Space**: Specific locations marked on the floor where boxes need to be placed to win the game.\n\n**Game Interactions**:\n- **Player, Floor Space**: The player can move freely across floor spaces without restriction.\n- **Player, Wall**: The player cannot pass through walls; they act as barriers.\n- **Player, Box**: The player can push (but not pull) a box if there is an empty floor space or a target space on the opposite side of the box.\n- **Box, Wall**: A box cannot be moved into a space occupied by a wall.\n- **Box, Floor Space**: Boxes can be pushed onto empty floor spaces by the player.\n- **Box, Target Space**: When a box is pushed onto a target space, it is considered \"in place\" if all target spaces have boxes on them at the same time.\n- **Player, Target Space**: The player can move onto target spaces without any special effect.\n- **Box, Box**: A box cannot be pushed into another box.\n\nThese fundamental elements and interactions form the basis of a typical Sokoban game, challenging the player to figure out how to move boxes efficiently to their target destinations."
        }
      },
      "position": { "x": 1110, "y": 915 },
      "measured": { "width": 300, "height": 243 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1726302512305",
      "data": {
        "label": "",
        "prompt": "Please split the **Game Interactions**  part of the following text. Please ONLY output the part needed and no other things:\n\nCertainly! Sokoban is a classic puzzle game where the player pushes boxes around a warehouse, trying to get them to designated storage locations. Here's a breakdown of the game elements and interactions for Sokoban:\n\n**Game Elements**:\n- **Player (Sokoban)**: The character controlled by the player, whose objective is to push boxes onto target locations.\n- **Box**: Movable objects that the player must push to specific target locations.\n- **Wall**: Obstacle elements that block both the player and boxes; neither can move through or occupy these spaces.\n- **Floor Space**: The traversable area where the player can move and where boxes can be pushed around.\n- **Target Space**: Specific locations marked on the floor where boxes need to be placed to win the game.\n\n**Game Interactions**:\n- **Player, Floor Space**: The player can move freely across floor spaces without restriction.\n- **Player, Wall**: The player cannot pass through walls; they act as barriers.\n- **Player, Box**: The player can push (but not pull) a box if there is an empty floor space or a target space on the opposite side of the box.\n- **Box, Wall**: A box cannot be moved into a space occupied by a wall.\n- **Box, Floor Space**: Boxes can be pushed onto empty floor spaces by the player.\n- **Box, Target Space**: When a box is pushed onto a target space, it is considered \"in place\" if all target spaces have boxes on them at the same time.\n- **Player, Target Space**: The player can move onto target spaces without any special effect.\n- **Box, Box**: A box cannot be pushed into another box.\n\nThese fundamental elements and interactions form the basis of a typical Sokoban game, challenging the player to figure out how to move boxes efficiently to their target destinations.",
        "data": "**Game Interactions**:\n- **Player, Floor**: The player can move onto any floor space unless blocked by a wall or a box.\n- **Player, Wall**: The player cannot move through walls; walls serve as boundaries within the game map.\n- **Player, Box**: The player can push boxes if there is an open floor space behind the box in the direction the player is moving.\n- **Player, Target Location**: The player can move onto target locations, but does not need to do so for completion of the game objectives.\n- **Box, Floor**: Boxes can be pushed onto open floor spaces by the player.\n- **Box, Wall**: Boxes cannot be pushed through walls.\n- **Box, Box**: A box cannot be pushed into another box.\n- **Box, Target Location**: Boxes should be pushed onto these locations to meet the level's completion criteria.\n- **Target Location**: No interaction needed; they serve as objectives for box placement.",
        "runflowGenerating": false
      },
      "position": { "x": 1410, "y": 1290 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1726302662702",
      "data": {
        "label": "",
        "prompt": "Here is your task I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact.\n\nHere is the element you need in the game you make. \n**Game Elements** :\n- **Player**: The character controlled by the player. The player can move up, down, left, and right.\n- **Box/Crate**: Objects that need to be pushed to specific storage locations.\n- **Storage Location/Goal**: Designated spots where the boxes need to be placed to complete the level.\n- **Walls**: Obstacles that cannot be passed through or moved.\n- **Floor**: The walkable area where the player and boxes can move.\nPlease find the proper game elements types.\n    Here is the simple description of the game elements types: Avatar: Game character controlled by player, performs actions.\n\nFlakAvatar: Horizontal avatar that shoots with SPACE key.\n\nHorizontalAvatar: An avatar that moves horizontally.\n\nMissileAvatar: Oriented avatar that moves with speed 1.\n\nMovingAvatar: A controllable avatar that can move in four directions.\n\nNoisyRotatingFlippingAvatar: Avatar that rotates, flips, and emits noise\n\nOngoingShootAvatar: Avatar that continuously shoots with movement.\n\nOrientedAvatar: An avatar with a specific orientation and movement\n\nRotatingAvatar: An avatar that rotates and moves.\n\nRotatingFlippingAvatar: An avatar that rotates and flips based on input.\n\nShootAvatar: An oriented avatar that can shoot projectiles.\n\nVerticalAvatar: Avatar moving vertically, only up and down.\n\nAStarChaser: Chases target using A* algorithm.\n\nAlternateChaser: Chases or flees based on target assessment.\n\nBomber: A missile that periodically spawns other sprites.\n\nBomberRandomMissile: Spawns missiles of random types\n\nChaser: Speeds toward nearest target, occasionally in a random direction.\n\nConveyer: Static sprite that moves entities in a direction\n\nDoor: An immovable door that may act as a portal.\n\nEOS: End of Sprite (EOS)\n\nEraticMissile: A missile with erratic movement based on probability.\n\nFleeing: Sprite that flees from a certain entity.\n\nFlicker: Sprite that disappears after a set time limit.\n\nImmovable: A sprite that doesn't move.\n\nMissile: A sprite with oriented movement capability.\n\nOrientedFlicker: Oriented sprite that flickers and disappears.\n\nOrientedSprite: Sprite with specific orientation capability.\n\nPassive: Non-interactive VGDL sprite\n\nPathAltChaser: Chases targets along alternate paths\n\nPortal: Static sprite creating other sprites when conditions met.\n\nRandomInertial: Sprite with random inertial movement\n\nRandomMissile: Missile with trajectory direction chosen randomly.\n\nRandomNPC: A non-player character with random movement\n\nSpawnPoint: Generates sprites based on cooldown and probability.\n\nSpriteProducer: Produces sprites based on defined parameters.\n\nSwitch: Orientable sprite with active states\n\nVGDLSprite: A basic VGDL game sprite with various attributes.\n\nWalkJumper: Moves horizontally and occasionally jumps up\n\nWalker: A missile with specific air steering properties.\n\n\n    Please respond using the following format:\n    ## Explanation:\n    What is the game element?\n    What is the game element type?\n    Why you choose the type?\n    ## Game Elements:\n    - xxx: type\n    - xxx: type",
        "data": "## Explanation:\nIn Sokoban, the game involves navigating a player-controlled character to push boxes onto designated storage locations while avoiding walls. The player can move boxes but cannot pull them, making strategy an essential part of solving puzzles.\n\n1. **Player**: \n   - **Game Element Type**: MovingAvatar\n   - **Reason**: The player in Sokoban is controlled by the user and needs to be able to move in four directions (up, down, left, right) across the game board. The MovingAvatar type is well-suited for this role as it describes a character that can be controlled to move in these directions.\n\n2. **Box/Crate**: \n   - **Game Element Type**: Immovable (Initially)\n   - **Reason**: Boxes in Sokoban are primarily static unless interacted with by the player. While they can be moved, they do not move on their own, making them effectively “immovable” unless pushed by the player.\n\n3. **Storage Location/Goal**: \n   - **Game Element Type**: Passive\n   - **Reason**: Goals do not actively interact or move; they serve as designated target points for the boxes. Therefore, the passive type represents them well as entities that are part of the environment rather than interactive elements.\n\n4. **Walls**: \n   - **Game Element Type**: Immovable\n   - **Reason**: Walls are static obstacles within the game space that prevent movement. They cannot be passed through or moved, so they fit the description of an immovable type.\n\n5. **Floor**: \n   - **Game Element Type**: Passive\n   - **Reason**: The floor serves as the traversable area for the player and boxes. It interacts with other elements by providing the space for movement but remains a non-interactive background element, hence it is passive.\n\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive",
        "runflowGenerating": false
      },
      "position": { "x": 2955, "y": 525 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1726410607177",
      "data": {
        "label": "",
        "data": "Here is your task I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact.\n\nHere is the element you need in the game you make. \n**Game Elements** :\n- **Player**: The character controlled by the player. The player can move up, down, left, and right.\n- **Box/Crate**: Objects that need to be pushed to specific storage locations.\n- **Storage Location/Goal**: Designated spots where the boxes need to be placed to complete the level.\n- **Walls**: Obstacles that cannot be passed through or moved.\n- **Floor**: The walkable area where the player and boxes can move.\nPlease find the proper game elements types.\n    Here is the simple description of the game elements types: Avatar: Game character controlled by player, performs actions.\n\nFlakAvatar: Horizontal avatar that shoots with SPACE key.\n\nHorizontalAvatar: An avatar that moves horizontally.\n\nMissileAvatar: Oriented avatar that moves with speed 1.\n\nMovingAvatar: A controllable avatar that can move in four directions.\n\nNoisyRotatingFlippingAvatar: Avatar that rotates, flips, and emits noise\n\nOngoingShootAvatar: Avatar that continuously shoots with movement.\n\nOrientedAvatar: An avatar with a specific orientation and movement\n\nRotatingAvatar: An avatar that rotates and moves.\n\nRotatingFlippingAvatar: An avatar that rotates and flips based on input.\n\nShootAvatar: An oriented avatar that can shoot projectiles.\n\nVerticalAvatar: Avatar moving vertically, only up and down.\n\nAStarChaser: Chases target using A* algorithm.\n\nAlternateChaser: Chases or flees based on target assessment.\n\nBomber: A missile that periodically spawns other sprites.\n\nBomberRandomMissile: Spawns missiles of random types\n\nChaser: Speeds toward nearest target, occasionally in a random direction.\n\nConveyer: Static sprite that moves entities in a direction\n\nDoor: An immovable door that may act as a portal.\n\nEOS: End of Sprite (EOS)\n\nEraticMissile: A missile with erratic movement based on probability.\n\nFleeing: Sprite that flees from a certain entity.\n\nFlicker: Sprite that disappears after a set time limit.\n\nImmovable: A sprite that doesn't move.\n\nMissile: A sprite with oriented movement capability.\n\nOrientedFlicker: Oriented sprite that flickers and disappears.\n\nOrientedSprite: Sprite with specific orientation capability.\n\nPassive: Non-interactive VGDL sprite\n\nPathAltChaser: Chases targets along alternate paths\n\nPortal: Static sprite creating other sprites when conditions met.\n\nRandomInertial: Sprite with random inertial movement\n\nRandomMissile: Missile with trajectory direction chosen randomly.\n\nRandomNPC: A non-player character with random movement\n\nSpawnPoint: Generates sprites based on cooldown and probability.\n\nSpriteProducer: Produces sprites based on defined parameters.\n\nSwitch: Orientable sprite with active states\n\nVGDLSprite: A basic VGDL game sprite with various attributes.\n\nWalkJumper: Moves horizontally and occasionally jumps up\n\nWalker: A missile with specific air steering properties.\n\n\n    Please respond using the following format:\n    ## Explanation:\n    What is the game element?\n    What is the game element type?\n    Why you choose the type?\n    ## Game Elements:\n    - xxx: type\n    - xxx: type",
        "string": "Here is your task {task}.\n\nHere is the element you need in the game you make. \n{elements}\nPlease find the proper game elements types.\n    Here is the simple description of the game elements types: {element_simple_description}\n    Please respond using the following format:\n    ## Explanation:\n    What is the game element?\n    What is the game element type?\n    Why you choose the type?\n    ## Game Elements:\n    - xxx: type\n    - xxx: type",
        "dict": {
          "element_simple_description": "Avatar: Game character controlled by player, performs actions.\n\nFlakAvatar: Horizontal avatar that shoots with SPACE key.\n\nHorizontalAvatar: An avatar that moves horizontally.\n\nMissileAvatar: Oriented avatar that moves with speed 1.\n\nMovingAvatar: A controllable avatar that can move in four directions.\n\nNoisyRotatingFlippingAvatar: Avatar that rotates, flips, and emits noise\n\nOngoingShootAvatar: Avatar that continuously shoots with movement.\n\nOrientedAvatar: An avatar with a specific orientation and movement\n\nRotatingAvatar: An avatar that rotates and moves.\n\nRotatingFlippingAvatar: An avatar that rotates and flips based on input.\n\nShootAvatar: An oriented avatar that can shoot projectiles.\n\nVerticalAvatar: Avatar moving vertically, only up and down.\n\nAStarChaser: Chases target using A* algorithm.\n\nAlternateChaser: Chases or flees based on target assessment.\n\nBomber: A missile that periodically spawns other sprites.\n\nBomberRandomMissile: Spawns missiles of random types\n\nChaser: Speeds toward nearest target, occasionally in a random direction.\n\nConveyer: Static sprite that moves entities in a direction\n\nDoor: An immovable door that may act as a portal.\n\nEOS: End of Sprite (EOS)\n\nEraticMissile: A missile with erratic movement based on probability.\n\nFleeing: Sprite that flees from a certain entity.\n\nFlicker: Sprite that disappears after a set time limit.\n\nImmovable: A sprite that doesn't move.\n\nMissile: A sprite with oriented movement capability.\n\nOrientedFlicker: Oriented sprite that flickers and disappears.\n\nOrientedSprite: Sprite with specific orientation capability.\n\nPassive: Non-interactive VGDL sprite\n\nPathAltChaser: Chases targets along alternate paths\n\nPortal: Static sprite creating other sprites when conditions met.\n\nRandomInertial: Sprite with random inertial movement\n\nRandomMissile: Missile with trajectory direction chosen randomly.\n\nRandomNPC: A non-player character with random movement\n\nSpawnPoint: Generates sprites based on cooldown and probability.\n\nSpriteProducer: Produces sprites based on defined parameters.\n\nSwitch: Orientable sprite with active states\n\nVGDLSprite: A basic VGDL game sprite with various attributes.\n\nWalkJumper: Moves horizontally and occasionally jumps up\n\nWalker: A missile with specific air steering properties.\n\n",
          "task": "I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact",
          "elements": "**Game Elements** :\n- **Player**: The character controlled by the player. The player can move up, down, left, and right.\n- **Box/Crate**: Objects that need to be pushed to specific storage locations.\n- **Storage Location/Goal**: Designated spots where the boxes need to be placed to complete the level.\n- **Walls**: Obstacles that cannot be passed through or moved.\n- **Floor**: The walkable area where the player and boxes can move."
        }
      },
      "position": { "x": 2385, "y": 450 },
      "measured": { "width": 300, "height": 321 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1726411227000",
      "data": {
        "label": "",
        "data": "Here is your task I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact.\n\nHere is the game interactions you need in the game you make.\n\n**Game Interactions**:\n- **Player, Floor**: The player can move onto any floor space unless blocked by a wall or a box.\n- **Player, Wall**: The player cannot move through walls; walls serve as boundaries within the game map.\n- **Player, Box**: The player can push boxes if there is an open floor space behind the box in the direction the player is moving.\n- **Player, Target Location**: The player can move onto target locations, but does not need to do so for completion of the game objectives.\n- **Box, Floor**: Boxes can be pushed onto open floor spaces by the player.\n- **Box, Wall**: Boxes cannot be pushed through walls.\n- **Box, Box**: A box cannot be pushed into another box.\n- **Box, Target Location**: Boxes should be pushed onto these locations to meet the level's completion criteria.\n- **Target Location**: No interaction needed; they serve as objectives for box placement.\n\nPlease find the proper game effects types from the effect_description. \nHere is the simple description of the game effects types: addHealthPoints: Increases the sprite's health points.\n\naddHealthPointsToMax: Increase sprite's health, update max if exceeded limit.\n\nalign: Aligns sprite to partner's location and orientation.\n\nattractGaze: Aligns sprite orientation with partner's orientation based on probability\n\nbounceDirection: Alters sprite's speed and direction upon collision\n\nbounceForward: Moves sprite forward based on partner's direction and speed.\n\nchangeResource: Alters a sprite's resource value.\n\nchangeScore: Modifies the score of the game\n\ncloneSprite: Creates a clone of the given sprite.\n\ncollectResource: Collect a resource and update resources of partner.\n\nconveySprite: Moves sprite based on partner's orientation and strength\n\ngetColor: Retrieves the color of a sprite.\n\nkillAll: Eliminates all sprites of a specific type\n\nkillBoth: Eliminates both interacting game sprites.\n\nkillIfAlive: Conditionally kills a sprite if partner isn't being killed.\n\nkillIfFromAbove: Kills sprite if it falls on partner from above\n\nkillIfFrontal: Kills sprite if facing opposite direction to partner\n\nkillIfHasLess: Kills sprite if its resources are below given limit.\n\nkillIfHasMore: Kills sprite if it has more resources than limit\n\nkillIfNotFrontal: Kills a sprite if not directly frontal.\n\nkillIfOtherHasMore: Kills sprite if partner's resource exceeds limit\n\nkillIfSlow: Kills the sprite if relative speed is below limit.\n\nkillSprite: Adds sprite to the game's kill list.\n\nkill_effects: Defines kill conditions and transformations for sprites.\n\nnothing: No effect is applied between sprites.\n\npullWithIt: Pulls sprite with the partner's motion and speed.\n\nremoveSprite: Removes a sprite from the game.\n\nreverseDirection: Reverses the direction of a sprite.\n\nscoreChange: Increases game's score by specified value.\n\nsetSpeedForAll: Sets speed for all sprites of a specified type.\n\nshieldFrom: Provides a shield to a sprite from a specific type.\n\nslipForward: Chance to slide the sprite forward.\n\nspawn: Creates a new sprite at the current location.\n\nspawnIfHasLess: Spawns a sprite if resource is below a limit.\n\nspawnIfHasMore: Spawns a sprite if resource exceeds or equals a limit.\n\nstepBack: Move sprite to its last location\n\nstochastic_effects: Effects triggered with some probability.\n\nsubtractHealthPoints: Reduces health points of targeted sprites\n\nteleportToExit: Instantly moves sprite to a random exit point.\n\ntransformTo: Transforms sprite to specified type\n\ntransformToAll: Transforms all sprites of specified type.\n\ntransformToRandomChild: Transforms sprite to a random child type.\n\nturnAround: Reverses the movement direction of a sprite.\n\nundoAll: Reverts all sprites' positions except certain types.\n\nwallBounce: Handles sprite's bounce and friction against walls.\n\nwallStop: Stops the sprite upon hitting a wall.\n\nwindGust: Applies a directional push to a sprite.\n\nwrapAround: Transports sprite to opposite edge when moving out of bounds.\n\n\nPlease respond using the following format:\n## Explanation:\nWhat is the game interaction?\nThe interaction is between which game elements?\nWhat is the game effect?\nWhy you choose the effect?\n## Game Effects:\n- effect: between xxx and xxx\n- effect: between xxx and xxx",
        "string": "Here is your task {task}.\n\nHere is the game interactions you need in the game you make.\n\n{effects}\n\nPlease find the proper game effects types from the effect_description. \nHere is the simple description of the game effects types: {effect_simple_description}\nPlease respond using the following format:\n## Explanation:\nWhat is the game interaction?\nThe interaction is between which game elements?\nWhat is the game effect?\nWhy you choose the effect?\n## Game Effects:\n- effect: between xxx and xxx\n- effect: between xxx and xxx",
        "dict": {
          "task": "I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact",
          "effect_simple_description": "addHealthPoints: Increases the sprite's health points.\n\naddHealthPointsToMax: Increase sprite's health, update max if exceeded limit.\n\nalign: Aligns sprite to partner's location and orientation.\n\nattractGaze: Aligns sprite orientation with partner's orientation based on probability\n\nbounceDirection: Alters sprite's speed and direction upon collision\n\nbounceForward: Moves sprite forward based on partner's direction and speed.\n\nchangeResource: Alters a sprite's resource value.\n\nchangeScore: Modifies the score of the game\n\ncloneSprite: Creates a clone of the given sprite.\n\ncollectResource: Collect a resource and update resources of partner.\n\nconveySprite: Moves sprite based on partner's orientation and strength\n\ngetColor: Retrieves the color of a sprite.\n\nkillAll: Eliminates all sprites of a specific type\n\nkillBoth: Eliminates both interacting game sprites.\n\nkillIfAlive: Conditionally kills a sprite if partner isn't being killed.\n\nkillIfFromAbove: Kills sprite if it falls on partner from above\n\nkillIfFrontal: Kills sprite if facing opposite direction to partner\n\nkillIfHasLess: Kills sprite if its resources are below given limit.\n\nkillIfHasMore: Kills sprite if it has more resources than limit\n\nkillIfNotFrontal: Kills a sprite if not directly frontal.\n\nkillIfOtherHasMore: Kills sprite if partner's resource exceeds limit\n\nkillIfSlow: Kills the sprite if relative speed is below limit.\n\nkillSprite: Adds sprite to the game's kill list.\n\nkill_effects: Defines kill conditions and transformations for sprites.\n\nnothing: No effect is applied between sprites.\n\npullWithIt: Pulls sprite with the partner's motion and speed.\n\nremoveSprite: Removes a sprite from the game.\n\nreverseDirection: Reverses the direction of a sprite.\n\nscoreChange: Increases game's score by specified value.\n\nsetSpeedForAll: Sets speed for all sprites of a specified type.\n\nshieldFrom: Provides a shield to a sprite from a specific type.\n\nslipForward: Chance to slide the sprite forward.\n\nspawn: Creates a new sprite at the current location.\n\nspawnIfHasLess: Spawns a sprite if resource is below a limit.\n\nspawnIfHasMore: Spawns a sprite if resource exceeds or equals a limit.\n\nstepBack: Move sprite to its last location\n\nstochastic_effects: Effects triggered with some probability.\n\nsubtractHealthPoints: Reduces health points of targeted sprites\n\nteleportToExit: Instantly moves sprite to a random exit point.\n\ntransformTo: Transforms sprite to specified type\n\ntransformToAll: Transforms all sprites of specified type.\n\ntransformToRandomChild: Transforms sprite to a random child type.\n\nturnAround: Reverses the movement direction of a sprite.\n\nundoAll: Reverts all sprites' positions except certain types.\n\nwallBounce: Handles sprite's bounce and friction against walls.\n\nwallStop: Stops the sprite upon hitting a wall.\n\nwindGust: Applies a directional push to a sprite.\n\nwrapAround: Transports sprite to opposite edge when moving out of bounds.\n\n",
          "effects": "**Game Interactions**:\n- **Player, Floor**: The player can move onto any floor space unless blocked by a wall or a box.\n- **Player, Wall**: The player cannot move through walls; walls serve as boundaries within the game map.\n- **Player, Box**: The player can push boxes if there is an open floor space behind the box in the direction the player is moving.\n- **Player, Target Location**: The player can move onto target locations, but does not need to do so for completion of the game objectives.\n- **Box, Floor**: Boxes can be pushed onto open floor spaces by the player.\n- **Box, Wall**: Boxes cannot be pushed through walls.\n- **Box, Box**: A box cannot be pushed into another box.\n- **Box, Target Location**: Boxes should be pushed onto these locations to meet the level's completion criteria.\n- **Target Location**: No interaction needed; they serve as objectives for box placement."
        }
      },
      "position": { "x": 2400, "y": 945 },
      "measured": { "width": 300, "height": 321 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1726411481002",
      "data": {
        "label": "",
        "prompt": "Here is your task I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact.\n\nHere is the game interactions you need in the game you make.\n\n**Game Interactions**:\n- **Player, Floor**: The player can move onto any floor space unless blocked by a wall or a box.\n- **Player, Wall**: The player cannot move through walls; walls serve as boundaries within the game map.\n- **Player, Box**: The player can push boxes if there is an open floor space behind the box in the direction the player is moving.\n- **Player, Target Location**: The player can move onto target locations, but does not need to do so for completion of the game objectives.\n- **Box, Floor**: Boxes can be pushed onto open floor spaces by the player.\n- **Box, Wall**: Boxes cannot be pushed through walls.\n- **Box, Box**: A box cannot be pushed into another box.\n- **Box, Target Location**: Boxes should be pushed onto these locations to meet the level's completion criteria.\n- **Target Location**: No interaction needed; they serve as objectives for box placement.\n\nPlease find the proper game effects types from the effect_description. \nHere is the simple description of the game effects types: addHealthPoints: Increases the sprite's health points.\n\naddHealthPointsToMax: Increase sprite's health, update max if exceeded limit.\n\nalign: Aligns sprite to partner's location and orientation.\n\nattractGaze: Aligns sprite orientation with partner's orientation based on probability\n\nbounceDirection: Alters sprite's speed and direction upon collision\n\nbounceForward: Moves sprite forward based on partner's direction and speed.\n\nchangeResource: Alters a sprite's resource value.\n\nchangeScore: Modifies the score of the game\n\ncloneSprite: Creates a clone of the given sprite.\n\ncollectResource: Collect a resource and update resources of partner.\n\nconveySprite: Moves sprite based on partner's orientation and strength\n\ngetColor: Retrieves the color of a sprite.\n\nkillAll: Eliminates all sprites of a specific type\n\nkillBoth: Eliminates both interacting game sprites.\n\nkillIfAlive: Conditionally kills a sprite if partner isn't being killed.\n\nkillIfFromAbove: Kills sprite if it falls on partner from above\n\nkillIfFrontal: Kills sprite if facing opposite direction to partner\n\nkillIfHasLess: Kills sprite if its resources are below given limit.\n\nkillIfHasMore: Kills sprite if it has more resources than limit\n\nkillIfNotFrontal: Kills a sprite if not directly frontal.\n\nkillIfOtherHasMore: Kills sprite if partner's resource exceeds limit\n\nkillIfSlow: Kills the sprite if relative speed is below limit.\n\nkillSprite: Adds sprite to the game's kill list.\n\nkill_effects: Defines kill conditions and transformations for sprites.\n\nnothing: No effect is applied between sprites.\n\npullWithIt: Pulls sprite with the partner's motion and speed.\n\nremoveSprite: Removes a sprite from the game.\n\nreverseDirection: Reverses the direction of a sprite.\n\nscoreChange: Increases game's score by specified value.\n\nsetSpeedForAll: Sets speed for all sprites of a specified type.\n\nshieldFrom: Provides a shield to a sprite from a specific type.\n\nslipForward: Chance to slide the sprite forward.\n\nspawn: Creates a new sprite at the current location.\n\nspawnIfHasLess: Spawns a sprite if resource is below a limit.\n\nspawnIfHasMore: Spawns a sprite if resource exceeds or equals a limit.\n\nstepBack: Move sprite to its last location\n\nstochastic_effects: Effects triggered with some probability.\n\nsubtractHealthPoints: Reduces health points of targeted sprites\n\nteleportToExit: Instantly moves sprite to a random exit point.\n\ntransformTo: Transforms sprite to specified type\n\ntransformToAll: Transforms all sprites of specified type.\n\ntransformToRandomChild: Transforms sprite to a random child type.\n\nturnAround: Reverses the movement direction of a sprite.\n\nundoAll: Reverts all sprites' positions except certain types.\n\nwallBounce: Handles sprite's bounce and friction against walls.\n\nwallStop: Stops the sprite upon hitting a wall.\n\nwindGust: Applies a directional push to a sprite.\n\nwrapAround: Transports sprite to opposite edge when moving out of bounds.\n\n\nPlease respond using the following format:\n## Explanation:\nWhat is the game interaction?\nThe interaction is between which game elements?\nWhat is the game effect?\nWhy you choose the effect?\n## Game Effects:\n- effect: between xxx and xxx\n- effect: between xxx and xxx",
        "data": "## Game Elements:\n- Player: Represents the main character that can be moved by the player.\n- Box: Objects that the player can push around within the game environment.\n- Goal: Designated locations where boxes need to be placed to win the level.\n- Wall: Static obstacles that prevent movement.\n- Floor: Open spaces where the player and boxes can move.\n- Exit: An optional game element where the player seeks to transport the boxes or themselves.\n\n## Game Interactions:\n- Player, Box: The player can push a box when directly adjacent to it.\n- Box, Goal: When a box is pushed onto a goal, the goal state is updated.\n- Player, Wall: The player cannot move through walls.\n- Box, Wall: A box cannot be pushed through a wall.\n- Player, Floor: The player can walk on the floor when there is no box or wall blocking the path.\n- Box, Floor: The box can be moved onto the floor if there is no obstruction.\n- Player, Exit: When the player reaches the exit, a level may be completed or additional conditions may apply.\n\n## Explanation:\n### Interaction: Player pushes the Box\n- The interaction is between the Player and Box game elements.\n- The game effect is **conveySprite**.\n- This effect is chosen because it moves the box based on the player's orientation and strength.\n\n### Interaction: Box reaches Goal\n- The interaction is between the Box and Goal game elements.\n- The game effect is **changeResource**.\n- This effect is chosen to signify that a box is correctly placed on a goal, which can alter the game's resource value (e.g., level completion progress).\n\n### Interaction: Player encounters Wall\n- The interaction is between the Player and Wall game elements.\n- The game effect is **wallStop**.\n- This effect is selected to prevent the player from passing through walls, maintaining the integrity of the level design.\n\n### Interaction: Box encounters Wall\n- The interaction is between the Box and Wall game elements.\n- The game effect is **wallStop**.\n- This effect ensures that boxes cannot be pushed through walls, which is critical for maintaining puzzle challenges.\n\n### Interaction: Player reaches Exit\n- The interaction is between the Player and Exit game elements.\n- The game effect could be **teleportToExit** or **changeScore** based on game design goals.\n- **teleportToExit:** This could be used if reaching the exit teleports the player to a new level.\n- **changeScore:** Alternatively, this could increase the score or trigger level completion.\n\n## Game Effects:\n- conveySprite: between Player and Box\n- changeResource: between Box and Goal\n- wallStop: between Player and Wall\n- wallStop: between Box and Wall\n- teleportToExit or changeScore: between Player and Exit",
        "runflowGenerating": false
      },
      "position": { "x": 2910, "y": 1020 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSONNode",
      "id": "JSONNode_1726572559865",
      "data": {
        "label": "",
        "data": {
          "Avatar": {
            "name": "Avatar",
            "description": "Game character controlled by player, performs actions.",
            "parameters": {
              "type": "object",
              "properties": {
                "pos": {
                  "type": "array",
                  "description": "Position of the avatar in grid."
                },
                "size": {
                  "type": "array",
                  "description": "Size of the avatar in grid units."
                },
                "actions": {
                  "type": "array",
                  "description": "List of possible actions."
                }
              },
              "required": ["pos", "size"]
            }
          },
          "FlakAvatar": {
            "name": "FlakAvatar",
            "description": "Horizontal avatar that shoots with SPACE key.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": { "type": "string", "description": "avatar's color" }
              },
              "required": ["color"]
            }
          },
          "HorizontalAvatar": {
            "name": "HorizontalAvatar",
            "description": "An avatar that moves horizontally.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "MissileAvatar": {
            "name": "MissileAvatar",
            "description": "Oriented avatar that moves with speed 1.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "MovingAvatar": {
            "name": "MovingAvatar",
            "description": "A controllable avatar that can move in four directions.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "Color of the avatar."
                }
              },
              "required": ["color"]
            }
          },
          "NoisyRotatingFlippingAvatar": {
            "name": "NoisyRotatingFlippingAvatar",
            "description": "Avatar that rotates, flips, and emits noise",
            "parameters": {
              "type": "object",
              "properties": {
                "noiseLevel": {
                  "type": "number",
                  "description": "Intensity of emitted noise"
                }
              },
              "required": ["noiseLevel"]
            }
          },
          "OngoingShootAvatar": {
            "name": "OngoingShootAvatar",
            "description": "Avatar that continuously shoots with movement.",
            "parameters": {
              "type": "object",
              "properties": {
                "param1": {
                  "type": "string",
                  "description": "Parameter details undetermined"
                }
              },
              "required": []
            }
          },
          "OrientedAvatar": {
            "name": "OrientedAvatar",
            "description": "An avatar with a specific orientation and movement",
            "parameters": {
              "type": "object",
              "properties": {
                "draw_arrow": {
                  "type": "boolean",
                  "description": "Whether to draw arrow"
                }
              },
              "required": ["draw_arrow"]
            }
          },
          "RotatingAvatar": {
            "name": "RotatingAvatar",
            "description": "An avatar that rotates and moves.",
            "parameters": {
              "type": "object",
              "properties": {
                "draw_arrow": {
                  "type": "boolean",
                  "description": "Displays an arrow on avatar."
                }
              },
              "required": ["draw_arrow"]
            }
          },
          "RotatingFlippingAvatar": {
            "name": "RotatingFlippingAvatar",
            "description": "An avatar that rotates and flips based on input.",
            "parameters": {
              "type": "object",
              "properties": {
                "noiseLevel": {
                  "type": "number",
                  "description": "Adds random noise to actions."
                }
              },
              "required": ["noiseLevel"]
            }
          },
          "ShootAvatar": {
            "name": "ShootAvatar",
            "description": "An oriented avatar that can shoot projectiles.",
            "parameters": {
              "type": "object",
              "properties": {
                "ammo": {
                  "type": "string",
                  "description": "Type of ammo used."
                },
                "stype": {
                  "type": "string",
                  "description": "Specified projectile type."
                }
              },
              "required": ["ammo", "stype"]
            }
          },
          "VerticalAvatar": {
            "name": "VerticalAvatar",
            "description": "Avatar moving vertically, only up and down.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          }
        }
      },
      "position": { "x": 435, "y": -1050 },
      "measured": { "width": 368, "height": 410 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSONPreview",
      "id": "JSONPreview_1726575023701",
      "data": { "label": "" },
      "position": { "x": 1635, "y": -240 },
      "measured": { "width": 187, "height": 115 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSEvalNode",
      "id": "JSEvalNode_1726575035227",
      "data": {
        "label": "",
        "string": "function process({json1, json2}) {\nreturn {...json1, ...json2}\n}",
        "dict": {
          "json1": {
            "Avatar": {
              "name": "Avatar",
              "description": "Game character controlled by player, performs actions.",
              "parameters": {
                "type": "object",
                "properties": {
                  "pos": {
                    "type": "array",
                    "description": "Position of the avatar in grid."
                  },
                  "size": {
                    "type": "array",
                    "description": "Size of the avatar in grid units."
                  },
                  "actions": {
                    "type": "array",
                    "description": "List of possible actions."
                  }
                },
                "required": ["pos", "size"]
              }
            },
            "FlakAvatar": {
              "name": "FlakAvatar",
              "description": "Horizontal avatar that shoots with SPACE key.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": { "type": "string", "description": "avatar's color" }
                },
                "required": ["color"]
              }
            },
            "HorizontalAvatar": {
              "name": "HorizontalAvatar",
              "description": "An avatar that moves horizontally.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "MissileAvatar": {
              "name": "MissileAvatar",
              "description": "Oriented avatar that moves with speed 1.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "MovingAvatar": {
              "name": "MovingAvatar",
              "description": "A controllable avatar that can move in four directions.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the avatar."
                  }
                },
                "required": ["color"]
              }
            },
            "NoisyRotatingFlippingAvatar": {
              "name": "NoisyRotatingFlippingAvatar",
              "description": "Avatar that rotates, flips, and emits noise",
              "parameters": {
                "type": "object",
                "properties": {
                  "noiseLevel": {
                    "type": "number",
                    "description": "Intensity of emitted noise"
                  }
                },
                "required": ["noiseLevel"]
              }
            },
            "OngoingShootAvatar": {
              "name": "OngoingShootAvatar",
              "description": "Avatar that continuously shoots with movement.",
              "parameters": {
                "type": "object",
                "properties": {
                  "param1": {
                    "type": "string",
                    "description": "Parameter details undetermined"
                  }
                },
                "required": []
              }
            },
            "OrientedAvatar": {
              "name": "OrientedAvatar",
              "description": "An avatar with a specific orientation and movement",
              "parameters": {
                "type": "object",
                "properties": {
                  "draw_arrow": {
                    "type": "boolean",
                    "description": "Whether to draw arrow"
                  }
                },
                "required": ["draw_arrow"]
              }
            },
            "RotatingAvatar": {
              "name": "RotatingAvatar",
              "description": "An avatar that rotates and moves.",
              "parameters": {
                "type": "object",
                "properties": {
                  "draw_arrow": {
                    "type": "boolean",
                    "description": "Displays an arrow on avatar."
                  }
                },
                "required": ["draw_arrow"]
              }
            },
            "RotatingFlippingAvatar": {
              "name": "RotatingFlippingAvatar",
              "description": "An avatar that rotates and flips based on input.",
              "parameters": {
                "type": "object",
                "properties": {
                  "noiseLevel": {
                    "type": "number",
                    "description": "Adds random noise to actions."
                  }
                },
                "required": ["noiseLevel"]
              }
            },
            "ShootAvatar": {
              "name": "ShootAvatar",
              "description": "An oriented avatar that can shoot projectiles.",
              "parameters": {
                "type": "object",
                "properties": {
                  "ammo": {
                    "type": "string",
                    "description": "Type of ammo used."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Specified projectile type."
                  }
                },
                "required": ["ammo", "stype"]
              }
            },
            "VerticalAvatar": {
              "name": "VerticalAvatar",
              "description": "Avatar moving vertically, only up and down.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          },
          "json2": {
            "AStarChaser": {
              "name": "AStarChaser",
              "description": "Chases target using A* algorithm.",
              "parameters": {
                "type": "object",
                "properties": {
                  "fleeing": {
                    "type": "boolean",
                    "description": "If true, moves away from target."
                  }
                },
                "required": []
              }
            },
            "AlternateChaser": {
              "name": "AlternateChaser",
              "description": "Chases or flees based on target assessment.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype1": {
                    "type": "string",
                    "description": "Comma-separated first target types."
                  },
                  "stype2": {
                    "type": "string",
                    "description": "Comma-separated second target types."
                  }
                },
                "required": ["stype1", "stype2"]
              }
            },
            "Bomber": {
              "name": "Bomber",
              "description": "A missile that periodically spawns other sprites.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the bomber."
                  },
                  "is_static": {
                    "type": "boolean",
                    "description": "Whether the bomber is static."
                  },
                  "prob": {
                    "type": "number",
                    "description": "Probability of spawning a sprite."
                  },
                  "cooldown": {
                    "type": "number",
                    "description": "Cooldown period for spawning."
                  },
                  "total": {
                    "type": "number",
                    "description": "Total spawns before self-destruction."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of sprite to spawn."
                  }
                },
                "required": ["stype"]
              }
            },
            "BomberRandomMissile": {
              "name": "BomberRandomMissile",
              "description": "Spawns missiles of random types",
              "parameters": {
                "type": "object",
                "properties": {
                  "stypeMissile": {
                    "type": "string",
                    "description": "Comma-separated missile types"
                  }
                },
                "required": ["stypeMissile"]
              }
            },
            "Chaser": {
              "name": "Chaser",
              "description": "Speeds toward nearest target, occasionally in a random direction.",
              "parameters": {
                "type": "object",
                "properties": {
                  "portal": {
                    "type": "boolean",
                    "description": "indicates portal behavior, default is true"
                  },
                  "stype": {
                    "type": "string",
                    "description": "target sprite type to chase"
                  }
                },
                "required": ["stype"]
              }
            },
            "Conveyer": {
              "name": "Conveyer",
              "description": "Static sprite that moves entities in a direction",
              "parameters": {
                "type": "object",
                "properties": {
                  "strength": {
                    "type": "number",
                    "description": "Force applied to moved entities"
                  },
                  "draw_arrow": {
                    "type": "boolean",
                    "description": "Toggle arrow display on sprite"
                  }
                },
                "required": ["strength", "draw_arrow"]
              }
            },
            "Door": {
              "name": "Door",
              "description": "An immovable door that may act as a portal.",
              "parameters": {
                "type": "object",
                "properties": {
                  "portal": {
                    "type": "boolean",
                    "description": "indicates if door is portal"
                  }
                },
                "required": ["portal"]
              }
            },
            "EOS": {
              "name": "EOS",
              "description": "End of Sprite (EOS)",
              "parameters": {
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "unique identifier of the sprite"
                  }
                },
                "required": ["ID"]
              }
            },
            "EraticMissile": {
              "name": "EraticMissile",
              "description": "A missile with erratic movement based on probability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "Chance to change direction."
                  }
                },
                "required": ["prob"]
              }
            },
            "Fleeing": {
              "name": "Fleeing",
              "description": "Sprite that flees from a certain entity.",
              "parameters": {
                "type": "object",
                "properties": {
                  "portal": {
                    "type": "boolean",
                    "description": "Determines if portals are used."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of entity to flee from."
                  }
                },
                "required": ["portal", "stype"]
              }
            },
            "Flicker": {
              "name": "Flicker",
              "description": "Sprite that disappears after a set time limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the sprite"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Time limit before disappearance"
                  }
                },
                "required": ["limit"]
              }
            },
            "Immovable": {
              "name": "Immovable",
              "description": "A sprite that doesn't move.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "The color of the sprite"
                  },
                  "is_static": {
                    "type": "boolean",
                    "description": "Determines if sprite is static"
                  }
                },
                "required": []
              }
            },
            "Missile": {
              "name": "Missile",
              "description": "A sprite with oriented movement capability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "speed": {
                    "type": "number",
                    "description": "Movement speed of the sprite."
                  }
                },
                "required": ["speed"]
              }
            },
            "OrientedFlicker": {
              "name": "OrientedFlicker",
              "description": "Oriented sprite that flickers and disappears.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "number",
                    "description": "Flicker duration in frames."
                  }
                },
                "required": ["limit"]
              }
            },
            "OrientedSprite": {
              "name": "OrientedSprite",
              "description": "Sprite with specific orientation capability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "orientation": {
                    "type": "string",
                    "description": "Initial direction of the sprite."
                  }
                },
                "required": ["orientation"]
              }
            },
            "Passive": {
              "name": "Passive",
              "description": "Non-interactive VGDL sprite",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "The color of the sprite"
                  }
                },
                "required": ["color"]
              }
            },
            "PathAltChaser": {
              "name": "PathAltChaser",
              "description": "Chases targets along alternate paths",
              "parameters": {
                "type": "object",
                "properties": {
                  "param1": {
                    "type": "string",
                    "description": "potential parameter explanation"
                  },
                  "param2": {
                    "type": "number",
                    "description": "potential parameter explanation"
                  }
                },
                "required": ["param1", "param2"]
              }
            },
            "Portal": {
              "name": "Portal",
              "description": "Static sprite creating other sprites when conditions met.",
              "parameters": {
                "type": "object",
                "properties": {
                  "pos": {
                    "type": "array",
                    "description": "Position of the portal."
                  },
                  "size": {
                    "type": "array",
                    "description": "Size of the portal."
                  },
                  "args": {
                    "type": "object",
                    "description": "Additional arguments for portal behavior."
                  }
                },
                "required": ["pos", "size", "args"]
              }
            },
            "RandomInertial": {
              "name": "RandomInertial",
              "description": "Sprite with random inertial movement",
              "parameters": {
                "type": "object",
                "properties": {
                  "pos": {
                    "type": "array",
                    "description": "Initial position coordinates"
                  },
                  "size": {
                    "type": "array",
                    "description": "Size of the sprite"
                  },
                  "args": {
                    "type": "object",
                    "description": "Additional arguments for sprite"
                  }
                },
                "required": ["pos", "size", "args"]
              }
            },
            "RandomMissile": {
              "name": "RandomMissile",
              "description": "Missile with trajectory direction chosen randomly.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "RandomNPC": {
              "name": "RandomNPC",
              "description": "A non-player character with random movement",
              "parameters": {
                "type": "object",
                "properties": {
                  "speed": {
                    "type": "number",
                    "description": "movement speed of the sprite"
                  },
                  "is_stochastic": {
                    "type": "boolean",
                    "description": "indicates random behavior"
                  }
                },
                "required": ["speed", "is_stochastic"]
              }
            },
            "SpawnPoint": {
              "name": "SpawnPoint",
              "description": "Generates sprites based on cooldown and probability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "cooldown": {
                    "type": "number",
                    "description": "Time intervals between spawns."
                  },
                  "prob": {
                    "type": "number",
                    "description": "Probability of spawning each interval."
                  },
                  "total": {
                    "type": "number",
                    "description": "Maximum number of spawns allowed."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of the sprite to spawn."
                  },
                  "color": {
                    "type": "string",
                    "description": "Color of the spawn point."
                  }
                },
                "required": ["cooldown", "stype"]
              }
            },
            "SpriteProducer": {
              "name": "SpriteProducer",
              "description": "Produces sprites based on defined parameters.",
              "parameters": {
                "type": "object",
                "properties": {
                  "spriteType": {
                    "type": "string",
                    "description": "Type of sprite to produce"
                  },
                  "frequency": {
                    "type": "number",
                    "description": "Frequency of sprite production"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Maximum number of sprites"
                  }
                },
                "required": ["spriteType", "frequency", "limit"]
              }
            },
            "Switch": {
              "name": "Switch",
              "description": "Orientable sprite with active states",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "VGDLSprite": {
              "name": "VGDLSprite",
              "description": "A basic VGDL game sprite with various attributes.",
              "parameters": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "name of the sprite"
                  },
                  "physicstype": {
                    "type": "object",
                    "description": "physics type for this sprite"
                  },
                  "speed": {
                    "type": "number",
                    "description": "speed of the sprite"
                  },
                  "cooldown": {
                    "type": "number",
                    "description": "cooldown period for actions"
                  },
                  "color": {
                    "type": "string",
                    "description": "color of the sprite"
                  },
                  "image": {
                    "type": "string",
                    "description": "image for the sprite"
                  },
                  "healthPoints": {
                    "type": "number",
                    "description": "current health points"
                  },
                  "limitHealthPoints": {
                    "type": "number",
                    "description": "maximum limit for health points"
                  },
                  "maxHealthPoints": {
                    "type": "number",
                    "description": "max initial health points"
                  }
                },
                "required": [
                  "key",
                  "physicstype",
                  "speed",
                  "cooldown",
                  "color",
                  "image",
                  "healthPoints",
                  "limitHealthPoints",
                  "maxHealthPoints"
                ]
              }
            },
            "WalkJumper": {
              "name": "WalkJumper",
              "description": "Moves horizontally and occasionally jumps up",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "probability of jumping"
                  },
                  "strength": {
                    "type": "number",
                    "description": "jumping strength"
                  }
                },
                "required": ["prob", "strength"]
              }
            },
            "Walker": {
              "name": "Walker",
              "description": "A missile with specific air steering properties.",
              "parameters": {
                "type": "object",
                "properties": {
                  "airsteering": {
                    "type": "boolean",
                    "description": "Enables air steering."
                  },
                  "is_stochastic": {
                    "type": "boolean",
                    "description": "Enables stochastic movement."
                  }
                },
                "required": ["airsteering", "is_stochastic"]
              }
            }
          }
        },
        "data": {
          "Avatar": {
            "name": "Avatar",
            "description": "Game character controlled by player, performs actions.",
            "parameters": {
              "type": "object",
              "properties": {
                "pos": {
                  "type": "array",
                  "description": "Position of the avatar in grid."
                },
                "size": {
                  "type": "array",
                  "description": "Size of the avatar in grid units."
                },
                "actions": {
                  "type": "array",
                  "description": "List of possible actions."
                }
              },
              "required": ["pos", "size"]
            }
          },
          "FlakAvatar": {
            "name": "FlakAvatar",
            "description": "Horizontal avatar that shoots with SPACE key.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": { "type": "string", "description": "avatar's color" }
              },
              "required": ["color"]
            }
          },
          "HorizontalAvatar": {
            "name": "HorizontalAvatar",
            "description": "An avatar that moves horizontally.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "MissileAvatar": {
            "name": "MissileAvatar",
            "description": "Oriented avatar that moves with speed 1.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "MovingAvatar": {
            "name": "MovingAvatar",
            "description": "A controllable avatar that can move in four directions.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "Color of the avatar."
                }
              },
              "required": ["color"]
            }
          },
          "NoisyRotatingFlippingAvatar": {
            "name": "NoisyRotatingFlippingAvatar",
            "description": "Avatar that rotates, flips, and emits noise",
            "parameters": {
              "type": "object",
              "properties": {
                "noiseLevel": {
                  "type": "number",
                  "description": "Intensity of emitted noise"
                }
              },
              "required": ["noiseLevel"]
            }
          },
          "OngoingShootAvatar": {
            "name": "OngoingShootAvatar",
            "description": "Avatar that continuously shoots with movement.",
            "parameters": {
              "type": "object",
              "properties": {
                "param1": {
                  "type": "string",
                  "description": "Parameter details undetermined"
                }
              },
              "required": []
            }
          },
          "OrientedAvatar": {
            "name": "OrientedAvatar",
            "description": "An avatar with a specific orientation and movement",
            "parameters": {
              "type": "object",
              "properties": {
                "draw_arrow": {
                  "type": "boolean",
                  "description": "Whether to draw arrow"
                }
              },
              "required": ["draw_arrow"]
            }
          },
          "RotatingAvatar": {
            "name": "RotatingAvatar",
            "description": "An avatar that rotates and moves.",
            "parameters": {
              "type": "object",
              "properties": {
                "draw_arrow": {
                  "type": "boolean",
                  "description": "Displays an arrow on avatar."
                }
              },
              "required": ["draw_arrow"]
            }
          },
          "RotatingFlippingAvatar": {
            "name": "RotatingFlippingAvatar",
            "description": "An avatar that rotates and flips based on input.",
            "parameters": {
              "type": "object",
              "properties": {
                "noiseLevel": {
                  "type": "number",
                  "description": "Adds random noise to actions."
                }
              },
              "required": ["noiseLevel"]
            }
          },
          "ShootAvatar": {
            "name": "ShootAvatar",
            "description": "An oriented avatar that can shoot projectiles.",
            "parameters": {
              "type": "object",
              "properties": {
                "ammo": {
                  "type": "string",
                  "description": "Type of ammo used."
                },
                "stype": {
                  "type": "string",
                  "description": "Specified projectile type."
                }
              },
              "required": ["ammo", "stype"]
            }
          },
          "VerticalAvatar": {
            "name": "VerticalAvatar",
            "description": "Avatar moving vertically, only up and down.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "AStarChaser": {
            "name": "AStarChaser",
            "description": "Chases target using A* algorithm.",
            "parameters": {
              "type": "object",
              "properties": {
                "fleeing": {
                  "type": "boolean",
                  "description": "If true, moves away from target."
                }
              },
              "required": []
            }
          },
          "AlternateChaser": {
            "name": "AlternateChaser",
            "description": "Chases or flees based on target assessment.",
            "parameters": {
              "type": "object",
              "properties": {
                "stype1": {
                  "type": "string",
                  "description": "Comma-separated first target types."
                },
                "stype2": {
                  "type": "string",
                  "description": "Comma-separated second target types."
                }
              },
              "required": ["stype1", "stype2"]
            }
          },
          "Bomber": {
            "name": "Bomber",
            "description": "A missile that periodically spawns other sprites.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "Color of the bomber."
                },
                "is_static": {
                  "type": "boolean",
                  "description": "Whether the bomber is static."
                },
                "prob": {
                  "type": "number",
                  "description": "Probability of spawning a sprite."
                },
                "cooldown": {
                  "type": "number",
                  "description": "Cooldown period for spawning."
                },
                "total": {
                  "type": "number",
                  "description": "Total spawns before self-destruction."
                },
                "stype": {
                  "type": "string",
                  "description": "Type of sprite to spawn."
                }
              },
              "required": ["stype"]
            }
          },
          "BomberRandomMissile": {
            "name": "BomberRandomMissile",
            "description": "Spawns missiles of random types",
            "parameters": {
              "type": "object",
              "properties": {
                "stypeMissile": {
                  "type": "string",
                  "description": "Comma-separated missile types"
                }
              },
              "required": ["stypeMissile"]
            }
          },
          "Chaser": {
            "name": "Chaser",
            "description": "Speeds toward nearest target, occasionally in a random direction.",
            "parameters": {
              "type": "object",
              "properties": {
                "portal": {
                  "type": "boolean",
                  "description": "indicates portal behavior, default is true"
                },
                "stype": {
                  "type": "string",
                  "description": "target sprite type to chase"
                }
              },
              "required": ["stype"]
            }
          },
          "Conveyer": {
            "name": "Conveyer",
            "description": "Static sprite that moves entities in a direction",
            "parameters": {
              "type": "object",
              "properties": {
                "strength": {
                  "type": "number",
                  "description": "Force applied to moved entities"
                },
                "draw_arrow": {
                  "type": "boolean",
                  "description": "Toggle arrow display on sprite"
                }
              },
              "required": ["strength", "draw_arrow"]
            }
          },
          "Door": {
            "name": "Door",
            "description": "An immovable door that may act as a portal.",
            "parameters": {
              "type": "object",
              "properties": {
                "portal": {
                  "type": "boolean",
                  "description": "indicates if door is portal"
                }
              },
              "required": ["portal"]
            }
          },
          "EOS": {
            "name": "EOS",
            "description": "End of Sprite (EOS)",
            "parameters": {
              "type": "object",
              "properties": {
                "ID": {
                  "type": "integer",
                  "description": "unique identifier of the sprite"
                }
              },
              "required": ["ID"]
            }
          },
          "EraticMissile": {
            "name": "EraticMissile",
            "description": "A missile with erratic movement based on probability.",
            "parameters": {
              "type": "object",
              "properties": {
                "prob": {
                  "type": "number",
                  "description": "Chance to change direction."
                }
              },
              "required": ["prob"]
            }
          },
          "Fleeing": {
            "name": "Fleeing",
            "description": "Sprite that flees from a certain entity.",
            "parameters": {
              "type": "object",
              "properties": {
                "portal": {
                  "type": "boolean",
                  "description": "Determines if portals are used."
                },
                "stype": {
                  "type": "string",
                  "description": "Type of entity to flee from."
                }
              },
              "required": ["portal", "stype"]
            }
          },
          "Flicker": {
            "name": "Flicker",
            "description": "Sprite that disappears after a set time limit.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "Color of the sprite"
                },
                "limit": {
                  "type": "integer",
                  "description": "Time limit before disappearance"
                }
              },
              "required": ["limit"]
            }
          },
          "Immovable": {
            "name": "Immovable",
            "description": "A sprite that doesn't move.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "The color of the sprite"
                },
                "is_static": {
                  "type": "boolean",
                  "description": "Determines if sprite is static"
                }
              },
              "required": []
            }
          },
          "Missile": {
            "name": "Missile",
            "description": "A sprite with oriented movement capability.",
            "parameters": {
              "type": "object",
              "properties": {
                "speed": {
                  "type": "number",
                  "description": "Movement speed of the sprite."
                }
              },
              "required": ["speed"]
            }
          },
          "OrientedFlicker": {
            "name": "OrientedFlicker",
            "description": "Oriented sprite that flickers and disappears.",
            "parameters": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": "number",
                  "description": "Flicker duration in frames."
                }
              },
              "required": ["limit"]
            }
          },
          "OrientedSprite": {
            "name": "OrientedSprite",
            "description": "Sprite with specific orientation capability.",
            "parameters": {
              "type": "object",
              "properties": {
                "orientation": {
                  "type": "string",
                  "description": "Initial direction of the sprite."
                }
              },
              "required": ["orientation"]
            }
          },
          "Passive": {
            "name": "Passive",
            "description": "Non-interactive VGDL sprite",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "The color of the sprite"
                }
              },
              "required": ["color"]
            }
          },
          "PathAltChaser": {
            "name": "PathAltChaser",
            "description": "Chases targets along alternate paths",
            "parameters": {
              "type": "object",
              "properties": {
                "param1": {
                  "type": "string",
                  "description": "potential parameter explanation"
                },
                "param2": {
                  "type": "number",
                  "description": "potential parameter explanation"
                }
              },
              "required": ["param1", "param2"]
            }
          },
          "Portal": {
            "name": "Portal",
            "description": "Static sprite creating other sprites when conditions met.",
            "parameters": {
              "type": "object",
              "properties": {
                "pos": {
                  "type": "array",
                  "description": "Position of the portal."
                },
                "size": {
                  "type": "array",
                  "description": "Size of the portal."
                },
                "args": {
                  "type": "object",
                  "description": "Additional arguments for portal behavior."
                }
              },
              "required": ["pos", "size", "args"]
            }
          },
          "RandomInertial": {
            "name": "RandomInertial",
            "description": "Sprite with random inertial movement",
            "parameters": {
              "type": "object",
              "properties": {
                "pos": {
                  "type": "array",
                  "description": "Initial position coordinates"
                },
                "size": {
                  "type": "array",
                  "description": "Size of the sprite"
                },
                "args": {
                  "type": "object",
                  "description": "Additional arguments for sprite"
                }
              },
              "required": ["pos", "size", "args"]
            }
          },
          "RandomMissile": {
            "name": "RandomMissile",
            "description": "Missile with trajectory direction chosen randomly.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "RandomNPC": {
            "name": "RandomNPC",
            "description": "A non-player character with random movement",
            "parameters": {
              "type": "object",
              "properties": {
                "speed": {
                  "type": "number",
                  "description": "movement speed of the sprite"
                },
                "is_stochastic": {
                  "type": "boolean",
                  "description": "indicates random behavior"
                }
              },
              "required": ["speed", "is_stochastic"]
            }
          },
          "SpawnPoint": {
            "name": "SpawnPoint",
            "description": "Generates sprites based on cooldown and probability.",
            "parameters": {
              "type": "object",
              "properties": {
                "cooldown": {
                  "type": "number",
                  "description": "Time intervals between spawns."
                },
                "prob": {
                  "type": "number",
                  "description": "Probability of spawning each interval."
                },
                "total": {
                  "type": "number",
                  "description": "Maximum number of spawns allowed."
                },
                "stype": {
                  "type": "string",
                  "description": "Type of the sprite to spawn."
                },
                "color": {
                  "type": "string",
                  "description": "Color of the spawn point."
                }
              },
              "required": ["cooldown", "stype"]
            }
          },
          "SpriteProducer": {
            "name": "SpriteProducer",
            "description": "Produces sprites based on defined parameters.",
            "parameters": {
              "type": "object",
              "properties": {
                "spriteType": {
                  "type": "string",
                  "description": "Type of sprite to produce"
                },
                "frequency": {
                  "type": "number",
                  "description": "Frequency of sprite production"
                },
                "limit": {
                  "type": "integer",
                  "description": "Maximum number of sprites"
                }
              },
              "required": ["spriteType", "frequency", "limit"]
            }
          },
          "Switch": {
            "name": "Switch",
            "description": "Orientable sprite with active states",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "VGDLSprite": {
            "name": "VGDLSprite",
            "description": "A basic VGDL game sprite with various attributes.",
            "parameters": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "name of the sprite"
                },
                "physicstype": {
                  "type": "object",
                  "description": "physics type for this sprite"
                },
                "speed": {
                  "type": "number",
                  "description": "speed of the sprite"
                },
                "cooldown": {
                  "type": "number",
                  "description": "cooldown period for actions"
                },
                "color": {
                  "type": "string",
                  "description": "color of the sprite"
                },
                "image": {
                  "type": "string",
                  "description": "image for the sprite"
                },
                "healthPoints": {
                  "type": "number",
                  "description": "current health points"
                },
                "limitHealthPoints": {
                  "type": "number",
                  "description": "maximum limit for health points"
                },
                "maxHealthPoints": {
                  "type": "number",
                  "description": "max initial health points"
                }
              },
              "required": [
                "key",
                "physicstype",
                "speed",
                "cooldown",
                "color",
                "image",
                "healthPoints",
                "limitHealthPoints",
                "maxHealthPoints"
              ]
            }
          },
          "WalkJumper": {
            "name": "WalkJumper",
            "description": "Moves horizontally and occasionally jumps up",
            "parameters": {
              "type": "object",
              "properties": {
                "prob": {
                  "type": "number",
                  "description": "probability of jumping"
                },
                "strength": {
                  "type": "number",
                  "description": "jumping strength"
                }
              },
              "required": ["prob", "strength"]
            }
          },
          "Walker": {
            "name": "Walker",
            "description": "A missile with specific air steering properties.",
            "parameters": {
              "type": "object",
              "properties": {
                "airsteering": {
                  "type": "boolean",
                  "description": "Enables air steering."
                },
                "is_stochastic": {
                  "type": "boolean",
                  "description": "Enables stochastic movement."
                }
              },
              "required": ["airsteering", "is_stochastic"]
            }
          }
        },
        "runflowGenerating": true
      },
      "position": { "x": 900, "y": 0 },
      "measured": { "width": 333, "height": 256 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSONNode",
      "id": "JSONNode_1726575053250",
      "data": {
        "label": "",
        "data": {
          "AStarChaser": {
            "name": "AStarChaser",
            "description": "Chases target using A* algorithm.",
            "parameters": {
              "type": "object",
              "properties": {
                "fleeing": {
                  "type": "boolean",
                  "description": "If true, moves away from target."
                }
              },
              "required": []
            }
          },
          "AlternateChaser": {
            "name": "AlternateChaser",
            "description": "Chases or flees based on target assessment.",
            "parameters": {
              "type": "object",
              "properties": {
                "stype1": {
                  "type": "string",
                  "description": "Comma-separated first target types."
                },
                "stype2": {
                  "type": "string",
                  "description": "Comma-separated second target types."
                }
              },
              "required": ["stype1", "stype2"]
            }
          },
          "Bomber": {
            "name": "Bomber",
            "description": "A missile that periodically spawns other sprites.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "Color of the bomber."
                },
                "is_static": {
                  "type": "boolean",
                  "description": "Whether the bomber is static."
                },
                "prob": {
                  "type": "number",
                  "description": "Probability of spawning a sprite."
                },
                "cooldown": {
                  "type": "number",
                  "description": "Cooldown period for spawning."
                },
                "total": {
                  "type": "number",
                  "description": "Total spawns before self-destruction."
                },
                "stype": {
                  "type": "string",
                  "description": "Type of sprite to spawn."
                }
              },
              "required": ["stype"]
            }
          },
          "BomberRandomMissile": {
            "name": "BomberRandomMissile",
            "description": "Spawns missiles of random types",
            "parameters": {
              "type": "object",
              "properties": {
                "stypeMissile": {
                  "type": "string",
                  "description": "Comma-separated missile types"
                }
              },
              "required": ["stypeMissile"]
            }
          },
          "Chaser": {
            "name": "Chaser",
            "description": "Speeds toward nearest target, occasionally in a random direction.",
            "parameters": {
              "type": "object",
              "properties": {
                "portal": {
                  "type": "boolean",
                  "description": "indicates portal behavior, default is true"
                },
                "stype": {
                  "type": "string",
                  "description": "target sprite type to chase"
                }
              },
              "required": ["stype"]
            }
          },
          "Conveyer": {
            "name": "Conveyer",
            "description": "Static sprite that moves entities in a direction",
            "parameters": {
              "type": "object",
              "properties": {
                "strength": {
                  "type": "number",
                  "description": "Force applied to moved entities"
                },
                "draw_arrow": {
                  "type": "boolean",
                  "description": "Toggle arrow display on sprite"
                }
              },
              "required": ["strength", "draw_arrow"]
            }
          },
          "Door": {
            "name": "Door",
            "description": "An immovable door that may act as a portal.",
            "parameters": {
              "type": "object",
              "properties": {
                "portal": {
                  "type": "boolean",
                  "description": "indicates if door is portal"
                }
              },
              "required": ["portal"]
            }
          },
          "EOS": {
            "name": "EOS",
            "description": "End of Sprite (EOS)",
            "parameters": {
              "type": "object",
              "properties": {
                "ID": {
                  "type": "integer",
                  "description": "unique identifier of the sprite"
                }
              },
              "required": ["ID"]
            }
          },
          "EraticMissile": {
            "name": "EraticMissile",
            "description": "A missile with erratic movement based on probability.",
            "parameters": {
              "type": "object",
              "properties": {
                "prob": {
                  "type": "number",
                  "description": "Chance to change direction."
                }
              },
              "required": ["prob"]
            }
          },
          "Fleeing": {
            "name": "Fleeing",
            "description": "Sprite that flees from a certain entity.",
            "parameters": {
              "type": "object",
              "properties": {
                "portal": {
                  "type": "boolean",
                  "description": "Determines if portals are used."
                },
                "stype": {
                  "type": "string",
                  "description": "Type of entity to flee from."
                }
              },
              "required": ["portal", "stype"]
            }
          },
          "Flicker": {
            "name": "Flicker",
            "description": "Sprite that disappears after a set time limit.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "Color of the sprite"
                },
                "limit": {
                  "type": "integer",
                  "description": "Time limit before disappearance"
                }
              },
              "required": ["limit"]
            }
          },
          "Immovable": {
            "name": "Immovable",
            "description": "A sprite that doesn't move.",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "The color of the sprite"
                },
                "is_static": {
                  "type": "boolean",
                  "description": "Determines if sprite is static"
                }
              },
              "required": []
            }
          },
          "Missile": {
            "name": "Missile",
            "description": "A sprite with oriented movement capability.",
            "parameters": {
              "type": "object",
              "properties": {
                "speed": {
                  "type": "number",
                  "description": "Movement speed of the sprite."
                }
              },
              "required": ["speed"]
            }
          },
          "OrientedFlicker": {
            "name": "OrientedFlicker",
            "description": "Oriented sprite that flickers and disappears.",
            "parameters": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": "number",
                  "description": "Flicker duration in frames."
                }
              },
              "required": ["limit"]
            }
          },
          "OrientedSprite": {
            "name": "OrientedSprite",
            "description": "Sprite with specific orientation capability.",
            "parameters": {
              "type": "object",
              "properties": {
                "orientation": {
                  "type": "string",
                  "description": "Initial direction of the sprite."
                }
              },
              "required": ["orientation"]
            }
          },
          "Passive": {
            "name": "Passive",
            "description": "Non-interactive VGDL sprite",
            "parameters": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "The color of the sprite"
                }
              },
              "required": ["color"]
            }
          },
          "PathAltChaser": {
            "name": "PathAltChaser",
            "description": "Chases targets along alternate paths",
            "parameters": {
              "type": "object",
              "properties": {
                "param1": {
                  "type": "string",
                  "description": "potential parameter explanation"
                },
                "param2": {
                  "type": "number",
                  "description": "potential parameter explanation"
                }
              },
              "required": ["param1", "param2"]
            }
          },
          "Portal": {
            "name": "Portal",
            "description": "Static sprite creating other sprites when conditions met.",
            "parameters": {
              "type": "object",
              "properties": {
                "pos": {
                  "type": "array",
                  "description": "Position of the portal."
                },
                "size": {
                  "type": "array",
                  "description": "Size of the portal."
                },
                "args": {
                  "type": "object",
                  "description": "Additional arguments for portal behavior."
                }
              },
              "required": ["pos", "size", "args"]
            }
          },
          "RandomInertial": {
            "name": "RandomInertial",
            "description": "Sprite with random inertial movement",
            "parameters": {
              "type": "object",
              "properties": {
                "pos": {
                  "type": "array",
                  "description": "Initial position coordinates"
                },
                "size": {
                  "type": "array",
                  "description": "Size of the sprite"
                },
                "args": {
                  "type": "object",
                  "description": "Additional arguments for sprite"
                }
              },
              "required": ["pos", "size", "args"]
            }
          },
          "RandomMissile": {
            "name": "RandomMissile",
            "description": "Missile with trajectory direction chosen randomly.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "RandomNPC": {
            "name": "RandomNPC",
            "description": "A non-player character with random movement",
            "parameters": {
              "type": "object",
              "properties": {
                "speed": {
                  "type": "number",
                  "description": "movement speed of the sprite"
                },
                "is_stochastic": {
                  "type": "boolean",
                  "description": "indicates random behavior"
                }
              },
              "required": ["speed", "is_stochastic"]
            }
          },
          "SpawnPoint": {
            "name": "SpawnPoint",
            "description": "Generates sprites based on cooldown and probability.",
            "parameters": {
              "type": "object",
              "properties": {
                "cooldown": {
                  "type": "number",
                  "description": "Time intervals between spawns."
                },
                "prob": {
                  "type": "number",
                  "description": "Probability of spawning each interval."
                },
                "total": {
                  "type": "number",
                  "description": "Maximum number of spawns allowed."
                },
                "stype": {
                  "type": "string",
                  "description": "Type of the sprite to spawn."
                },
                "color": {
                  "type": "string",
                  "description": "Color of the spawn point."
                }
              },
              "required": ["cooldown", "stype"]
            }
          },
          "SpriteProducer": {
            "name": "SpriteProducer",
            "description": "Produces sprites based on defined parameters.",
            "parameters": {
              "type": "object",
              "properties": {
                "spriteType": {
                  "type": "string",
                  "description": "Type of sprite to produce"
                },
                "frequency": {
                  "type": "number",
                  "description": "Frequency of sprite production"
                },
                "limit": {
                  "type": "integer",
                  "description": "Maximum number of sprites"
                }
              },
              "required": ["spriteType", "frequency", "limit"]
            }
          },
          "Switch": {
            "name": "Switch",
            "description": "Orientable sprite with active states",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "VGDLSprite": {
            "name": "VGDLSprite",
            "description": "A basic VGDL game sprite with various attributes.",
            "parameters": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "name of the sprite"
                },
                "physicstype": {
                  "type": "object",
                  "description": "physics type for this sprite"
                },
                "speed": {
                  "type": "number",
                  "description": "speed of the sprite"
                },
                "cooldown": {
                  "type": "number",
                  "description": "cooldown period for actions"
                },
                "color": {
                  "type": "string",
                  "description": "color of the sprite"
                },
                "image": {
                  "type": "string",
                  "description": "image for the sprite"
                },
                "healthPoints": {
                  "type": "number",
                  "description": "current health points"
                },
                "limitHealthPoints": {
                  "type": "number",
                  "description": "maximum limit for health points"
                },
                "maxHealthPoints": {
                  "type": "number",
                  "description": "max initial health points"
                }
              },
              "required": [
                "key",
                "physicstype",
                "speed",
                "cooldown",
                "color",
                "image",
                "healthPoints",
                "limitHealthPoints",
                "maxHealthPoints"
              ]
            }
          },
          "WalkJumper": {
            "name": "WalkJumper",
            "description": "Moves horizontally and occasionally jumps up",
            "parameters": {
              "type": "object",
              "properties": {
                "prob": {
                  "type": "number",
                  "description": "probability of jumping"
                },
                "strength": {
                  "type": "number",
                  "description": "jumping strength"
                }
              },
              "required": ["prob", "strength"]
            }
          },
          "Walker": {
            "name": "Walker",
            "description": "A missile with specific air steering properties.",
            "parameters": {
              "type": "object",
              "properties": {
                "airsteering": {
                  "type": "boolean",
                  "description": "Enables air steering."
                },
                "is_stochastic": {
                  "type": "boolean",
                  "description": "Enables stochastic movement."
                }
              },
              "required": ["airsteering", "is_stochastic"]
            }
          }
        }
      },
      "position": { "x": 435, "y": -600 },
      "measured": { "width": 321, "height": 756 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSEvalNode",
      "id": "JSEvalNode_1726575185778",
      "data": {
        "label": "",
        "string": "function process({data}) {\n  let simple_description = \"\"\n  for(let key in data){\n    simple_description += `${key}: ${data[key]['description']}\\n\\n`\n  }\n    return simple_description\n}",
        "dict": {
          "data": {
            "Avatar": {
              "name": "Avatar",
              "description": "Game character controlled by player, performs actions.",
              "parameters": {
                "type": "object",
                "properties": {
                  "pos": {
                    "type": "array",
                    "description": "Position of the avatar in grid."
                  },
                  "size": {
                    "type": "array",
                    "description": "Size of the avatar in grid units."
                  },
                  "actions": {
                    "type": "array",
                    "description": "List of possible actions."
                  }
                },
                "required": ["pos", "size"]
              }
            },
            "FlakAvatar": {
              "name": "FlakAvatar",
              "description": "Horizontal avatar that shoots with SPACE key.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": { "type": "string", "description": "avatar's color" }
                },
                "required": ["color"]
              }
            },
            "HorizontalAvatar": {
              "name": "HorizontalAvatar",
              "description": "An avatar that moves horizontally.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "MissileAvatar": {
              "name": "MissileAvatar",
              "description": "Oriented avatar that moves with speed 1.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "MovingAvatar": {
              "name": "MovingAvatar",
              "description": "A controllable avatar that can move in four directions.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the avatar."
                  }
                },
                "required": ["color"]
              }
            },
            "NoisyRotatingFlippingAvatar": {
              "name": "NoisyRotatingFlippingAvatar",
              "description": "Avatar that rotates, flips, and emits noise",
              "parameters": {
                "type": "object",
                "properties": {
                  "noiseLevel": {
                    "type": "number",
                    "description": "Intensity of emitted noise"
                  }
                },
                "required": ["noiseLevel"]
              }
            },
            "OngoingShootAvatar": {
              "name": "OngoingShootAvatar",
              "description": "Avatar that continuously shoots with movement.",
              "parameters": {
                "type": "object",
                "properties": {
                  "param1": {
                    "type": "string",
                    "description": "Parameter details undetermined"
                  }
                },
                "required": []
              }
            },
            "OrientedAvatar": {
              "name": "OrientedAvatar",
              "description": "An avatar with a specific orientation and movement",
              "parameters": {
                "type": "object",
                "properties": {
                  "draw_arrow": {
                    "type": "boolean",
                    "description": "Whether to draw arrow"
                  }
                },
                "required": ["draw_arrow"]
              }
            },
            "RotatingAvatar": {
              "name": "RotatingAvatar",
              "description": "An avatar that rotates and moves.",
              "parameters": {
                "type": "object",
                "properties": {
                  "draw_arrow": {
                    "type": "boolean",
                    "description": "Displays an arrow on avatar."
                  }
                },
                "required": ["draw_arrow"]
              }
            },
            "RotatingFlippingAvatar": {
              "name": "RotatingFlippingAvatar",
              "description": "An avatar that rotates and flips based on input.",
              "parameters": {
                "type": "object",
                "properties": {
                  "noiseLevel": {
                    "type": "number",
                    "description": "Adds random noise to actions."
                  }
                },
                "required": ["noiseLevel"]
              }
            },
            "ShootAvatar": {
              "name": "ShootAvatar",
              "description": "An oriented avatar that can shoot projectiles.",
              "parameters": {
                "type": "object",
                "properties": {
                  "ammo": {
                    "type": "string",
                    "description": "Type of ammo used."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Specified projectile type."
                  }
                },
                "required": ["ammo", "stype"]
              }
            },
            "VerticalAvatar": {
              "name": "VerticalAvatar",
              "description": "Avatar moving vertically, only up and down.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "AStarChaser": {
              "name": "AStarChaser",
              "description": "Chases target using A* algorithm.",
              "parameters": {
                "type": "object",
                "properties": {
                  "fleeing": {
                    "type": "boolean",
                    "description": "If true, moves away from target."
                  }
                },
                "required": []
              }
            },
            "AlternateChaser": {
              "name": "AlternateChaser",
              "description": "Chases or flees based on target assessment.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype1": {
                    "type": "string",
                    "description": "Comma-separated first target types."
                  },
                  "stype2": {
                    "type": "string",
                    "description": "Comma-separated second target types."
                  }
                },
                "required": ["stype1", "stype2"]
              }
            },
            "Bomber": {
              "name": "Bomber",
              "description": "A missile that periodically spawns other sprites.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the bomber."
                  },
                  "is_static": {
                    "type": "boolean",
                    "description": "Whether the bomber is static."
                  },
                  "prob": {
                    "type": "number",
                    "description": "Probability of spawning a sprite."
                  },
                  "cooldown": {
                    "type": "number",
                    "description": "Cooldown period for spawning."
                  },
                  "total": {
                    "type": "number",
                    "description": "Total spawns before self-destruction."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of sprite to spawn."
                  }
                },
                "required": ["stype"]
              }
            },
            "BomberRandomMissile": {
              "name": "BomberRandomMissile",
              "description": "Spawns missiles of random types",
              "parameters": {
                "type": "object",
                "properties": {
                  "stypeMissile": {
                    "type": "string",
                    "description": "Comma-separated missile types"
                  }
                },
                "required": ["stypeMissile"]
              }
            },
            "Chaser": {
              "name": "Chaser",
              "description": "Speeds toward nearest target, occasionally in a random direction.",
              "parameters": {
                "type": "object",
                "properties": {
                  "portal": {
                    "type": "boolean",
                    "description": "indicates portal behavior, default is true"
                  },
                  "stype": {
                    "type": "string",
                    "description": "target sprite type to chase"
                  }
                },
                "required": ["stype"]
              }
            },
            "Conveyer": {
              "name": "Conveyer",
              "description": "Static sprite that moves entities in a direction",
              "parameters": {
                "type": "object",
                "properties": {
                  "strength": {
                    "type": "number",
                    "description": "Force applied to moved entities"
                  },
                  "draw_arrow": {
                    "type": "boolean",
                    "description": "Toggle arrow display on sprite"
                  }
                },
                "required": ["strength", "draw_arrow"]
              }
            },
            "Door": {
              "name": "Door",
              "description": "An immovable door that may act as a portal.",
              "parameters": {
                "type": "object",
                "properties": {
                  "portal": {
                    "type": "boolean",
                    "description": "indicates if door is portal"
                  }
                },
                "required": ["portal"]
              }
            },
            "EOS": {
              "name": "EOS",
              "description": "End of Sprite (EOS)",
              "parameters": {
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "unique identifier of the sprite"
                  }
                },
                "required": ["ID"]
              }
            },
            "EraticMissile": {
              "name": "EraticMissile",
              "description": "A missile with erratic movement based on probability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "Chance to change direction."
                  }
                },
                "required": ["prob"]
              }
            },
            "Fleeing": {
              "name": "Fleeing",
              "description": "Sprite that flees from a certain entity.",
              "parameters": {
                "type": "object",
                "properties": {
                  "portal": {
                    "type": "boolean",
                    "description": "Determines if portals are used."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of entity to flee from."
                  }
                },
                "required": ["portal", "stype"]
              }
            },
            "Flicker": {
              "name": "Flicker",
              "description": "Sprite that disappears after a set time limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the sprite"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Time limit before disappearance"
                  }
                },
                "required": ["limit"]
              }
            },
            "Immovable": {
              "name": "Immovable",
              "description": "A sprite that doesn't move.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "The color of the sprite"
                  },
                  "is_static": {
                    "type": "boolean",
                    "description": "Determines if sprite is static"
                  }
                },
                "required": []
              }
            },
            "Missile": {
              "name": "Missile",
              "description": "A sprite with oriented movement capability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "speed": {
                    "type": "number",
                    "description": "Movement speed of the sprite."
                  }
                },
                "required": ["speed"]
              }
            },
            "OrientedFlicker": {
              "name": "OrientedFlicker",
              "description": "Oriented sprite that flickers and disappears.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "number",
                    "description": "Flicker duration in frames."
                  }
                },
                "required": ["limit"]
              }
            },
            "OrientedSprite": {
              "name": "OrientedSprite",
              "description": "Sprite with specific orientation capability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "orientation": {
                    "type": "string",
                    "description": "Initial direction of the sprite."
                  }
                },
                "required": ["orientation"]
              }
            },
            "Passive": {
              "name": "Passive",
              "description": "Non-interactive VGDL sprite",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "The color of the sprite"
                  }
                },
                "required": ["color"]
              }
            },
            "PathAltChaser": {
              "name": "PathAltChaser",
              "description": "Chases targets along alternate paths",
              "parameters": {
                "type": "object",
                "properties": {
                  "param1": {
                    "type": "string",
                    "description": "potential parameter explanation"
                  },
                  "param2": {
                    "type": "number",
                    "description": "potential parameter explanation"
                  }
                },
                "required": ["param1", "param2"]
              }
            },
            "Portal": {
              "name": "Portal",
              "description": "Static sprite creating other sprites when conditions met.",
              "parameters": {
                "type": "object",
                "properties": {
                  "pos": {
                    "type": "array",
                    "description": "Position of the portal."
                  },
                  "size": {
                    "type": "array",
                    "description": "Size of the portal."
                  },
                  "args": {
                    "type": "object",
                    "description": "Additional arguments for portal behavior."
                  }
                },
                "required": ["pos", "size", "args"]
              }
            },
            "RandomInertial": {
              "name": "RandomInertial",
              "description": "Sprite with random inertial movement",
              "parameters": {
                "type": "object",
                "properties": {
                  "pos": {
                    "type": "array",
                    "description": "Initial position coordinates"
                  },
                  "size": {
                    "type": "array",
                    "description": "Size of the sprite"
                  },
                  "args": {
                    "type": "object",
                    "description": "Additional arguments for sprite"
                  }
                },
                "required": ["pos", "size", "args"]
              }
            },
            "RandomMissile": {
              "name": "RandomMissile",
              "description": "Missile with trajectory direction chosen randomly.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "RandomNPC": {
              "name": "RandomNPC",
              "description": "A non-player character with random movement",
              "parameters": {
                "type": "object",
                "properties": {
                  "speed": {
                    "type": "number",
                    "description": "movement speed of the sprite"
                  },
                  "is_stochastic": {
                    "type": "boolean",
                    "description": "indicates random behavior"
                  }
                },
                "required": ["speed", "is_stochastic"]
              }
            },
            "SpawnPoint": {
              "name": "SpawnPoint",
              "description": "Generates sprites based on cooldown and probability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "cooldown": {
                    "type": "number",
                    "description": "Time intervals between spawns."
                  },
                  "prob": {
                    "type": "number",
                    "description": "Probability of spawning each interval."
                  },
                  "total": {
                    "type": "number",
                    "description": "Maximum number of spawns allowed."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of the sprite to spawn."
                  },
                  "color": {
                    "type": "string",
                    "description": "Color of the spawn point."
                  }
                },
                "required": ["cooldown", "stype"]
              }
            },
            "SpriteProducer": {
              "name": "SpriteProducer",
              "description": "Produces sprites based on defined parameters.",
              "parameters": {
                "type": "object",
                "properties": {
                  "spriteType": {
                    "type": "string",
                    "description": "Type of sprite to produce"
                  },
                  "frequency": {
                    "type": "number",
                    "description": "Frequency of sprite production"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Maximum number of sprites"
                  }
                },
                "required": ["spriteType", "frequency", "limit"]
              }
            },
            "Switch": {
              "name": "Switch",
              "description": "Orientable sprite with active states",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "VGDLSprite": {
              "name": "VGDLSprite",
              "description": "A basic VGDL game sprite with various attributes.",
              "parameters": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "name of the sprite"
                  },
                  "physicstype": {
                    "type": "object",
                    "description": "physics type for this sprite"
                  },
                  "speed": {
                    "type": "number",
                    "description": "speed of the sprite"
                  },
                  "cooldown": {
                    "type": "number",
                    "description": "cooldown period for actions"
                  },
                  "color": {
                    "type": "string",
                    "description": "color of the sprite"
                  },
                  "image": {
                    "type": "string",
                    "description": "image for the sprite"
                  },
                  "healthPoints": {
                    "type": "number",
                    "description": "current health points"
                  },
                  "limitHealthPoints": {
                    "type": "number",
                    "description": "maximum limit for health points"
                  },
                  "maxHealthPoints": {
                    "type": "number",
                    "description": "max initial health points"
                  }
                },
                "required": [
                  "key",
                  "physicstype",
                  "speed",
                  "cooldown",
                  "color",
                  "image",
                  "healthPoints",
                  "limitHealthPoints",
                  "maxHealthPoints"
                ]
              }
            },
            "WalkJumper": {
              "name": "WalkJumper",
              "description": "Moves horizontally and occasionally jumps up",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "probability of jumping"
                  },
                  "strength": {
                    "type": "number",
                    "description": "jumping strength"
                  }
                },
                "required": ["prob", "strength"]
              }
            },
            "Walker": {
              "name": "Walker",
              "description": "A missile with specific air steering properties.",
              "parameters": {
                "type": "object",
                "properties": {
                  "airsteering": {
                    "type": "boolean",
                    "description": "Enables air steering."
                  },
                  "is_stochastic": {
                    "type": "boolean",
                    "description": "Enables stochastic movement."
                  }
                },
                "required": ["airsteering", "is_stochastic"]
              }
            }
          }
        },
        "data": "Avatar: Game character controlled by player, performs actions.\n\nFlakAvatar: Horizontal avatar that shoots with SPACE key.\n\nHorizontalAvatar: An avatar that moves horizontally.\n\nMissileAvatar: Oriented avatar that moves with speed 1.\n\nMovingAvatar: A controllable avatar that can move in four directions.\n\nNoisyRotatingFlippingAvatar: Avatar that rotates, flips, and emits noise\n\nOngoingShootAvatar: Avatar that continuously shoots with movement.\n\nOrientedAvatar: An avatar with a specific orientation and movement\n\nRotatingAvatar: An avatar that rotates and moves.\n\nRotatingFlippingAvatar: An avatar that rotates and flips based on input.\n\nShootAvatar: An oriented avatar that can shoot projectiles.\n\nVerticalAvatar: Avatar moving vertically, only up and down.\n\nAStarChaser: Chases target using A* algorithm.\n\nAlternateChaser: Chases or flees based on target assessment.\n\nBomber: A missile that periodically spawns other sprites.\n\nBomberRandomMissile: Spawns missiles of random types\n\nChaser: Speeds toward nearest target, occasionally in a random direction.\n\nConveyer: Static sprite that moves entities in a direction\n\nDoor: An immovable door that may act as a portal.\n\nEOS: End of Sprite (EOS)\n\nEraticMissile: A missile with erratic movement based on probability.\n\nFleeing: Sprite that flees from a certain entity.\n\nFlicker: Sprite that disappears after a set time limit.\n\nImmovable: A sprite that doesn't move.\n\nMissile: A sprite with oriented movement capability.\n\nOrientedFlicker: Oriented sprite that flickers and disappears.\n\nOrientedSprite: Sprite with specific orientation capability.\n\nPassive: Non-interactive VGDL sprite\n\nPathAltChaser: Chases targets along alternate paths\n\nPortal: Static sprite creating other sprites when conditions met.\n\nRandomInertial: Sprite with random inertial movement\n\nRandomMissile: Missile with trajectory direction chosen randomly.\n\nRandomNPC: A non-player character with random movement\n\nSpawnPoint: Generates sprites based on cooldown and probability.\n\nSpriteProducer: Produces sprites based on defined parameters.\n\nSwitch: Orientable sprite with active states\n\nVGDLSprite: A basic VGDL game sprite with various attributes.\n\nWalkJumper: Moves horizontally and occasionally jumps up\n\nWalker: A missile with specific air steering properties.\n\n",
        "runflowGenerating": true
      },
      "position": { "x": 1500, "y": 165 },
      "measured": { "width": 597, "height": 307 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSONNode",
      "id": "JSONNode_1726575539243",
      "data": {
        "label": "",
        "data": {
          "addHealthPoints": {
            "name": "addHealthPoints",
            "description": "Increases the sprite's health points.",
            "parameters": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "description": "Amount to add to health points."
                },
                "limitHealthPoints": {
                  "type": "number",
                  "description": "Upper bound for health point increment."
                },
                "maxHealthPoints": {
                  "type": "number",
                  "description": "Maximum health points the sprite can have."
                }
              },
              "required": ["value", "limitHealthPoints", "maxHealthPoints"]
            }
          },
          "addHealthPointsToMax": {
            "name": "addHealthPointsToMax",
            "description": "Increase sprite's health, update max if exceeded limit.",
            "parameters": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "description": "points to add to health"
                }
              },
              "required": ["value"]
            }
          },
          "align": {
            "name": "align",
            "description": "Aligns sprite to partner's location and orientation.",
            "parameters": {
              "type": "object",
              "properties": {
                "orient": {
                  "type": "object",
                  "description": "Optional. Orientation data to align sprite."
                }
              },
              "required": []
            }
          },
          "attractGaze": {
            "name": "attractGaze",
            "description": "Aligns sprite orientation with partner's orientation based on probability",
            "parameters": {
              "type": "object",
              "properties": {
                "prob": {
                  "type": "number",
                  "description": "probability of aligning orientations"
                }
              },
              "required": ["prob"]
            }
          },
          "bounceDirection": {
            "name": "bounceDirection",
            "description": "Alters sprite's speed and direction upon collision",
            "parameters": {
              "type": "object",
              "properties": {
                "friction": {
                  "type": "number",
                  "description": "Reduction of speed upon bounce"
                }
              },
              "required": []
            }
          },
          "bounceForward": {
            "name": "bounceForward",
            "description": "Moves sprite forward based on partner's direction and speed.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The sprite to be moved"
                },
                "partner": {
                  "type": "object",
                  "description": "The sprite whose direction and speed are used"
                },
                "game": {
                  "type": "object",
                  "description": "The game instance managing the collision"
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional keyword arguments, usually empty"
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "changeResource": {
            "name": "changeResource",
            "description": "Alters a sprite's resource value.",
            "parameters": {
              "type": "object",
              "properties": {
                "resource": {
                  "type": "string",
                  "description": "The resource to be changed."
                },
                "value": {
                  "type": "number",
                  "description": "Amount to change the resource."
                },
                "killResource": {
                  "type": "boolean",
                  "description": "Whether to kill the partner sprite."
                }
              },
              "required": ["resource"]
            }
          },
          "changeScore": {
            "name": "changeScore",
            "description": "Modifies the score of the game",
            "parameters": {
              "type": "object",
              "properties": {
                "score": {
                  "type": "number",
                  "description": "amount to change the score"
                },
                "value": {
                  "type": "number",
                  "description": "amount to change if score absent"
                }
              },
              "required": ["score", "value"]
            }
          },
          "cloneSprite": {
            "name": "cloneSprite",
            "description": "Creates a clone of the given sprite.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The sprite to clone."
                },
                "partner": {
                  "type": "object",
                  "description": "Partner sprite involved in interaction."
                },
                "game": {
                  "type": "object",
                  "description": "Game context for sprite creation."
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional keyword arguments."
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "collectResource": {
            "name": "collectResource",
            "description": "Collect a resource and update resources of partner.",
            "parameters": {
              "type": "object",
              "properties": {
                "resource_type": {
                  "type": "string",
                  "description": "Type of resource being collected."
                },
                "resource_value": {
                  "type": "number",
                  "description": "Value of the resource being collected."
                },
                "resource_limit": {
                  "type": "number",
                  "description": "Maximum limit of the resource."
                }
              },
              "required": ["resource_type", "resource_value", "resource_limit"]
            }
          },
          "conveySprite": {
            "name": "conveySprite",
            "description": "Moves sprite based on partner's orientation and strength",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "the sprite being moved"
                },
                "partner": {
                  "type": "object",
                  "description": "the partner providing movement direction and strength"
                },
                "game": {
                  "type": "object",
                  "description": "reference to the current game state"
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional arguments as dictionary"
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "getColor": {
            "name": "getColor",
            "description": "Retrieves the color of a sprite.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The sprite whose color is retrieved."
                }
              },
              "required": ["sprite"]
            }
          },
          "killAll": {
            "name": "killAll",
            "description": "Eliminates all sprites of a specific type",
            "parameters": {
              "type": "object",
              "properties": {
                "stype": {
                  "type": "string",
                  "description": "type of sprites to eliminate"
                }
              },
              "required": ["stype"]
            }
          },
          "killBoth": {
            "name": "killBoth",
            "description": "Eliminates both interacting game sprites.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The first interacting sprite."
                },
                "partner": {
                  "type": "object",
                  "description": "The second interacting sprite."
                },
                "game": {
                  "type": "object",
                  "description": "The current game instance."
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional parameters in dictionary."
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "killIfAlive": {
            "name": "killIfAlive",
            "description": "Conditionally kills a sprite if partner isn't being killed.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "any",
                  "description": "The sprite to potentially kill."
                },
                "partner": {
                  "type": "any",
                  "description": "The partnering sprite to check."
                },
                "game": {
                  "type": "object",
                  "description": "The game instance containing state."
                }
              },
              "required": ["sprite", "partner", "game"]
            }
          },
          "killIfFromAbove": {
            "name": "killIfFromAbove",
            "description": "Kills sprite if it falls on partner from above",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The sprite triggering the effect"
                },
                "partner": {
                  "type": "object",
                  "description": "The sprite being collided with"
                },
                "game": {
                  "type": "object",
                  "description": "The current game state"
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional parameters for customization"
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "killIfFrontal": {
            "name": "killIfFrontal",
            "description": "Kills sprite if facing opposite direction to partner",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "the primary sprite"
                },
                "partner": {
                  "type": "object",
                  "description": "the secondary sprite"
                },
                "game": {
                  "type": "object",
                  "description": "the game state object"
                },
                "kwargs": {
                  "type": "object",
                  "description": "additional parameters"
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "killIfHasLess": {
            "name": "killIfHasLess",
            "description": "Kills sprite if its resources are below given limit.",
            "parameters": {
              "type": "object",
              "properties": {
                "resource": {
                  "type": "string",
                  "description": "type of resource to check"
                },
                "limit": {
                  "type": "number",
                  "description": "maximum allowed resource amount"
                }
              },
              "required": ["resource", "limit"]
            }
          },
          "killIfHasMore": {
            "name": "killIfHasMore",
            "description": "Kills sprite if it has more resources than limit",
            "parameters": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": "integer",
                  "description": "Resource limit to check against"
                },
                "resource": {
                  "type": "string",
                  "description": "Specific resource type to evaluate"
                }
              },
              "required": ["limit", "resource"]
            }
          },
          "killIfNotFrontal": {
            "name": "killIfNotFrontal",
            "description": "Kills a sprite if not directly frontal.",
            "parameters": {
              "type": "object",
              "properties": {
                "kwargs": {
                  "type": "object",
                  "description": "additional arguments for the effect"
                }
              },
              "required": ["kwargs"]
            }
          },
          "killIfOtherHasMore": {
            "name": "killIfOtherHasMore",
            "description": "Kills sprite if partner's resource exceeds limit",
            "parameters": {
              "type": "object",
              "properties": {
                "resource": {
                  "type": "string",
                  "description": "Resource type to check"
                },
                "limit": {
                  "type": "number",
                  "description": "Threshold for partner's resource"
                }
              },
              "required": ["resource", "limit"]
            }
          },
          "killIfSlow": {
            "name": "killIfSlow",
            "description": "Kills the sprite if relative speed is below limit.",
            "parameters": {
              "type": "object",
              "properties": {
                "limitspeed": {
                  "type": "number",
                  "description": "The speed threshold"
                }
              },
              "required": ["limitspeed"]
            }
          },
          "killSprite": {
            "name": "killSprite",
            "description": "Adds sprite to the game's kill list.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The sprite to be killed."
                },
                "partner": {
                  "type": "object",
                  "description": "Optional sprite in interaction."
                },
                "game": {
                  "type": "object",
                  "description": "Current game instance."
                }
              },
              "required": ["sprite", "game"]
            }
          },
          "kill_effects": {
            "name": "kill_effects",
            "description": "Defines kill conditions and transformations for sprites.",
            "parameters": {
              "type": "object",
              "properties": {
                "limitspeed": {
                  "type": "number",
                  "description": "Speed threshold for killIfSlow"
                },
                "stype": {
                  "type": "string",
                  "description": "Target sprite type for transformations"
                },
                "forceOrientation": {
                  "type": "boolean",
                  "description": "Force orientation copy during transform"
                },
                "killSecond": {
                  "type": "boolean",
                  "description": "Kill partner sprite optionally"
                },
                "stypeTo": {
                  "type": "string",
                  "description": "New type for transformToAll"
                },
                "resource": {
                  "type": "string",
                  "description": "Resource type for resource-based kills"
                },
                "limit": {
                  "type": "number",
                  "description": "Resource limit for resource-based kills"
                }
              },
              "required": [
                "limitspeed",
                "stype",
                "forceOrientation",
                "killSecond",
                "stypeTo",
                "resource",
                "limit"
              ]
            }
          },
          "nothing": {
            "name": "nothing",
            "description": "No effect is applied between sprites.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "pullWithIt": {
            "name": "pullWithIt",
            "description": "Pulls sprite with the partner's motion and speed.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "Sprite being pulled."
                },
                "partner": {
                  "type": "object",
                  "description": "Sprite that pulls the other."
                },
                "game": {
                  "type": "object",
                  "description": "Current game state."
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional parameters for effect."
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "removeSprite": {
            "name": "removeSprite",
            "description": "Removes a sprite from the game.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "string or object",
                  "description": "The main sprite to remove"
                },
                "partner": {
                  "type": "string or object",
                  "description": "The partner sprite to remove"
                },
                "game": {
                  "type": "object",
                  "description": "The game state object"
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional keyword arguments"
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "reverseDirection": {
            "name": "reverseDirection",
            "description": "Reverses the direction of a sprite.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The sprite affected by reverseDirection."
                },
                "partner": {
                  "type": "object",
                  "description": "The partner sprite involved, if any."
                },
                "game": {
                  "type": "object",
                  "description": "Current game state when effect is applied."
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional parameters for the effect."
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "scoreChange": {
            "name": "scoreChange",
            "description": "Increases game's score by specified value.",
            "parameters": {
              "type": "object",
              "properties": {
                "score": {
                  "type": "integer",
                  "description": "points to add to game score"
                },
                "value": {
                  "type": "integer",
                  "description": "alternative points if score is missing"
                }
              },
              "required": ["score", "value"]
            }
          },
          "setSpeedForAll": {
            "name": "setSpeedForAll",
            "description": "Sets speed for all sprites of a specified type.",
            "parameters": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "description": "Speed value to be set."
                },
                "stype": {
                  "type": "string",
                  "description": "Type of sprites to change."
                }
              },
              "required": ["stype"]
            }
          },
          "shieldFrom": {
            "name": "shieldFrom",
            "description": "Provides a shield to a sprite from a specific type.",
            "parameters": {
              "type": "object",
              "properties": {
                "stype": {
                  "type": "string",
                  "description": "type of the shield"
                },
                "ftype": {
                  "type": "string",
                  "description": "type to shield from"
                }
              },
              "required": ["stype", "ftype"]
            }
          },
          "slipForward": {
            "name": "slipForward",
            "description": "Chance to slide the sprite forward.",
            "parameters": {
              "type": "object",
              "properties": {
                "prob": {
                  "type": "number",
                  "description": "The probability of slipping forward."
                }
              },
              "required": ["prob"]
            }
          },
          "spawn": {
            "name": "spawn",
            "description": "Creates a new sprite at the current location.",
            "parameters": {
              "type": "object",
              "properties": {
                "stype": {
                  "type": "string",
                  "description": "Type of sprite to spawn."
                }
              },
              "required": ["stype"]
            }
          },
          "spawnIfHasLess": {
            "name": "spawnIfHasLess",
            "description": "Spawns a sprite if resource is below a limit.",
            "parameters": {
              "type": "object",
              "properties": {
                "resource": {
                  "type": "string",
                  "description": "Resource to check"
                },
                "stype": {
                  "type": "string",
                  "description": "Sprite type to spawn"
                },
                "limit": {
                  "type": "integer",
                  "description": "Resource amount limit"
                }
              },
              "required": ["resource", "stype"]
            }
          },
          "spawnIfHasMore": {
            "name": "spawnIfHasMore",
            "description": "Spawns a sprite if resource exceeds or equals a limit.",
            "parameters": {
              "type": "object",
              "properties": {
                "resource": {
                  "type": "string",
                  "description": "Resource name to check against."
                },
                "stype": {
                  "type": "string",
                  "description": "Type of sprite to spawn."
                },
                "limit": {
                  "type": "integer",
                  "description": "Minimum resource amount to spawn."
                }
              },
              "required": ["resource", "stype"]
            }
          },
          "stepBack": {
            "name": "stepBack",
            "description": "Move sprite to its last location",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The sprite to move back"
                },
                "partner": {
                  "type": "object",
                  "description": "The sprite's partner"
                },
                "game": {
                  "type": "object",
                  "description": "The current game state"
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional arguments"
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "stochastic_effects": {
            "name": "stochastic_effects",
            "description": "Effects triggered with some probability.",
            "parameters": {
              "type": "object",
              "properties": {
                "prob": {
                  "type": "number",
                  "description": "probability of effect activation"
                }
              },
              "required": ["prob"]
            }
          },
          "subtractHealthPoints": {
            "name": "subtractHealthPoints",
            "description": "Reduces health points of targeted sprites",
            "parameters": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "description": "Health points to subtract"
                },
                "stype": {
                  "type": "string",
                  "description": "Type of sprites to target"
                },
                "limit": {
                  "type": "number",
                  "description": "Minimum health to avoid death"
                }
              },
              "required": ["value"]
            }
          },
          "teleportToExit": {
            "name": "teleportToExit",
            "description": "Instantly moves sprite to a random exit point.",
            "parameters": {
              "type": "object",
              "properties": {
                "stype": {
                  "type": "string",
                  "description": "type of sprite to teleport to"
                }
              },
              "required": ["stype"]
            }
          },
          "transformTo": {
            "name": "transformTo",
            "description": "Transforms sprite to specified type",
            "parameters": {
              "type": "object",
              "properties": {
                "stype": {
                  "type": "string",
                  "description": "type to transform into"
                },
                "forceOrientation": {
                  "type": "boolean",
                  "description": "retain orientation of the sprite"
                },
                "killSecond": {
                  "type": "boolean",
                  "description": "destroy partner after transformation"
                }
              },
              "required": ["stype"]
            }
          },
          "transformToAll": {
            "name": "transformToAll",
            "description": "Transforms all sprites of specified type.",
            "parameters": {
              "type": "object",
              "properties": {
                "stype": {
                  "type": "string",
                  "description": "Type of sprites to transform."
                },
                "stypeTo": {
                  "type": "string",
                  "description": "Type to transform sprites into."
                }
              },
              "required": ["stype", "stypeTo"]
            }
          },
          "transformToRandomChild": {
            "name": "transformToRandomChild",
            "description": "Transforms sprite to a random child type.",
            "parameters": {
              "type": "object",
              "properties": {
                "stype": {
                  "type": "string",
                  "description": "parent type to get subtypes from"
                }
              },
              "required": ["stype"]
            }
          },
          "turnAround": {
            "name": "turnAround",
            "description": "Reverses the movement direction of a sprite.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The affected sprite"
                },
                "partner": {
                  "type": "object",
                  "description": "Another involved sprite"
                },
                "game": {
                  "type": "object",
                  "description": "The current game instance"
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional optional parameters"
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "undoAll": {
            "name": "undoAll",
            "description": "Reverts all sprites' positions except certain types.",
            "parameters": {
              "type": "object",
              "properties": {
                "nontStype": {
                  "type": "string",
                  "description": "Comma-separated sprite types to exclude"
                }
              },
              "required": ["nontStype"]
            }
          },
          "wallBounce": {
            "name": "wallBounce",
            "description": "Handles sprite's bounce and friction against walls.",
            "parameters": {
              "type": "object",
              "properties": {
                "friction": {
                  "type": "number",
                  "description": "Decreases sprite speed"
                }
              },
              "required": []
            }
          },
          "wallStop": {
            "name": "wallStop",
            "description": "Stops the sprite upon hitting a wall.",
            "parameters": {
              "type": "object",
              "properties": {
                "friction": {
                  "type": "number",
                  "description": "Reduces sprite's orientation by friction."
                }
              },
              "required": ["friction"]
            }
          },
          "windGust": {
            "name": "windGust",
            "description": "Applies a directional push to a sprite.",
            "parameters": {
              "type": "object",
              "properties": {
                "sprite": {
                  "type": "object",
                  "description": "The sprite being affected"
                },
                "partner": {
                  "type": "object",
                  "description": "The sprite causing the wind gust"
                },
                "game": {
                  "type": "object",
                  "description": "The game instance"
                },
                "kwargs": {
                  "type": "object",
                  "description": "Additional arguments"
                }
              },
              "required": ["sprite", "partner", "game", "kwargs"]
            }
          },
          "wrapAround": {
            "name": "wrapAround",
            "description": "Transports sprite to opposite edge when moving out of bounds.",
            "parameters": {
              "type": "object",
              "properties": {
                "offset": {
                  "type": "number",
                  "description": "Offsets the wrapping position."
                }
              },
              "required": []
            }
          }
        }
      },
      "position": { "x": 975, "y": 1755 },
      "measured": { "width": 342, "height": 1239 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSEvalNode",
      "id": "JSEvalNode_1726575565990",
      "data": {
        "label": "",
        "string": "function process({data}) {\n  let simple_description = \"\"\n  for(let key in data){\n    simple_description += `${key}: ${data[key]['description']}\\n\\n`\n  }\n    return simple_description\n}",
        "dict": {
          "data": {
            "addHealthPoints": {
              "name": "addHealthPoints",
              "description": "Increases the sprite's health points.",
              "parameters": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "Amount to add to health points."
                  },
                  "limitHealthPoints": {
                    "type": "number",
                    "description": "Upper bound for health point increment."
                  },
                  "maxHealthPoints": {
                    "type": "number",
                    "description": "Maximum health points the sprite can have."
                  }
                },
                "required": ["value", "limitHealthPoints", "maxHealthPoints"]
              }
            },
            "addHealthPointsToMax": {
              "name": "addHealthPointsToMax",
              "description": "Increase sprite's health, update max if exceeded limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "points to add to health"
                  }
                },
                "required": ["value"]
              }
            },
            "align": {
              "name": "align",
              "description": "Aligns sprite to partner's location and orientation.",
              "parameters": {
                "type": "object",
                "properties": {
                  "orient": {
                    "type": "object",
                    "description": "Optional. Orientation data to align sprite."
                  }
                },
                "required": []
              }
            },
            "attractGaze": {
              "name": "attractGaze",
              "description": "Aligns sprite orientation with partner's orientation based on probability",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "probability of aligning orientations"
                  }
                },
                "required": ["prob"]
              }
            },
            "bounceDirection": {
              "name": "bounceDirection",
              "description": "Alters sprite's speed and direction upon collision",
              "parameters": {
                "type": "object",
                "properties": {
                  "friction": {
                    "type": "number",
                    "description": "Reduction of speed upon bounce"
                  }
                },
                "required": []
              }
            },
            "bounceForward": {
              "name": "bounceForward",
              "description": "Moves sprite forward based on partner's direction and speed.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite to be moved"
                  },
                  "partner": {
                    "type": "object",
                    "description": "The sprite whose direction and speed are used"
                  },
                  "game": {
                    "type": "object",
                    "description": "The game instance managing the collision"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments, usually empty"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "changeResource": {
              "name": "changeResource",
              "description": "Alters a sprite's resource value.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "The resource to be changed."
                  },
                  "value": {
                    "type": "number",
                    "description": "Amount to change the resource."
                  },
                  "killResource": {
                    "type": "boolean",
                    "description": "Whether to kill the partner sprite."
                  }
                },
                "required": ["resource"]
              }
            },
            "changeScore": {
              "name": "changeScore",
              "description": "Modifies the score of the game",
              "parameters": {
                "type": "object",
                "properties": {
                  "score": {
                    "type": "number",
                    "description": "amount to change the score"
                  },
                  "value": {
                    "type": "number",
                    "description": "amount to change if score absent"
                  }
                },
                "required": ["score", "value"]
              }
            },
            "cloneSprite": {
              "name": "cloneSprite",
              "description": "Creates a clone of the given sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite to clone."
                  },
                  "partner": {
                    "type": "object",
                    "description": "Partner sprite involved in interaction."
                  },
                  "game": {
                    "type": "object",
                    "description": "Game context for sprite creation."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments."
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "collectResource": {
              "name": "collectResource",
              "description": "Collect a resource and update resources of partner.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource_type": {
                    "type": "string",
                    "description": "Type of resource being collected."
                  },
                  "resource_value": {
                    "type": "number",
                    "description": "Value of the resource being collected."
                  },
                  "resource_limit": {
                    "type": "number",
                    "description": "Maximum limit of the resource."
                  }
                },
                "required": [
                  "resource_type",
                  "resource_value",
                  "resource_limit"
                ]
              }
            },
            "conveySprite": {
              "name": "conveySprite",
              "description": "Moves sprite based on partner's orientation and strength",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "the sprite being moved"
                  },
                  "partner": {
                    "type": "object",
                    "description": "the partner providing movement direction and strength"
                  },
                  "game": {
                    "type": "object",
                    "description": "reference to the current game state"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional arguments as dictionary"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "getColor": {
              "name": "getColor",
              "description": "Retrieves the color of a sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite whose color is retrieved."
                  }
                },
                "required": ["sprite"]
              }
            },
            "killAll": {
              "name": "killAll",
              "description": "Eliminates all sprites of a specific type",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "type of sprites to eliminate"
                  }
                },
                "required": ["stype"]
              }
            },
            "killBoth": {
              "name": "killBoth",
              "description": "Eliminates both interacting game sprites.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The first interacting sprite."
                  },
                  "partner": {
                    "type": "object",
                    "description": "The second interacting sprite."
                  },
                  "game": {
                    "type": "object",
                    "description": "The current game instance."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional parameters in dictionary."
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "killIfAlive": {
              "name": "killIfAlive",
              "description": "Conditionally kills a sprite if partner isn't being killed.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "any",
                    "description": "The sprite to potentially kill."
                  },
                  "partner": {
                    "type": "any",
                    "description": "The partnering sprite to check."
                  },
                  "game": {
                    "type": "object",
                    "description": "The game instance containing state."
                  }
                },
                "required": ["sprite", "partner", "game"]
              }
            },
            "killIfFromAbove": {
              "name": "killIfFromAbove",
              "description": "Kills sprite if it falls on partner from above",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite triggering the effect"
                  },
                  "partner": {
                    "type": "object",
                    "description": "The sprite being collided with"
                  },
                  "game": {
                    "type": "object",
                    "description": "The current game state"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional parameters for customization"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "killIfFrontal": {
              "name": "killIfFrontal",
              "description": "Kills sprite if facing opposite direction to partner",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "the primary sprite"
                  },
                  "partner": {
                    "type": "object",
                    "description": "the secondary sprite"
                  },
                  "game": {
                    "type": "object",
                    "description": "the game state object"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "additional parameters"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "killIfHasLess": {
              "name": "killIfHasLess",
              "description": "Kills sprite if its resources are below given limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "type of resource to check"
                  },
                  "limit": {
                    "type": "number",
                    "description": "maximum allowed resource amount"
                  }
                },
                "required": ["resource", "limit"]
              }
            },
            "killIfHasMore": {
              "name": "killIfHasMore",
              "description": "Kills sprite if it has more resources than limit",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "description": "Resource limit to check against"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Specific resource type to evaluate"
                  }
                },
                "required": ["limit", "resource"]
              }
            },
            "killIfNotFrontal": {
              "name": "killIfNotFrontal",
              "description": "Kills a sprite if not directly frontal.",
              "parameters": {
                "type": "object",
                "properties": {
                  "kwargs": {
                    "type": "object",
                    "description": "additional arguments for the effect"
                  }
                },
                "required": ["kwargs"]
              }
            },
            "killIfOtherHasMore": {
              "name": "killIfOtherHasMore",
              "description": "Kills sprite if partner's resource exceeds limit",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "Resource type to check"
                  },
                  "limit": {
                    "type": "number",
                    "description": "Threshold for partner's resource"
                  }
                },
                "required": ["resource", "limit"]
              }
            },
            "killIfSlow": {
              "name": "killIfSlow",
              "description": "Kills the sprite if relative speed is below limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limitspeed": {
                    "type": "number",
                    "description": "The speed threshold"
                  }
                },
                "required": ["limitspeed"]
              }
            },
            "killSprite": {
              "name": "killSprite",
              "description": "Adds sprite to the game's kill list.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite to be killed."
                  },
                  "partner": {
                    "type": "object",
                    "description": "Optional sprite in interaction."
                  },
                  "game": {
                    "type": "object",
                    "description": "Current game instance."
                  }
                },
                "required": ["sprite", "game"]
              }
            },
            "kill_effects": {
              "name": "kill_effects",
              "description": "Defines kill conditions and transformations for sprites.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limitspeed": {
                    "type": "number",
                    "description": "Speed threshold for killIfSlow"
                  },
                  "stype": {
                    "type": "string",
                    "description": "Target sprite type for transformations"
                  },
                  "forceOrientation": {
                    "type": "boolean",
                    "description": "Force orientation copy during transform"
                  },
                  "killSecond": {
                    "type": "boolean",
                    "description": "Kill partner sprite optionally"
                  },
                  "stypeTo": {
                    "type": "string",
                    "description": "New type for transformToAll"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Resource type for resource-based kills"
                  },
                  "limit": {
                    "type": "number",
                    "description": "Resource limit for resource-based kills"
                  }
                },
                "required": [
                  "limitspeed",
                  "stype",
                  "forceOrientation",
                  "killSecond",
                  "stypeTo",
                  "resource",
                  "limit"
                ]
              }
            },
            "nothing": {
              "name": "nothing",
              "description": "No effect is applied between sprites.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "pullWithIt": {
              "name": "pullWithIt",
              "description": "Pulls sprite with the partner's motion and speed.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "Sprite being pulled."
                  },
                  "partner": {
                    "type": "object",
                    "description": "Sprite that pulls the other."
                  },
                  "game": {
                    "type": "object",
                    "description": "Current game state."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional parameters for effect."
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "removeSprite": {
              "name": "removeSprite",
              "description": "Removes a sprite from the game.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "string or object",
                    "description": "The main sprite to remove"
                  },
                  "partner": {
                    "type": "string or object",
                    "description": "The partner sprite to remove"
                  },
                  "game": {
                    "type": "object",
                    "description": "The game state object"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "reverseDirection": {
              "name": "reverseDirection",
              "description": "Reverses the direction of a sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite affected by reverseDirection."
                  },
                  "partner": {
                    "type": "object",
                    "description": "The partner sprite involved, if any."
                  },
                  "game": {
                    "type": "object",
                    "description": "Current game state when effect is applied."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional parameters for the effect."
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "scoreChange": {
              "name": "scoreChange",
              "description": "Increases game's score by specified value.",
              "parameters": {
                "type": "object",
                "properties": {
                  "score": {
                    "type": "integer",
                    "description": "points to add to game score"
                  },
                  "value": {
                    "type": "integer",
                    "description": "alternative points if score is missing"
                  }
                },
                "required": ["score", "value"]
              }
            },
            "setSpeedForAll": {
              "name": "setSpeedForAll",
              "description": "Sets speed for all sprites of a specified type.",
              "parameters": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "Speed value to be set."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of sprites to change."
                  }
                },
                "required": ["stype"]
              }
            },
            "shieldFrom": {
              "name": "shieldFrom",
              "description": "Provides a shield to a sprite from a specific type.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "type of the shield"
                  },
                  "ftype": {
                    "type": "string",
                    "description": "type to shield from"
                  }
                },
                "required": ["stype", "ftype"]
              }
            },
            "slipForward": {
              "name": "slipForward",
              "description": "Chance to slide the sprite forward.",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "The probability of slipping forward."
                  }
                },
                "required": ["prob"]
              }
            },
            "spawn": {
              "name": "spawn",
              "description": "Creates a new sprite at the current location.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "Type of sprite to spawn."
                  }
                },
                "required": ["stype"]
              }
            },
            "spawnIfHasLess": {
              "name": "spawnIfHasLess",
              "description": "Spawns a sprite if resource is below a limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "Resource to check"
                  },
                  "stype": {
                    "type": "string",
                    "description": "Sprite type to spawn"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Resource amount limit"
                  }
                },
                "required": ["resource", "stype"]
              }
            },
            "spawnIfHasMore": {
              "name": "spawnIfHasMore",
              "description": "Spawns a sprite if resource exceeds or equals a limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "Resource name to check against."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of sprite to spawn."
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Minimum resource amount to spawn."
                  }
                },
                "required": ["resource", "stype"]
              }
            },
            "stepBack": {
              "name": "stepBack",
              "description": "Move sprite to its last location",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite to move back"
                  },
                  "partner": {
                    "type": "object",
                    "description": "The sprite's partner"
                  },
                  "game": {
                    "type": "object",
                    "description": "The current game state"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional arguments"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "stochastic_effects": {
              "name": "stochastic_effects",
              "description": "Effects triggered with some probability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "probability of effect activation"
                  }
                },
                "required": ["prob"]
              }
            },
            "subtractHealthPoints": {
              "name": "subtractHealthPoints",
              "description": "Reduces health points of targeted sprites",
              "parameters": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "Health points to subtract"
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of sprites to target"
                  },
                  "limit": {
                    "type": "number",
                    "description": "Minimum health to avoid death"
                  }
                },
                "required": ["value"]
              }
            },
            "teleportToExit": {
              "name": "teleportToExit",
              "description": "Instantly moves sprite to a random exit point.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "type of sprite to teleport to"
                  }
                },
                "required": ["stype"]
              }
            },
            "transformTo": {
              "name": "transformTo",
              "description": "Transforms sprite to specified type",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "type to transform into"
                  },
                  "forceOrientation": {
                    "type": "boolean",
                    "description": "retain orientation of the sprite"
                  },
                  "killSecond": {
                    "type": "boolean",
                    "description": "destroy partner after transformation"
                  }
                },
                "required": ["stype"]
              }
            },
            "transformToAll": {
              "name": "transformToAll",
              "description": "Transforms all sprites of specified type.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "Type of sprites to transform."
                  },
                  "stypeTo": {
                    "type": "string",
                    "description": "Type to transform sprites into."
                  }
                },
                "required": ["stype", "stypeTo"]
              }
            },
            "transformToRandomChild": {
              "name": "transformToRandomChild",
              "description": "Transforms sprite to a random child type.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "parent type to get subtypes from"
                  }
                },
                "required": ["stype"]
              }
            },
            "turnAround": {
              "name": "turnAround",
              "description": "Reverses the movement direction of a sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The affected sprite"
                  },
                  "partner": {
                    "type": "object",
                    "description": "Another involved sprite"
                  },
                  "game": {
                    "type": "object",
                    "description": "The current game instance"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional optional parameters"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "undoAll": {
              "name": "undoAll",
              "description": "Reverts all sprites' positions except certain types.",
              "parameters": {
                "type": "object",
                "properties": {
                  "nontStype": {
                    "type": "string",
                    "description": "Comma-separated sprite types to exclude"
                  }
                },
                "required": ["nontStype"]
              }
            },
            "wallBounce": {
              "name": "wallBounce",
              "description": "Handles sprite's bounce and friction against walls.",
              "parameters": {
                "type": "object",
                "properties": {
                  "friction": {
                    "type": "number",
                    "description": "Decreases sprite speed"
                  }
                },
                "required": []
              }
            },
            "wallStop": {
              "name": "wallStop",
              "description": "Stops the sprite upon hitting a wall.",
              "parameters": {
                "type": "object",
                "properties": {
                  "friction": {
                    "type": "number",
                    "description": "Reduces sprite's orientation by friction."
                  }
                },
                "required": ["friction"]
              }
            },
            "windGust": {
              "name": "windGust",
              "description": "Applies a directional push to a sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite being affected"
                  },
                  "partner": {
                    "type": "object",
                    "description": "The sprite causing the wind gust"
                  },
                  "game": {
                    "type": "object",
                    "description": "The game instance"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional arguments"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "wrapAround": {
              "name": "wrapAround",
              "description": "Transports sprite to opposite edge when moving out of bounds.",
              "parameters": {
                "type": "object",
                "properties": {
                  "offset": {
                    "type": "number",
                    "description": "Offsets the wrapping position."
                  }
                },
                "required": []
              }
            }
          }
        },
        "data": "addHealthPoints: Increases the sprite's health points.\n\naddHealthPointsToMax: Increase sprite's health, update max if exceeded limit.\n\nalign: Aligns sprite to partner's location and orientation.\n\nattractGaze: Aligns sprite orientation with partner's orientation based on probability\n\nbounceDirection: Alters sprite's speed and direction upon collision\n\nbounceForward: Moves sprite forward based on partner's direction and speed.\n\nchangeResource: Alters a sprite's resource value.\n\nchangeScore: Modifies the score of the game\n\ncloneSprite: Creates a clone of the given sprite.\n\ncollectResource: Collect a resource and update resources of partner.\n\nconveySprite: Moves sprite based on partner's orientation and strength\n\ngetColor: Retrieves the color of a sprite.\n\nkillAll: Eliminates all sprites of a specific type\n\nkillBoth: Eliminates both interacting game sprites.\n\nkillIfAlive: Conditionally kills a sprite if partner isn't being killed.\n\nkillIfFromAbove: Kills sprite if it falls on partner from above\n\nkillIfFrontal: Kills sprite if facing opposite direction to partner\n\nkillIfHasLess: Kills sprite if its resources are below given limit.\n\nkillIfHasMore: Kills sprite if it has more resources than limit\n\nkillIfNotFrontal: Kills a sprite if not directly frontal.\n\nkillIfOtherHasMore: Kills sprite if partner's resource exceeds limit\n\nkillIfSlow: Kills the sprite if relative speed is below limit.\n\nkillSprite: Adds sprite to the game's kill list.\n\nkill_effects: Defines kill conditions and transformations for sprites.\n\nnothing: No effect is applied between sprites.\n\npullWithIt: Pulls sprite with the partner's motion and speed.\n\nremoveSprite: Removes a sprite from the game.\n\nreverseDirection: Reverses the direction of a sprite.\n\nscoreChange: Increases game's score by specified value.\n\nsetSpeedForAll: Sets speed for all sprites of a specified type.\n\nshieldFrom: Provides a shield to a sprite from a specific type.\n\nslipForward: Chance to slide the sprite forward.\n\nspawn: Creates a new sprite at the current location.\n\nspawnIfHasLess: Spawns a sprite if resource is below a limit.\n\nspawnIfHasMore: Spawns a sprite if resource exceeds or equals a limit.\n\nstepBack: Move sprite to its last location\n\nstochastic_effects: Effects triggered with some probability.\n\nsubtractHealthPoints: Reduces health points of targeted sprites\n\nteleportToExit: Instantly moves sprite to a random exit point.\n\ntransformTo: Transforms sprite to specified type\n\ntransformToAll: Transforms all sprites of specified type.\n\ntransformToRandomChild: Transforms sprite to a random child type.\n\nturnAround: Reverses the movement direction of a sprite.\n\nundoAll: Reverts all sprites' positions except certain types.\n\nwallBounce: Handles sprite's bounce and friction against walls.\n\nwallStop: Stops the sprite upon hitting a wall.\n\nwindGust: Applies a directional push to a sprite.\n\nwrapAround: Transports sprite to opposite edge when moving out of bounds.\n\n",
        "runflowGenerating": true
      },
      "position": { "x": 1515, "y": 1800 },
      "measured": { "width": 597, "height": 307 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSONNode",
      "id": "JSONNode_1726575918434",
      "data": {
        "label": "",
        "data": {
          "MultiSpriteCounter": {
            "name": "MultiSpriteCounter",
            "description": "Terminates when specific sprite count matches the limit.",
            "parameters": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": "integer",
                  "description": "Target sprite count."
                },
                "win": {
                  "type": "boolean",
                  "description": "Determine win or lose."
                },
                "bonus": {
                  "type": "integer",
                  "description": "Bonus score awarded."
                },
                "stypeN": {
                  "type": "string",
                  "description": "Sprite types to count."
                }
              },
              "required": ["limit", "win"]
            }
          },
          "SpriteCounter": {
            "name": "SpriteCounter",
            "description": "Ends game based on sprite count and limit.",
            "parameters": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": "integer",
                  "description": "maximum sprite count allowed."
                },
                "stype": {
                  "type": "string",
                  "description": "type of sprite to count."
                },
                "win": {
                  "type": "boolean",
                  "description": "true if reaching limit wins."
                },
                "bonus": {
                  "type": "integer",
                  "description": "additional score if limit is met."
                }
              },
              "required": ["limit", "stype", "win"]
            }
          },
          "Termination": {
            "name": "Termination",
            "description": "Default termination condition; always returns false.",
            "parameters": { "type": "object", "properties": {}, "required": [] }
          },
          "Timeout": {
            "name": "Timeout",
            "description": "Terminates game when time limit is reached.",
            "parameters": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": "number",
                  "description": "Time limit for the game."
                },
                "win": {
                  "type": "boolean",
                  "description": "Indicates if the player wins."
                },
                "bonus": {
                  "type": "number",
                  "description": "Bonus points granted on timeout."
                }
              },
              "required": ["limit", "win"]
            }
          }
        }
      },
      "position": { "x": 2280, "y": -240 },
      "measured": { "width": 290, "height": 226 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSEvalNode",
      "id": "JSEvalNode_1726575929458",
      "data": {
        "label": "",
        "string": "function process({data}) {\n  let simple_description = \"\"\n  for(let key in data){\n    simple_description += `${key}: ${data[key]['description']}\\n\\n`\n  }\n    return simple_description\n}",
        "dict": {
          "data": {
            "MultiSpriteCounter": {
              "name": "MultiSpriteCounter",
              "description": "Terminates when specific sprite count matches the limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "description": "Target sprite count."
                  },
                  "win": {
                    "type": "boolean",
                    "description": "Determine win or lose."
                  },
                  "bonus": {
                    "type": "integer",
                    "description": "Bonus score awarded."
                  },
                  "stypeN": {
                    "type": "string",
                    "description": "Sprite types to count."
                  }
                },
                "required": ["limit", "win"]
              }
            },
            "SpriteCounter": {
              "name": "SpriteCounter",
              "description": "Ends game based on sprite count and limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "description": "maximum sprite count allowed."
                  },
                  "stype": {
                    "type": "string",
                    "description": "type of sprite to count."
                  },
                  "win": {
                    "type": "boolean",
                    "description": "true if reaching limit wins."
                  },
                  "bonus": {
                    "type": "integer",
                    "description": "additional score if limit is met."
                  }
                },
                "required": ["limit", "stype", "win"]
              }
            },
            "Termination": {
              "name": "Termination",
              "description": "Default termination condition; always returns false.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "Timeout": {
              "name": "Timeout",
              "description": "Terminates game when time limit is reached.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "number",
                    "description": "Time limit for the game."
                  },
                  "win": {
                    "type": "boolean",
                    "description": "Indicates if the player wins."
                  },
                  "bonus": {
                    "type": "number",
                    "description": "Bonus points granted on timeout."
                  }
                },
                "required": ["limit", "win"]
              }
            }
          }
        },
        "data": "MultiSpriteCounter: Terminates when specific sprite count matches the limit.\n\nSpriteCounter: Ends game based on sprite count and limit.\n\nTermination: Default termination condition; always returns false.\n\nTimeout: Terminates game when time limit is reached.\n\n",
        "runflowGenerating": true
      },
      "position": { "x": 2700, "y": -225 },
      "measured": { "width": 597, "height": 307 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1726575988051",
      "data": {
        "label": "",
        "prompt": "Here is your task I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact.\n\nHere is the game description:\n\nCertainly! Sokoban is a classic puzzle game where the player pushes boxes around a warehouse, trying to get them to designated storage locations. Here's a breakdown of the game elements and interactions for Sokoban:\n\n**Game Elements**:\n- **Player (Sokoban)**: The character controlled by the player, whose objective is to push boxes onto target locations.\n- **Box**: Movable objects that the player must push to specific target locations.\n- **Wall**: Obstacle elements that block both the player and boxes; neither can move through or occupy these spaces.\n- **Floor Space**: The traversable area where the player can move and where boxes can be pushed around.\n- **Target Space**: Specific locations marked on the floor where boxes need to be placed to win the game.\n\n**Game Interactions**:\n- **Player, Floor Space**: The player can move freely across floor spaces without restriction.\n- **Player, Wall**: The player cannot pass through walls; they act as barriers.\n- **Player, Box**: The player can push (but not pull) a box if there is an empty floor space or a target space on the opposite side of the box.\n- **Box, Wall**: A box cannot be moved into a space occupied by a wall.\n- **Box, Floor Space**: Boxes can be pushed onto empty floor spaces by the player.\n- **Box, Target Space**: When a box is pushed onto a target space, it is considered \"in place\" if all target spaces have boxes on them at the same time.\n- **Player, Target Space**: The player can move onto target spaces without any special effect.\n- **Box, Box**: A box cannot be pushed into another box.\n\nThese fundamental elements and interactions form the basis of a typical Sokoban game, challenging the player to figure out how to move boxes efficiently to their target destinations.\n\nPlease tell me when the game will terminate.\nThen, find the proper game termination types from the termination_description . \nHere is the simple description of the game termination types: \nMultiSpriteCounter: Terminates when specific sprite count matches the limit.\n\nSpriteCounter: Ends game based on sprite count and limit.\n\nTermination: Default termination condition; always returns false.\n\nTimeout: Terminates game when time limit is reached.\n\n\n\nPlease respond using the following format:\n## Explanation:\nWhen will the game terminate?\n## Game Termination:\n- xxx(termination type): when xxx\n- xxx(termination type): when xxx and xxx",
        "data": "**Game Elements**:\n- Player: The character controlled by the player, usually represented as a movable sprite.\n- Box: Movable objects that the player character pushes to solve puzzles.\n- Goal: Target locations where boxes must be pushed onto to complete the level.\n- Wall: Static obstacles that limit the movement of the player and boxes.\n- Floor: Free space where the player and boxes can move.\n\n**Game Interactions**:\n- Player, Box: The player pushes the box in the direction they are moving, provided the space beyond the box is free.\n- Player, Goal: The player can move over a goal, but does not interact with it directly.\n- Player, Wall: The player cannot move through or push walls.\n- Box, Wall: Boxes cannot move through walls.\n- Box, Goal: Boxes must be pushed onto goals to fulfill the level’s objective.\n\n## Explanation:\nThe game will terminate when all boxes have been successfully pushed onto all goal tiles.\n\n## Game Termination:\n- MultiSpriteCounter: when the number of boxes on goal tiles matches the total number of boxes in the level.",
        "runflowGenerating": false
      },
      "position": { "x": 3930, "y": 0 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1726575993216",
      "data": {
        "label": "",
        "data": "Here is your task I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact.\n\nHere is the game description:\n\nCertainly! Sokoban is a classic puzzle game where the player pushes boxes around a warehouse, trying to get them to designated storage locations. Here's a breakdown of the game elements and interactions for Sokoban:\n\n**Game Elements**:\n- **Player (Sokoban)**: The character controlled by the player, whose objective is to push boxes onto target locations.\n- **Box**: Movable objects that the player must push to specific target locations.\n- **Wall**: Obstacle elements that block both the player and boxes; neither can move through or occupy these spaces.\n- **Floor Space**: The traversable area where the player can move and where boxes can be pushed around.\n- **Target Space**: Specific locations marked on the floor where boxes need to be placed to win the game.\n\n**Game Interactions**:\n- **Player, Floor Space**: The player can move freely across floor spaces without restriction.\n- **Player, Wall**: The player cannot pass through walls; they act as barriers.\n- **Player, Box**: The player can push (but not pull) a box if there is an empty floor space or a target space on the opposite side of the box.\n- **Box, Wall**: A box cannot be moved into a space occupied by a wall.\n- **Box, Floor Space**: Boxes can be pushed onto empty floor spaces by the player.\n- **Box, Target Space**: When a box is pushed onto a target space, it is considered \"in place\" if all target spaces have boxes on them at the same time.\n- **Player, Target Space**: The player can move onto target spaces without any special effect.\n- **Box, Box**: A box cannot be pushed into another box.\n\nThese fundamental elements and interactions form the basis of a typical Sokoban game, challenging the player to figure out how to move boxes efficiently to their target destinations.\n\nPlease tell me when the game will terminate.\nThen, find the proper game termination types from the termination_description . \nHere is the simple description of the game termination types: \nMultiSpriteCounter: Terminates when specific sprite count matches the limit.\n\nSpriteCounter: Ends game based on sprite count and limit.\n\nTermination: Default termination condition; always returns false.\n\nTimeout: Terminates game when time limit is reached.\n\n\n\nPlease respond using the following format:\n## Explanation:\nWhen will the game terminate?\n## Game Termination:\n- xxx(termination type): when xxx\n- xxx(termination type): when xxx and xxx",
        "string": "Here is your task {task}.\n\nHere is the game description:\n\n{elements}\n\nPlease tell me when the game will terminate.\nThen, find the proper game termination types from the termination_description . \nHere is the simple description of the game termination types: \n{termination_simple_description}\n\nPlease respond using the following format:\n## Explanation:\nWhen will the game terminate?\n## Game Termination:\n- xxx(termination type): when xxx\n- xxx(termination type): when xxx and xxx",
        "dict": {
          "task": "I want to make sokoban game.\n\nPlease tell me the game elements and the interaction between elements in this game.\n\nPlease respond in the following format:\n\n**Game Elements** :\n- element1: description\n\n**Game Interactions**:\n- elementx, elementy: description how they interact",
          "termination_simple_description": "MultiSpriteCounter: Terminates when specific sprite count matches the limit.\n\nSpriteCounter: Ends game based on sprite count and limit.\n\nTermination: Default termination condition; always returns false.\n\nTimeout: Terminates game when time limit is reached.\n\n",
          "elements": "Certainly! Sokoban is a classic puzzle game where the player pushes boxes around a warehouse, trying to get them to designated storage locations. Here's a breakdown of the game elements and interactions for Sokoban:\n\n**Game Elements**:\n- **Player (Sokoban)**: The character controlled by the player, whose objective is to push boxes onto target locations.\n- **Box**: Movable objects that the player must push to specific target locations.\n- **Wall**: Obstacle elements that block both the player and boxes; neither can move through or occupy these spaces.\n- **Floor Space**: The traversable area where the player can move and where boxes can be pushed around.\n- **Target Space**: Specific locations marked on the floor where boxes need to be placed to win the game.\n\n**Game Interactions**:\n- **Player, Floor Space**: The player can move freely across floor spaces without restriction.\n- **Player, Wall**: The player cannot pass through walls; they act as barriers.\n- **Player, Box**: The player can push (but not pull) a box if there is an empty floor space or a target space on the opposite side of the box.\n- **Box, Wall**: A box cannot be moved into a space occupied by a wall.\n- **Box, Floor Space**: Boxes can be pushed onto empty floor spaces by the player.\n- **Box, Target Space**: When a box is pushed onto a target space, it is considered \"in place\" if all target spaces have boxes on them at the same time.\n- **Player, Target Space**: The player can move onto target spaces without any special effect.\n- **Box, Box**: A box cannot be pushed into another box.\n\nThese fundamental elements and interactions form the basis of a typical Sokoban game, challenging the player to figure out how to move boxes efficiently to their target destinations."
        }
      },
      "position": { "x": 3465, "y": -225 },
      "measured": { "width": 308, "height": 321 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1726798985895",
      "data": {
        "label": "",
        "prompt": "Please extract the \n game element and game element type using following format:\n\n## Game Elements:\n- **element1**: element type\n- **element2**: element type\n\nOriginal Text:\n## Explanation:\nIn Sokoban, the game involves navigating a player-controlled character to push boxes onto designated storage locations while avoiding walls. The player can move boxes but cannot pull them, making strategy an essential part of solving puzzles.\n\n1. **Player**: \n   - **Game Element Type**: MovingAvatar\n   - **Reason**: The player in Sokoban is controlled by the user and needs to be able to move in four directions (up, down, left, right) across the game board. The MovingAvatar type is well-suited for this role as it describes a character that can be controlled to move in these directions.\n\n2. **Box/Crate**: \n   - **Game Element Type**: Immovable (Initially)\n   - **Reason**: Boxes in Sokoban are primarily static unless interacted with by the player. While they can be moved, they do not move on their own, making them effectively “immovable” unless pushed by the player.\n\n3. **Storage Location/Goal**: \n   - **Game Element Type**: Passive\n   - **Reason**: Goals do not actively interact or move; they serve as designated target points for the boxes. Therefore, the passive type represents them well as entities that are part of the environment rather than interactive elements.\n\n4. **Walls**: \n   - **Game Element Type**: Immovable\n   - **Reason**: Walls are static obstacles within the game space that prevent movement. They cannot be passed through or moved, so they fit the description of an immovable type.\n\n5. **Floor**: \n   - **Game Element Type**: Passive\n   - **Reason**: The floor serves as the traversable area for the player and boxes. It interacts with other elements by providing the space for movement but remains a non-interactive background element, hence it is passive.\n\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive",
        "data": "## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive",
        "runflowGenerating": false
      },
      "position": { "x": 3900, "y": 630 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1726799068801",
      "data": {
        "label": "",
        "data": "Please extract the \n game element and game element type using following format:\n\n## Game Elements:\n- **element1**: element type\n- **element2**: element type\n\nOriginal Text:\n## Explanation:\nIn Sokoban, the game involves navigating a player-controlled character to push boxes onto designated storage locations while avoiding walls. The player can move boxes but cannot pull them, making strategy an essential part of solving puzzles.\n\n1. **Player**: \n   - **Game Element Type**: MovingAvatar\n   - **Reason**: The player in Sokoban is controlled by the user and needs to be able to move in four directions (up, down, left, right) across the game board. The MovingAvatar type is well-suited for this role as it describes a character that can be controlled to move in these directions.\n\n2. **Box/Crate**: \n   - **Game Element Type**: Immovable (Initially)\n   - **Reason**: Boxes in Sokoban are primarily static unless interacted with by the player. While they can be moved, they do not move on their own, making them effectively “immovable” unless pushed by the player.\n\n3. **Storage Location/Goal**: \n   - **Game Element Type**: Passive\n   - **Reason**: Goals do not actively interact or move; they serve as designated target points for the boxes. Therefore, the passive type represents them well as entities that are part of the environment rather than interactive elements.\n\n4. **Walls**: \n   - **Game Element Type**: Immovable\n   - **Reason**: Walls are static obstacles within the game space that prevent movement. They cannot be passed through or moved, so they fit the description of an immovable type.\n\n5. **Floor**: \n   - **Game Element Type**: Passive\n   - **Reason**: The floor serves as the traversable area for the player and boxes. It interacts with other elements by providing the space for movement but remains a non-interactive background element, hence it is passive.\n\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive",
        "string": "Please extract the \n game element and game element type using following format:\n\n## Game Elements:\n- **element1**: element type\n- **element2**: element type\n\nOriginal Text:\n{elements}",
        "dict": {
          "elements": "## Explanation:\nIn Sokoban, the game involves navigating a player-controlled character to push boxes onto designated storage locations while avoiding walls. The player can move boxes but cannot pull them, making strategy an essential part of solving puzzles.\n\n1. **Player**: \n   - **Game Element Type**: MovingAvatar\n   - **Reason**: The player in Sokoban is controlled by the user and needs to be able to move in four directions (up, down, left, right) across the game board. The MovingAvatar type is well-suited for this role as it describes a character that can be controlled to move in these directions.\n\n2. **Box/Crate**: \n   - **Game Element Type**: Immovable (Initially)\n   - **Reason**: Boxes in Sokoban are primarily static unless interacted with by the player. While they can be moved, they do not move on their own, making them effectively “immovable” unless pushed by the player.\n\n3. **Storage Location/Goal**: \n   - **Game Element Type**: Passive\n   - **Reason**: Goals do not actively interact or move; they serve as designated target points for the boxes. Therefore, the passive type represents them well as entities that are part of the environment rather than interactive elements.\n\n4. **Walls**: \n   - **Game Element Type**: Immovable\n   - **Reason**: Walls are static obstacles within the game space that prevent movement. They cannot be passed through or moved, so they fit the description of an immovable type.\n\n5. **Floor**: \n   - **Game Element Type**: Passive\n   - **Reason**: The floor serves as the traversable area for the player and boxes. It interacts with other elements by providing the space for movement but remains a non-interactive background element, hence it is passive.\n\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive"
        }
      },
      "position": { "x": 3480, "y": 540 },
      "measured": { "width": 300, "height": 243 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1726799620119",
      "data": {
        "label": "",
        "data": "Please extract the game elffects using the following format:\n\n## Game Effects:\n- **element1** **element2**: effects type\n- **element3** **element4**: effects type\n\nOriginal Text:\n## Game Elements:\n- Player: Represents the main character that can be moved by the player.\n- Box: Objects that the player can push around within the game environment.\n- Goal: Designated locations where boxes need to be placed to win the level.\n- Wall: Static obstacles that prevent movement.\n- Floor: Open spaces where the player and boxes can move.\n- Exit: An optional game element where the player seeks to transport the boxes or themselves.\n\n## Game Interactions:\n- Player, Box: The player can push a box when directly adjacent to it.\n- Box, Goal: When a box is pushed onto a goal, the goal state is updated.\n- Player, Wall: The player cannot move through walls.\n- Box, Wall: A box cannot be pushed through a wall.\n- Player, Floor: The player can walk on the floor when there is no box or wall blocking the path.\n- Box, Floor: The box can be moved onto the floor if there is no obstruction.\n- Player, Exit: When the player reaches the exit, a level may be completed or additional conditions may apply.\n\n## Explanation:\n### Interaction: Player pushes the Box\n- The interaction is between the Player and Box game elements.\n- The game effect is **conveySprite**.\n- This effect is chosen because it moves the box based on the player's orientation and strength.\n\n### Interaction: Box reaches Goal\n- The interaction is between the Box and Goal game elements.\n- The game effect is **changeResource**.\n- This effect is chosen to signify that a box is correctly placed on a goal, which can alter the game's resource value (e.g., level completion progress).\n\n### Interaction: Player encounters Wall\n- The interaction is between the Player and Wall game elements.\n- The game effect is **wallStop**.\n- This effect is selected to prevent the player from passing through walls, maintaining the integrity of the level design.\n\n### Interaction: Box encounters Wall\n- The interaction is between the Box and Wall game elements.\n- The game effect is **wallStop**.\n- This effect ensures that boxes cannot be pushed through walls, which is critical for maintaining puzzle challenges.\n\n### Interaction: Player reaches Exit\n- The interaction is between the Player and Exit game elements.\n- The game effect could be **teleportToExit** or **changeScore** based on game design goals.\n- **teleportToExit:** This could be used if reaching the exit teleports the player to a new level.\n- **changeScore:** Alternatively, this could increase the score or trigger level completion.\n\n## Game Effects:\n- conveySprite: between Player and Box\n- changeResource: between Box and Goal\n- wallStop: between Player and Wall\n- wallStop: between Box and Wall\n- teleportToExit or changeScore: between Player and Exit",
        "string": "Please extract the game elffects using the following format:\n\n## Game Effects:\n- **element1** **element2**: effects type\n- **element3** **element4**: effects type\n\nOriginal Text:\n{elements}",
        "dict": {
          "elements": "## Game Elements:\n- Player: Represents the main character that can be moved by the player.\n- Box: Objects that the player can push around within the game environment.\n- Goal: Designated locations where boxes need to be placed to win the level.\n- Wall: Static obstacles that prevent movement.\n- Floor: Open spaces where the player and boxes can move.\n- Exit: An optional game element where the player seeks to transport the boxes or themselves.\n\n## Game Interactions:\n- Player, Box: The player can push a box when directly adjacent to it.\n- Box, Goal: When a box is pushed onto a goal, the goal state is updated.\n- Player, Wall: The player cannot move through walls.\n- Box, Wall: A box cannot be pushed through a wall.\n- Player, Floor: The player can walk on the floor when there is no box or wall blocking the path.\n- Box, Floor: The box can be moved onto the floor if there is no obstruction.\n- Player, Exit: When the player reaches the exit, a level may be completed or additional conditions may apply.\n\n## Explanation:\n### Interaction: Player pushes the Box\n- The interaction is between the Player and Box game elements.\n- The game effect is **conveySprite**.\n- This effect is chosen because it moves the box based on the player's orientation and strength.\n\n### Interaction: Box reaches Goal\n- The interaction is between the Box and Goal game elements.\n- The game effect is **changeResource**.\n- This effect is chosen to signify that a box is correctly placed on a goal, which can alter the game's resource value (e.g., level completion progress).\n\n### Interaction: Player encounters Wall\n- The interaction is between the Player and Wall game elements.\n- The game effect is **wallStop**.\n- This effect is selected to prevent the player from passing through walls, maintaining the integrity of the level design.\n\n### Interaction: Box encounters Wall\n- The interaction is between the Box and Wall game elements.\n- The game effect is **wallStop**.\n- This effect ensures that boxes cannot be pushed through walls, which is critical for maintaining puzzle challenges.\n\n### Interaction: Player reaches Exit\n- The interaction is between the Player and Exit game elements.\n- The game effect could be **teleportToExit** or **changeScore** based on game design goals.\n- **teleportToExit:** This could be used if reaching the exit teleports the player to a new level.\n- **changeScore:** Alternatively, this could increase the score or trigger level completion.\n\n## Game Effects:\n- conveySprite: between Player and Box\n- changeResource: between Box and Goal\n- wallStop: between Player and Wall\n- wallStop: between Box and Wall\n- teleportToExit or changeScore: between Player and Exit"
        }
      },
      "position": { "x": 3480, "y": 1110 },
      "measured": { "width": 300, "height": 243 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1726799736409",
      "data": {
        "label": "",
        "prompt": "Please extract the game elffects using the following format:\n\n## Game Effects:\n- **element1** **element2**: effects type\n- **element3** **element4**: effects type\n\nOriginal Text:\n## Game Elements:\n- Player: Represents the main character that can be moved by the player.\n- Box: Objects that the player can push around within the game environment.\n- Goal: Designated locations where boxes need to be placed to win the level.\n- Wall: Static obstacles that prevent movement.\n- Floor: Open spaces where the player and boxes can move.\n- Exit: An optional game element where the player seeks to transport the boxes or themselves.\n\n## Game Interactions:\n- Player, Box: The player can push a box when directly adjacent to it.\n- Box, Goal: When a box is pushed onto a goal, the goal state is updated.\n- Player, Wall: The player cannot move through walls.\n- Box, Wall: A box cannot be pushed through a wall.\n- Player, Floor: The player can walk on the floor when there is no box or wall blocking the path.\n- Box, Floor: The box can be moved onto the floor if there is no obstruction.\n- Player, Exit: When the player reaches the exit, a level may be completed or additional conditions may apply.\n\n## Explanation:\n### Interaction: Player pushes the Box\n- The interaction is between the Player and Box game elements.\n- The game effect is **conveySprite**.\n- This effect is chosen because it moves the box based on the player's orientation and strength.\n\n### Interaction: Box reaches Goal\n- The interaction is between the Box and Goal game elements.\n- The game effect is **changeResource**.\n- This effect is chosen to signify that a box is correctly placed on a goal, which can alter the game's resource value (e.g., level completion progress).\n\n### Interaction: Player encounters Wall\n- The interaction is between the Player and Wall game elements.\n- The game effect is **wallStop**.\n- This effect is selected to prevent the player from passing through walls, maintaining the integrity of the level design.\n\n### Interaction: Box encounters Wall\n- The interaction is between the Box and Wall game elements.\n- The game effect is **wallStop**.\n- This effect ensures that boxes cannot be pushed through walls, which is critical for maintaining puzzle challenges.\n\n### Interaction: Player reaches Exit\n- The interaction is between the Player and Exit game elements.\n- The game effect could be **teleportToExit** or **changeScore** based on game design goals.\n- **teleportToExit:** This could be used if reaching the exit teleports the player to a new level.\n- **changeScore:** Alternatively, this could increase the score or trigger level completion.\n\n## Game Effects:\n- conveySprite: between Player and Box\n- changeResource: between Box and Goal\n- wallStop: between Player and Wall\n- wallStop: between Box and Wall\n- teleportToExit or changeScore: between Player and Exit",
        "data": "## Game Effects:\n- **Player Box**: conveySprite\n- **Player Wall**: wallStop\n- **Player Floor**: nothing\n- **Player Target**: nothing\n- **Box Wall**: wallStop\n- **Box Box**: wallStop\n- **Box Floor**: conveySprite\n- **Box Target**: conveySprite\n- **Game Completion**: changeScore",
        "runflowGenerating": false
      },
      "position": { "x": 3930, "y": 1095 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1726799886550",
      "data": {
        "label": "",
        "data": "Now you are a game designer. You are making a sokoban game.\nYou need to design the game elements, game interactions, game effects and game terminations.\nHere is a basic game structure written in VGDL:\n```\nBasicGame\n    SpriteSet\n        floor > Immovable hidden=True \n        camel > color=BROWN\n            randomCamel > RandomNPC\n            straightCamelFast > Missile\n                fastR > orientation=RIGHT\n                fastL > orientation=LEFT\n            straightCamelMedium > Missile\n                mediumR > orientation=RIGHT\n                mediumL > orientation=LEFT\n            straightCamelSlow > Missile\n                slowR > orientation=RIGHT\n                slowL > orientation=LEFT\n        structure >\n            goal  > Door color=GREEN\n        winnerNPC > Immovable color=RED\n        winnerPlayer > Immovable color=PINK\n        avatar > MovingAvatar frameRate=8\n            left > img=newset/camel5L\n            right > img=newset/camel5\n\n        wall > Immovable\n\n    InteractionSet\n        avatar goal > transformTo stype=winnerPlayer scoreChange=1\n        camel goal  > transformTo stype=winnerNPC scoreChange=-1\n        avatar wall > stepBack\n        camel wall  > stepBack\n\n    LevelMapping\n        g > goal floor\n        r > randomCamel floor\n        h > fastR floor\n        n > mediumR floor\n        t > slowR floor\n        f > fastL floor\n        m > mediumL floor\n        s > slowL floor\n        . > floor\n        A > right floor\n        B > left floor\n\n    TerminationSet\n        MultiSpriteCounter stype1=winnerPlayer limit=1 win=True\n        MultiSpriteCounter stype1=winnerNPC limit=1 win=False\n```\n\nNow you need to modify the game structure to add the game elements, game interactions, game effects and game terminations you designed before.\n\nHere is the game elements you designed:\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive\nHere is the game effects you designed:\n## Game Effects:\n- **Player Box**: conveySprite\n- **Player Wall**: wallStop\n- **Player Floor**: nothing\n- **Player Target**: nothing\n- **Box Wall**: wallStop\n- **Box Box**: wallStop\n- **Box Floor**: conveySprite\n- **Box Target**: conveySprite\n- **Game Completion**: changeScore\nHere is the game terminations you designed:\n**Game Elements**:\n- Player: The character controlled by the player, usually represented as a movable sprite.\n- Box: Movable objects that the player character pushes to solve puzzles.\n- Goal: Target locations where boxes must be pushed onto to complete the level.\n- Wall: Static obstacles that limit the movement of the player and boxes.\n- Floor: Free space where the player and boxes can move.\n\n**Game Interactions**:\n- Player, Box: The player pushes the box in the direction they are moving, provided the space beyond the box is free.\n- Player, Goal: The player can move over a goal, but does not interact with it directly.\n- Player, Wall: The player cannot move through or push walls.\n- Box, Wall: Boxes cannot move through walls.\n- Box, Goal: Boxes must be pushed onto goals to fulfill the level’s objective.\n\n## Explanation:\nThe game will terminate when all boxes have been successfully pushed onto all goal tiles.\n\n## Game Termination:\n- MultiSpriteCounter: when the number of boxes on goal tiles matches the total number of boxes in the level.\n\n\nYou should respond using the following format:\n\n## Explanation:\nHow do you modify the game structure?\n\n## Game Structure:\n```vgdl\nxxx\n```",
        "string": "Now you are a game designer. You are making a sokoban game.\nYou need to design the game elements, game interactions, game effects and game terminations.\nHere is a basic game structure written in VGDL:\n```\nBasicGame\n    SpriteSet\n        floor > Immovable hidden=True \n        camel > color=BROWN\n            randomCamel > RandomNPC\n            straightCamelFast > Missile\n                fastR > orientation=RIGHT\n                fastL > orientation=LEFT\n            straightCamelMedium > Missile\n                mediumR > orientation=RIGHT\n                mediumL > orientation=LEFT\n            straightCamelSlow > Missile\n                slowR > orientation=RIGHT\n                slowL > orientation=LEFT\n        structure >\n            goal  > Door color=GREEN\n        winnerNPC > Immovable color=RED\n        winnerPlayer > Immovable color=PINK\n        avatar > MovingAvatar frameRate=8\n            left > img=newset/camel5L\n            right > img=newset/camel5\n\n        wall > Immovable\n\n    InteractionSet\n        avatar goal > transformTo stype=winnerPlayer scoreChange=1\n        camel goal  > transformTo stype=winnerNPC scoreChange=-1\n        avatar wall > stepBack\n        camel wall  > stepBack\n\n    LevelMapping\n        g > goal floor\n        r > randomCamel floor\n        h > fastR floor\n        n > mediumR floor\n        t > slowR floor\n        f > fastL floor\n        m > mediumL floor\n        s > slowL floor\n        . > floor\n        A > right floor\n        B > left floor\n\n    TerminationSet\n        MultiSpriteCounter stype1=winnerPlayer limit=1 win=True\n        MultiSpriteCounter stype1=winnerNPC limit=1 win=False\n```\n\nNow you need to modify the game structure to add the game elements, game interactions, game effects and game terminations you designed before.\n\nHere is the game elements you designed:\n{chosen_sprite_types}\nHere is the game effects you designed:\n{interaction_final_set}\nHere is the game terminations you designed:\n{termination_final_set}\n\n\nYou should respond using the following format:\n\n## Explanation:\nHow do you modify the game structure?\n\n## Game Structure:\n```vgdl\nxxx\n```",
        "dict": {
          "chosen_sprite_types": "## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive",
          "interaction_final_set": "## Game Effects:\n- **Player Box**: conveySprite\n- **Player Wall**: wallStop\n- **Player Floor**: nothing\n- **Player Target**: nothing\n- **Box Wall**: wallStop\n- **Box Box**: wallStop\n- **Box Floor**: conveySprite\n- **Box Target**: conveySprite\n- **Game Completion**: changeScore",
          "termination_final_set": "**Game Elements**:\n- Player: The character controlled by the player, usually represented as a movable sprite.\n- Box: Movable objects that the player character pushes to solve puzzles.\n- Goal: Target locations where boxes must be pushed onto to complete the level.\n- Wall: Static obstacles that limit the movement of the player and boxes.\n- Floor: Free space where the player and boxes can move.\n\n**Game Interactions**:\n- Player, Box: The player pushes the box in the direction they are moving, provided the space beyond the box is free.\n- Player, Goal: The player can move over a goal, but does not interact with it directly.\n- Player, Wall: The player cannot move through or push walls.\n- Box, Wall: Boxes cannot move through walls.\n- Box, Goal: Boxes must be pushed onto goals to fulfill the level’s objective.\n\n## Explanation:\nThe game will terminate when all boxes have been successfully pushed onto all goal tiles.\n\n## Game Termination:\n- MultiSpriteCounter: when the number of boxes on goal tiles matches the total number of boxes in the level."
        }
      },
      "position": { "x": 4890, "y": 540 },
      "measured": { "width": 300, "height": 321 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1726799961050",
      "data": {
        "label": "",
        "prompt": "Now you are a game designer. You are making a sokoban game.\nYou need to design the game elements, game interactions, game effects and game terminations.\nHere is a basic game structure written in VGDL:\n```\nBasicGame\n    SpriteSet\n        floor > Immovable hidden=True \n        camel > color=BROWN\n            randomCamel > RandomNPC\n            straightCamelFast > Missile\n                fastR > orientation=RIGHT\n                fastL > orientation=LEFT\n            straightCamelMedium > Missile\n                mediumR > orientation=RIGHT\n                mediumL > orientation=LEFT\n            straightCamelSlow > Missile\n                slowR > orientation=RIGHT\n                slowL > orientation=LEFT\n        structure >\n            goal  > Door color=GREEN\n        winnerNPC > Immovable color=RED\n        winnerPlayer > Immovable color=PINK\n        avatar > MovingAvatar frameRate=8\n            left > img=newset/camel5L\n            right > img=newset/camel5\n\n        wall > Immovable\n\n    InteractionSet\n        avatar goal > transformTo stype=winnerPlayer scoreChange=1\n        camel goal  > transformTo stype=winnerNPC scoreChange=-1\n        avatar wall > stepBack\n        camel wall  > stepBack\n\n    LevelMapping\n        g > goal floor\n        r > randomCamel floor\n        h > fastR floor\n        n > mediumR floor\n        t > slowR floor\n        f > fastL floor\n        m > mediumL floor\n        s > slowL floor\n        . > floor\n        A > right floor\n        B > left floor\n\n    TerminationSet\n        MultiSpriteCounter stype1=winnerPlayer limit=1 win=True\n        MultiSpriteCounter stype1=winnerNPC limit=1 win=False\n```\n\nNow you need to modify the game structure to add the game elements, game interactions, game effects and game terminations you designed before.\n\nHere is the game elements you designed:\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive\nHere is the game effects you designed:\n## Game Effects:\n- **Player** **Floor**: conveySprite\n- **Player** **Walls**: wallStop\n- **Player, Box** **Floor**: conveySprite\n- **Box** **Floor**: conveySprite\n- **Box** **Walls**: wallStop\n- **Box** **Box**: wallStop\n- **Box** **Storage Location/Goal**: align and changeScore\n- **Player, Box** **Storage Location**: align and scoreChange\nHere is the game terminations you designed:\n**Game Elements**:\n- Player: The character controlled by the player, usually represented as a movable sprite.\n- Box: Movable objects that the player character pushes to solve puzzles.\n- Goal: Target locations where boxes must be pushed onto to complete the level.\n- Wall: Static obstacles that limit the movement of the player and boxes.\n- Floor: Free space where the player and boxes can move.\n\n**Game Interactions**:\n- Player, Box: The player pushes the box in the direction they are moving, provided the space beyond the box is free.\n- Player, Goal: The player can move over a goal, but does not interact with it directly.\n- Player, Wall: The player cannot move through or push walls.\n- Box, Wall: Boxes cannot move through walls.\n- Box, Goal: Boxes must be pushed onto goals to fulfill the level’s objective.\n\n## Explanation:\nThe game will terminate when all boxes have been successfully pushed onto all goal tiles.\n\n## Game Termination:\n- MultiSpriteCounter: when the number of boxes on goal tiles matches the total number of boxes in the level.\n\n\nYou should respond using the following format:\n\n## Explanation:\nHow do you modify the game structure?\n\n## Game Structure:\n```vgdl\nxxx\n```\nPlease modify the parameter refering the document below:\nElements:\n## MovingAvatar Parameter:\n  color: Color of the avatar.\n## Immovable Parameter:\n  color: The color of the sprite\n  is_static: Determines if sprite is static\n## Passive Parameter:\n  color: The color of the sprite\n\nInteractions:\n## align:\n  orient: Optional. Orientation data to align sprite.\n## changeScore:\n  score: amount to change the score\n  value: amount to change if score absent\n## conveySprite:\n  sprite: the sprite being moved\n  partner: the partner providing movement direction and strength\n  game: reference to the current game state\n  kwargs: Additional arguments as dictionary\n## scoreChange:\n  score: points to add to game score\n  value: alternative points if score is missing\n## wallStop:\n  friction: Reduces sprite's orientation by friction.\n\nTerminations:\n## MultiSpriteCounter:\n  limit: Target sprite count.\n  win: Determine win or lose.\n  bonus: Bonus score awarded.\n  stypeN: Sprite types to count.\n## Timeout:\n  limit: Time limit for the game.\n  win: Indicates if the player wins.\n  bonus: Bonus points granted on timeout.\n",
        "data": "## Explanation:\nTo modify the provided VGDL game structure to integrate the designed game elements, interactions, effects, and terminations, we need to:\n\n1. Adjust the `SpriteSet` to include the new `Box/Crate` element and ensure existing elements reflect the desired properties.\n2. Update the `InteractionSet` to facilitate the new interactions and effects between the `Player`, `Box`, `Goal`, and other elements like `Walls` and `Floor`.\n3. Modify the `TerminationSet` to incorporate the win condition that occurs when all boxes are placed on the goals.\n\n## Game Structure:\n```vgdl\nBasicGame\n    SpriteSet\n        floor > Passive color=WHITE\n        player > MovingAvatar color=BLUE\n        box > Immovable color=ORANGE is_static=False\n        goal > Passive color=GREEN\n        wall > Immovable color=GRAY is_static=True\n\n    InteractionSet\n        player floor > conveySprite sprite=player partner=floor\n        player wall > wallStop friction=1.0\n        player box floor > conveySprite sprite=box partner=player\n        box floor > conveySprite sprite=box partner=floor\n        box wall > wallStop friction=1.0\n        box box > wallStop friction=1.0\n        box goal > align orient=None, changeScore score=1\n        player box goal > align orient=None, scoreChange score=1\n    \n    LevelMapping\n        p > player floor\n        x > box floor\n        g > goal floor\n        w > wall floor\n        . > floor\n    \n    TerminationSet\n        MultiSpriteCounter stype1=box limit=0 win=True\n```\n\n### Notes:\n\n- **SpriteSet**: \n  - Added a `box` element with `color=ORANGE` and `is_static=False` to allow movement. The `floor` and `wall` elements maintain their respective `Passive` and `Immovable` properties.\n  - Updated `player` with `color=BLUE`.\n\n- **InteractionSet**:\n  - Added `conveySprite` interactions to enable smooth movement of the `player` and `box` on `floor` tiles.\n  - Included `wallStop` for interactions that restrict movement against `walls` and other `boxes`.\n  - Implemented `align` to ensure `boxes` properly align and score changes when positioned on `goal` tiles.\n\n- **TerminationSet**:\n  - Defined a `MultiSpriteCounter` that checks when all `boxes` reach `goal` tiles, setting the limit to 0 to trigger game termination with a win condition. Adjust this to match the actual number of goals and crates for dynamic levels.",
        "runflowGenerating": false
      },
      "position": { "x": 7140, "y": 885 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "MarkDownPreview",
      "id": "MarkDownPreview_1726800529269",
      "data": { "label": "" },
      "position": { "x": 8685, "y": 465 },
      "measured": { "width": 564, "height": 748 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSEvalNode",
      "id": "JSEvalNode_1726800661543",
      "data": {
        "label": "",
        "string": "function process({llm_output}) {\n  // return llm_output;\n  const content = llm_output.split(\"```vgdl\")[1].split(\"```\")[0];\n  return \"```vgdl\\n\"+content+\"\\n``\"\n}",
        "dict": {
          "llm_output": "## Explanation:\nTo modify the provided VGDL game structure to integrate the designed game elements, interactions, effects, and terminations, we need to:\n\n1. Adjust the `SpriteSet` to include the new `Box/Crate` element and ensure existing elements reflect the desired properties.\n2. Update the `InteractionSet` to facilitate the new interactions and effects between the `Player`, `Box`, `Goal`, and other elements like `Walls` and `Floor`.\n3. Modify the `TerminationSet` to incorporate the win condition that occurs when all boxes are placed on the goals.\n\n## Game Structure:\n```vgdl\nBasicGame\n    SpriteSet\n        floor > Passive color=WHITE\n        player > MovingAvatar color=BLUE\n        box > Immovable color=ORANGE is_static=False\n        goal > Passive color=GREEN\n        wall > Immovable color=GRAY is_static=True\n\n    InteractionSet\n        player floor > conveySprite sprite=player partner=floor\n        player wall > wallStop friction=1.0\n        player box floor > conveySprite sprite=box partner=player\n        box floor > conveySprite sprite=box partner=floor\n        box wall > wallStop friction=1.0\n        box box > wallStop friction=1.0\n        box goal > align orient=None, changeScore score=1\n        player box goal > align orient=None, scoreChange score=1\n    \n    LevelMapping\n        p > player floor\n        x > box floor\n        g > goal floor\n        w > wall floor\n        . > floor\n    \n    TerminationSet\n        MultiSpriteCounter stype1=box limit=0 win=True\n```\n\n### Notes:\n\n- **SpriteSet**: \n  - Added a `box` element with `color=ORANGE` and `is_static=False` to allow movement. The `floor` and `wall` elements maintain their respective `Passive` and `Immovable` properties.\n  - Updated `player` with `color=BLUE`.\n\n- **InteractionSet**:\n  - Added `conveySprite` interactions to enable smooth movement of the `player` and `box` on `floor` tiles.\n  - Included `wallStop` for interactions that restrict movement against `walls` and other `boxes`.\n  - Implemented `align` to ensure `boxes` properly align and score changes when positioned on `goal` tiles.\n\n- **TerminationSet**:\n  - Defined a `MultiSpriteCounter` that checks when all `boxes` reach `goal` tiles, setting the limit to 0 to trigger game termination with a win condition. Adjust this to match the actual number of goals and crates for dynamic levels."
        },
        "data": "```vgdl\n\nBasicGame\n    SpriteSet\n        floor > Passive color=LIGHTGRAY\n        wall > Immovable color=BLACK is_static=True\n        goal > Passive color=GREEN\n        box > Immovable color=ORANGE is_static=True\n        player > MovingAvatar color=BLUE\n\n    InteractionSet\n        player floor > conveySprite sprite=player partner=floor\n        player wall > wallStop friction=1.0\n        player box floor > conveySprite sprite=box partner=floor\n        box floor > conveySprite sprite=box partner=floor\n        box wall > wallStop friction=1.0\n        box box > wallStop friction=1.0\n        box goal > align orient=None, changeScore score=10\n        player box goal > align orient=None, scoreChange score=5\n\n    LevelMapping\n        P > player floor\n        # > wall floor\n        . > floor\n        B > box floor\n        G > goal floor\n\n    TerminationSet\n        MultiSpriteCounter stype1=box limit=0 win=True\n\n``",
        "runflowGenerating": false
      },
      "position": { "x": 7755, "y": 720 },
      "measured": { "width": 581, "height": 262 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1727231818162",
      "data": {
        "label": "",
        "prompt": "Please extract the types of game elements in an array using following format:\n\n[\n\"element1 type\",\n\"element2 type\"\n]\n\nPlease only output the array and do not output anything else.\n\nElements:\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive",
        "data": "[\n\"MovingAvatar\",\n\"Immovable\",\n\"Passive\",\n\"Immovable\",\n\"Passive\"\n]",
        "runflowGenerating": false
      },
      "position": { "x": 5250, "y": -15 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1727232665067",
      "data": {
        "label": "",
        "data": "Please extract the types of game elements in an array using following format:\n\n[\n\"element1 type\",\n\"element2 type\"\n]\n\nPlease only output the array and do not output anything else.\n\nElements:\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive",
        "string": "Please extract the types of game elements in an array using following format:\n\n[\n\"element1 type\",\n\"element2 type\"\n]\n\nPlease only output the array and do not output anything else.\n\nElements:\n{element}",
        "dict": {
          "element": "## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive"
        }
      },
      "position": { "x": 4650, "y": -30 },
      "measured": { "width": 300, "height": 243 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSEvalNode",
      "id": "JSEvalNode_1727232927566",
      "data": {
        "label": "",
        "string": "function process({types, type_dict}) {\n  const arr = JSON.parse(types)\n  const result = {}\n  for(let key in type_dict){\n    if (arr.includes(key)){\n      result[key] = type_dict[key]\n    }\n  }\n  console.log(result)\n\n  let output_str = \"\"\n\n  for(let key in result){\n    let parameters = result[key][\"parameters\"]\n\n    output_str += `## ${key} Parameter:\\n`\n    for(let property in parameters[\"properties\"]){\n        output_str += `  ${property}: ${parameters[\"properties\"][property][\"description\"]}\\n`\n    }\n  }\n\n  console.log(output_str)\n  \n  return output_str\n}",
        "dict": {
          "types": "[\n\"MovingAvatar\",\n\"Immovable\",\n\"Passive\",\n\"Immovable\",\n\"Passive\"\n]",
          "type_dict": {
            "Avatar": {
              "name": "Avatar",
              "description": "Game character controlled by player, performs actions.",
              "parameters": {
                "type": "object",
                "properties": {
                  "pos": {
                    "type": "array",
                    "description": "Position of the avatar in grid."
                  },
                  "size": {
                    "type": "array",
                    "description": "Size of the avatar in grid units."
                  },
                  "actions": {
                    "type": "array",
                    "description": "List of possible actions."
                  }
                },
                "required": ["pos", "size"]
              }
            },
            "FlakAvatar": {
              "name": "FlakAvatar",
              "description": "Horizontal avatar that shoots with SPACE key.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": { "type": "string", "description": "avatar's color" }
                },
                "required": ["color"]
              }
            },
            "HorizontalAvatar": {
              "name": "HorizontalAvatar",
              "description": "An avatar that moves horizontally.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "MissileAvatar": {
              "name": "MissileAvatar",
              "description": "Oriented avatar that moves with speed 1.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "MovingAvatar": {
              "name": "MovingAvatar",
              "description": "A controllable avatar that can move in four directions.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the avatar."
                  }
                },
                "required": ["color"]
              }
            },
            "NoisyRotatingFlippingAvatar": {
              "name": "NoisyRotatingFlippingAvatar",
              "description": "Avatar that rotates, flips, and emits noise",
              "parameters": {
                "type": "object",
                "properties": {
                  "noiseLevel": {
                    "type": "number",
                    "description": "Intensity of emitted noise"
                  }
                },
                "required": ["noiseLevel"]
              }
            },
            "OngoingShootAvatar": {
              "name": "OngoingShootAvatar",
              "description": "Avatar that continuously shoots with movement.",
              "parameters": {
                "type": "object",
                "properties": {
                  "param1": {
                    "type": "string",
                    "description": "Parameter details undetermined"
                  }
                },
                "required": []
              }
            },
            "OrientedAvatar": {
              "name": "OrientedAvatar",
              "description": "An avatar with a specific orientation and movement",
              "parameters": {
                "type": "object",
                "properties": {
                  "draw_arrow": {
                    "type": "boolean",
                    "description": "Whether to draw arrow"
                  }
                },
                "required": ["draw_arrow"]
              }
            },
            "RotatingAvatar": {
              "name": "RotatingAvatar",
              "description": "An avatar that rotates and moves.",
              "parameters": {
                "type": "object",
                "properties": {
                  "draw_arrow": {
                    "type": "boolean",
                    "description": "Displays an arrow on avatar."
                  }
                },
                "required": ["draw_arrow"]
              }
            },
            "RotatingFlippingAvatar": {
              "name": "RotatingFlippingAvatar",
              "description": "An avatar that rotates and flips based on input.",
              "parameters": {
                "type": "object",
                "properties": {
                  "noiseLevel": {
                    "type": "number",
                    "description": "Adds random noise to actions."
                  }
                },
                "required": ["noiseLevel"]
              }
            },
            "ShootAvatar": {
              "name": "ShootAvatar",
              "description": "An oriented avatar that can shoot projectiles.",
              "parameters": {
                "type": "object",
                "properties": {
                  "ammo": {
                    "type": "string",
                    "description": "Type of ammo used."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Specified projectile type."
                  }
                },
                "required": ["ammo", "stype"]
              }
            },
            "VerticalAvatar": {
              "name": "VerticalAvatar",
              "description": "Avatar moving vertically, only up and down.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "AStarChaser": {
              "name": "AStarChaser",
              "description": "Chases target using A* algorithm.",
              "parameters": {
                "type": "object",
                "properties": {
                  "fleeing": {
                    "type": "boolean",
                    "description": "If true, moves away from target."
                  }
                },
                "required": []
              }
            },
            "AlternateChaser": {
              "name": "AlternateChaser",
              "description": "Chases or flees based on target assessment.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype1": {
                    "type": "string",
                    "description": "Comma-separated first target types."
                  },
                  "stype2": {
                    "type": "string",
                    "description": "Comma-separated second target types."
                  }
                },
                "required": ["stype1", "stype2"]
              }
            },
            "Bomber": {
              "name": "Bomber",
              "description": "A missile that periodically spawns other sprites.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the bomber."
                  },
                  "is_static": {
                    "type": "boolean",
                    "description": "Whether the bomber is static."
                  },
                  "prob": {
                    "type": "number",
                    "description": "Probability of spawning a sprite."
                  },
                  "cooldown": {
                    "type": "number",
                    "description": "Cooldown period for spawning."
                  },
                  "total": {
                    "type": "number",
                    "description": "Total spawns before self-destruction."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of sprite to spawn."
                  }
                },
                "required": ["stype"]
              }
            },
            "BomberRandomMissile": {
              "name": "BomberRandomMissile",
              "description": "Spawns missiles of random types",
              "parameters": {
                "type": "object",
                "properties": {
                  "stypeMissile": {
                    "type": "string",
                    "description": "Comma-separated missile types"
                  }
                },
                "required": ["stypeMissile"]
              }
            },
            "Chaser": {
              "name": "Chaser",
              "description": "Speeds toward nearest target, occasionally in a random direction.",
              "parameters": {
                "type": "object",
                "properties": {
                  "portal": {
                    "type": "boolean",
                    "description": "indicates portal behavior, default is true"
                  },
                  "stype": {
                    "type": "string",
                    "description": "target sprite type to chase"
                  }
                },
                "required": ["stype"]
              }
            },
            "Conveyer": {
              "name": "Conveyer",
              "description": "Static sprite that moves entities in a direction",
              "parameters": {
                "type": "object",
                "properties": {
                  "strength": {
                    "type": "number",
                    "description": "Force applied to moved entities"
                  },
                  "draw_arrow": {
                    "type": "boolean",
                    "description": "Toggle arrow display on sprite"
                  }
                },
                "required": ["strength", "draw_arrow"]
              }
            },
            "Door": {
              "name": "Door",
              "description": "An immovable door that may act as a portal.",
              "parameters": {
                "type": "object",
                "properties": {
                  "portal": {
                    "type": "boolean",
                    "description": "indicates if door is portal"
                  }
                },
                "required": ["portal"]
              }
            },
            "EOS": {
              "name": "EOS",
              "description": "End of Sprite (EOS)",
              "parameters": {
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "unique identifier of the sprite"
                  }
                },
                "required": ["ID"]
              }
            },
            "EraticMissile": {
              "name": "EraticMissile",
              "description": "A missile with erratic movement based on probability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "Chance to change direction."
                  }
                },
                "required": ["prob"]
              }
            },
            "Fleeing": {
              "name": "Fleeing",
              "description": "Sprite that flees from a certain entity.",
              "parameters": {
                "type": "object",
                "properties": {
                  "portal": {
                    "type": "boolean",
                    "description": "Determines if portals are used."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of entity to flee from."
                  }
                },
                "required": ["portal", "stype"]
              }
            },
            "Flicker": {
              "name": "Flicker",
              "description": "Sprite that disappears after a set time limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the sprite"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Time limit before disappearance"
                  }
                },
                "required": ["limit"]
              }
            },
            "Immovable": {
              "name": "Immovable",
              "description": "A sprite that doesn't move.",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "The color of the sprite"
                  },
                  "is_static": {
                    "type": "boolean",
                    "description": "Determines if sprite is static"
                  }
                },
                "required": []
              }
            },
            "Missile": {
              "name": "Missile",
              "description": "A sprite with oriented movement capability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "speed": {
                    "type": "number",
                    "description": "Movement speed of the sprite."
                  }
                },
                "required": ["speed"]
              }
            },
            "OrientedFlicker": {
              "name": "OrientedFlicker",
              "description": "Oriented sprite that flickers and disappears.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "number",
                    "description": "Flicker duration in frames."
                  }
                },
                "required": ["limit"]
              }
            },
            "OrientedSprite": {
              "name": "OrientedSprite",
              "description": "Sprite with specific orientation capability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "orientation": {
                    "type": "string",
                    "description": "Initial direction of the sprite."
                  }
                },
                "required": ["orientation"]
              }
            },
            "Passive": {
              "name": "Passive",
              "description": "Non-interactive VGDL sprite",
              "parameters": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "The color of the sprite"
                  }
                },
                "required": ["color"]
              }
            },
            "PathAltChaser": {
              "name": "PathAltChaser",
              "description": "Chases targets along alternate paths",
              "parameters": {
                "type": "object",
                "properties": {
                  "param1": {
                    "type": "string",
                    "description": "potential parameter explanation"
                  },
                  "param2": {
                    "type": "number",
                    "description": "potential parameter explanation"
                  }
                },
                "required": ["param1", "param2"]
              }
            },
            "Portal": {
              "name": "Portal",
              "description": "Static sprite creating other sprites when conditions met.",
              "parameters": {
                "type": "object",
                "properties": {
                  "pos": {
                    "type": "array",
                    "description": "Position of the portal."
                  },
                  "size": {
                    "type": "array",
                    "description": "Size of the portal."
                  },
                  "args": {
                    "type": "object",
                    "description": "Additional arguments for portal behavior."
                  }
                },
                "required": ["pos", "size", "args"]
              }
            },
            "RandomInertial": {
              "name": "RandomInertial",
              "description": "Sprite with random inertial movement",
              "parameters": {
                "type": "object",
                "properties": {
                  "pos": {
                    "type": "array",
                    "description": "Initial position coordinates"
                  },
                  "size": {
                    "type": "array",
                    "description": "Size of the sprite"
                  },
                  "args": {
                    "type": "object",
                    "description": "Additional arguments for sprite"
                  }
                },
                "required": ["pos", "size", "args"]
              }
            },
            "RandomMissile": {
              "name": "RandomMissile",
              "description": "Missile with trajectory direction chosen randomly.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "RandomNPC": {
              "name": "RandomNPC",
              "description": "A non-player character with random movement",
              "parameters": {
                "type": "object",
                "properties": {
                  "speed": {
                    "type": "number",
                    "description": "movement speed of the sprite"
                  },
                  "is_stochastic": {
                    "type": "boolean",
                    "description": "indicates random behavior"
                  }
                },
                "required": ["speed", "is_stochastic"]
              }
            },
            "SpawnPoint": {
              "name": "SpawnPoint",
              "description": "Generates sprites based on cooldown and probability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "cooldown": {
                    "type": "number",
                    "description": "Time intervals between spawns."
                  },
                  "prob": {
                    "type": "number",
                    "description": "Probability of spawning each interval."
                  },
                  "total": {
                    "type": "number",
                    "description": "Maximum number of spawns allowed."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of the sprite to spawn."
                  },
                  "color": {
                    "type": "string",
                    "description": "Color of the spawn point."
                  }
                },
                "required": ["cooldown", "stype"]
              }
            },
            "SpriteProducer": {
              "name": "SpriteProducer",
              "description": "Produces sprites based on defined parameters.",
              "parameters": {
                "type": "object",
                "properties": {
                  "spriteType": {
                    "type": "string",
                    "description": "Type of sprite to produce"
                  },
                  "frequency": {
                    "type": "number",
                    "description": "Frequency of sprite production"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Maximum number of sprites"
                  }
                },
                "required": ["spriteType", "frequency", "limit"]
              }
            },
            "Switch": {
              "name": "Switch",
              "description": "Orientable sprite with active states",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "VGDLSprite": {
              "name": "VGDLSprite",
              "description": "A basic VGDL game sprite with various attributes.",
              "parameters": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "name of the sprite"
                  },
                  "physicstype": {
                    "type": "object",
                    "description": "physics type for this sprite"
                  },
                  "speed": {
                    "type": "number",
                    "description": "speed of the sprite"
                  },
                  "cooldown": {
                    "type": "number",
                    "description": "cooldown period for actions"
                  },
                  "color": {
                    "type": "string",
                    "description": "color of the sprite"
                  },
                  "image": {
                    "type": "string",
                    "description": "image for the sprite"
                  },
                  "healthPoints": {
                    "type": "number",
                    "description": "current health points"
                  },
                  "limitHealthPoints": {
                    "type": "number",
                    "description": "maximum limit for health points"
                  },
                  "maxHealthPoints": {
                    "type": "number",
                    "description": "max initial health points"
                  }
                },
                "required": [
                  "key",
                  "physicstype",
                  "speed",
                  "cooldown",
                  "color",
                  "image",
                  "healthPoints",
                  "limitHealthPoints",
                  "maxHealthPoints"
                ]
              }
            },
            "WalkJumper": {
              "name": "WalkJumper",
              "description": "Moves horizontally and occasionally jumps up",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "probability of jumping"
                  },
                  "strength": {
                    "type": "number",
                    "description": "jumping strength"
                  }
                },
                "required": ["prob", "strength"]
              }
            },
            "Walker": {
              "name": "Walker",
              "description": "A missile with specific air steering properties.",
              "parameters": {
                "type": "object",
                "properties": {
                  "airsteering": {
                    "type": "boolean",
                    "description": "Enables air steering."
                  },
                  "is_stochastic": {
                    "type": "boolean",
                    "description": "Enables stochastic movement."
                  }
                },
                "required": ["airsteering", "is_stochastic"]
              }
            }
          }
        },
        "data": "",
        "runflowGenerating": false
      },
      "position": { "x": 5790, "y": -60 },
      "measured": { "width": 809, "height": 749 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1727236113033",
      "data": {
        "label": "",
        "prompt": "Please extract the types of game interactions in an array using following format:\n\n[\n\"interaction1\",\n\"interaction2\"\n]\n\nPlease only output the array and do not output anything else.\n\nElements:\n## Game Effects:\n- **Player Box**: conveySprite\n- **Player Wall**: wallStop\n- **Player Floor**: nothing\n- **Player Target**: nothing\n- **Box Wall**: wallStop\n- **Box Box**: wallStop\n- **Box Floor**: conveySprite\n- **Box Target**: conveySprite\n- **Game Completion**: changeScore",
        "data": "[\n\"conveySprite\",\n\"wallStop\",\n\"nothing\",\n\"nothing\",\n\"wallStop\",\n\"nothing\",\n\"nothing\",\n\"nothing\"\n]",
        "runflowGenerating": false
      },
      "position": { "x": 5130, "y": 1125 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1727236116969",
      "data": {
        "label": "",
        "data": "Please extract the types of game interactions in an array using following format:\n\n[\n\"interaction1\",\n\"interaction2\"\n]\n\nPlease only output the array and do not output anything else.\n\nElements:\n## Game Effects:\n- **Player Box**: conveySprite\n- **Player Wall**: wallStop\n- **Player Floor**: nothing\n- **Player Target**: nothing\n- **Box Wall**: wallStop\n- **Box Box**: wallStop\n- **Box Floor**: conveySprite\n- **Box Target**: conveySprite\n- **Game Completion**: changeScore",
        "string": "Please extract the types of game interactions in an array using following format:\n\n[\n\"interaction1\",\n\"interaction2\"\n]\n\nPlease only output the array and do not output anything else.\n\nElements:\n{element}",
        "dict": {
          "element": "## Game Effects:\n- **Player Box**: conveySprite\n- **Player Wall**: wallStop\n- **Player Floor**: nothing\n- **Player Target**: nothing\n- **Box Wall**: wallStop\n- **Box Box**: wallStop\n- **Box Floor**: conveySprite\n- **Box Target**: conveySprite\n- **Game Completion**: changeScore"
        }
      },
      "position": { "x": 4605, "y": 1080 },
      "measured": { "width": 300, "height": 243 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSEvalNode",
      "id": "JSEvalNode_1727236194664",
      "data": {
        "label": "",
        "string": "function process({types, type_dict}) {\n  const arr = JSON.parse(types)\n  const result = {}\n  for(let key in type_dict){\n    if (arr.includes(key)){\n      result[key] = type_dict[key]\n    }\n  }\n  console.log(result)\n\n  let output_str = \"\"\n\n  for(let key in result){\n    let parameters = result[key][\"parameters\"]\n\n    output_str += `## ${key}:\\n`\n    for(let property in parameters[\"properties\"]){\n        output_str += `  ${property}: ${parameters[\"properties\"][property][\"description\"]}\\n`\n    }\n  }\n\n  console.log(output_str)\n  \n  return output_str\n}",
        "dict": {
          "types": "[\n\"conveySprite\",\n\"wallStop\",\n\"nothing\",\n\"nothing\",\n\"wallStop\",\n\"nothing\",\n\"nothing\",\n\"nothing\"\n]",
          "type_dict": {
            "addHealthPoints": {
              "name": "addHealthPoints",
              "description": "Increases the sprite's health points.",
              "parameters": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "Amount to add to health points."
                  },
                  "limitHealthPoints": {
                    "type": "number",
                    "description": "Upper bound for health point increment."
                  },
                  "maxHealthPoints": {
                    "type": "number",
                    "description": "Maximum health points the sprite can have."
                  }
                },
                "required": ["value", "limitHealthPoints", "maxHealthPoints"]
              }
            },
            "addHealthPointsToMax": {
              "name": "addHealthPointsToMax",
              "description": "Increase sprite's health, update max if exceeded limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "points to add to health"
                  }
                },
                "required": ["value"]
              }
            },
            "align": {
              "name": "align",
              "description": "Aligns sprite to partner's location and orientation.",
              "parameters": {
                "type": "object",
                "properties": {
                  "orient": {
                    "type": "object",
                    "description": "Optional. Orientation data to align sprite."
                  }
                },
                "required": []
              }
            },
            "attractGaze": {
              "name": "attractGaze",
              "description": "Aligns sprite orientation with partner's orientation based on probability",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "probability of aligning orientations"
                  }
                },
                "required": ["prob"]
              }
            },
            "bounceDirection": {
              "name": "bounceDirection",
              "description": "Alters sprite's speed and direction upon collision",
              "parameters": {
                "type": "object",
                "properties": {
                  "friction": {
                    "type": "number",
                    "description": "Reduction of speed upon bounce"
                  }
                },
                "required": []
              }
            },
            "bounceForward": {
              "name": "bounceForward",
              "description": "Moves sprite forward based on partner's direction and speed.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite to be moved"
                  },
                  "partner": {
                    "type": "object",
                    "description": "The sprite whose direction and speed are used"
                  },
                  "game": {
                    "type": "object",
                    "description": "The game instance managing the collision"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments, usually empty"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "changeResource": {
              "name": "changeResource",
              "description": "Alters a sprite's resource value.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "The resource to be changed."
                  },
                  "value": {
                    "type": "number",
                    "description": "Amount to change the resource."
                  },
                  "killResource": {
                    "type": "boolean",
                    "description": "Whether to kill the partner sprite."
                  }
                },
                "required": ["resource"]
              }
            },
            "changeScore": {
              "name": "changeScore",
              "description": "Modifies the score of the game",
              "parameters": {
                "type": "object",
                "properties": {
                  "score": {
                    "type": "number",
                    "description": "amount to change the score"
                  },
                  "value": {
                    "type": "number",
                    "description": "amount to change if score absent"
                  }
                },
                "required": ["score", "value"]
              }
            },
            "cloneSprite": {
              "name": "cloneSprite",
              "description": "Creates a clone of the given sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite to clone."
                  },
                  "partner": {
                    "type": "object",
                    "description": "Partner sprite involved in interaction."
                  },
                  "game": {
                    "type": "object",
                    "description": "Game context for sprite creation."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments."
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "collectResource": {
              "name": "collectResource",
              "description": "Collect a resource and update resources of partner.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource_type": {
                    "type": "string",
                    "description": "Type of resource being collected."
                  },
                  "resource_value": {
                    "type": "number",
                    "description": "Value of the resource being collected."
                  },
                  "resource_limit": {
                    "type": "number",
                    "description": "Maximum limit of the resource."
                  }
                },
                "required": [
                  "resource_type",
                  "resource_value",
                  "resource_limit"
                ]
              }
            },
            "conveySprite": {
              "name": "conveySprite",
              "description": "Moves sprite based on partner's orientation and strength",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "the sprite being moved"
                  },
                  "partner": {
                    "type": "object",
                    "description": "the partner providing movement direction and strength"
                  },
                  "game": {
                    "type": "object",
                    "description": "reference to the current game state"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional arguments as dictionary"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "getColor": {
              "name": "getColor",
              "description": "Retrieves the color of a sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite whose color is retrieved."
                  }
                },
                "required": ["sprite"]
              }
            },
            "killAll": {
              "name": "killAll",
              "description": "Eliminates all sprites of a specific type",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "type of sprites to eliminate"
                  }
                },
                "required": ["stype"]
              }
            },
            "killBoth": {
              "name": "killBoth",
              "description": "Eliminates both interacting game sprites.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The first interacting sprite."
                  },
                  "partner": {
                    "type": "object",
                    "description": "The second interacting sprite."
                  },
                  "game": {
                    "type": "object",
                    "description": "The current game instance."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional parameters in dictionary."
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "killIfAlive": {
              "name": "killIfAlive",
              "description": "Conditionally kills a sprite if partner isn't being killed.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "any",
                    "description": "The sprite to potentially kill."
                  },
                  "partner": {
                    "type": "any",
                    "description": "The partnering sprite to check."
                  },
                  "game": {
                    "type": "object",
                    "description": "The game instance containing state."
                  }
                },
                "required": ["sprite", "partner", "game"]
              }
            },
            "killIfFromAbove": {
              "name": "killIfFromAbove",
              "description": "Kills sprite if it falls on partner from above",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite triggering the effect"
                  },
                  "partner": {
                    "type": "object",
                    "description": "The sprite being collided with"
                  },
                  "game": {
                    "type": "object",
                    "description": "The current game state"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional parameters for customization"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "killIfFrontal": {
              "name": "killIfFrontal",
              "description": "Kills sprite if facing opposite direction to partner",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "the primary sprite"
                  },
                  "partner": {
                    "type": "object",
                    "description": "the secondary sprite"
                  },
                  "game": {
                    "type": "object",
                    "description": "the game state object"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "additional parameters"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "killIfHasLess": {
              "name": "killIfHasLess",
              "description": "Kills sprite if its resources are below given limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "type of resource to check"
                  },
                  "limit": {
                    "type": "number",
                    "description": "maximum allowed resource amount"
                  }
                },
                "required": ["resource", "limit"]
              }
            },
            "killIfHasMore": {
              "name": "killIfHasMore",
              "description": "Kills sprite if it has more resources than limit",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "description": "Resource limit to check against"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Specific resource type to evaluate"
                  }
                },
                "required": ["limit", "resource"]
              }
            },
            "killIfNotFrontal": {
              "name": "killIfNotFrontal",
              "description": "Kills a sprite if not directly frontal.",
              "parameters": {
                "type": "object",
                "properties": {
                  "kwargs": {
                    "type": "object",
                    "description": "additional arguments for the effect"
                  }
                },
                "required": ["kwargs"]
              }
            },
            "killIfOtherHasMore": {
              "name": "killIfOtherHasMore",
              "description": "Kills sprite if partner's resource exceeds limit",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "Resource type to check"
                  },
                  "limit": {
                    "type": "number",
                    "description": "Threshold for partner's resource"
                  }
                },
                "required": ["resource", "limit"]
              }
            },
            "killIfSlow": {
              "name": "killIfSlow",
              "description": "Kills the sprite if relative speed is below limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limitspeed": {
                    "type": "number",
                    "description": "The speed threshold"
                  }
                },
                "required": ["limitspeed"]
              }
            },
            "killSprite": {
              "name": "killSprite",
              "description": "Adds sprite to the game's kill list.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite to be killed."
                  },
                  "partner": {
                    "type": "object",
                    "description": "Optional sprite in interaction."
                  },
                  "game": {
                    "type": "object",
                    "description": "Current game instance."
                  }
                },
                "required": ["sprite", "game"]
              }
            },
            "kill_effects": {
              "name": "kill_effects",
              "description": "Defines kill conditions and transformations for sprites.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limitspeed": {
                    "type": "number",
                    "description": "Speed threshold for killIfSlow"
                  },
                  "stype": {
                    "type": "string",
                    "description": "Target sprite type for transformations"
                  },
                  "forceOrientation": {
                    "type": "boolean",
                    "description": "Force orientation copy during transform"
                  },
                  "killSecond": {
                    "type": "boolean",
                    "description": "Kill partner sprite optionally"
                  },
                  "stypeTo": {
                    "type": "string",
                    "description": "New type for transformToAll"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Resource type for resource-based kills"
                  },
                  "limit": {
                    "type": "number",
                    "description": "Resource limit for resource-based kills"
                  }
                },
                "required": [
                  "limitspeed",
                  "stype",
                  "forceOrientation",
                  "killSecond",
                  "stypeTo",
                  "resource",
                  "limit"
                ]
              }
            },
            "nothing": {
              "name": "nothing",
              "description": "No effect is applied between sprites.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "pullWithIt": {
              "name": "pullWithIt",
              "description": "Pulls sprite with the partner's motion and speed.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "Sprite being pulled."
                  },
                  "partner": {
                    "type": "object",
                    "description": "Sprite that pulls the other."
                  },
                  "game": {
                    "type": "object",
                    "description": "Current game state."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional parameters for effect."
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "removeSprite": {
              "name": "removeSprite",
              "description": "Removes a sprite from the game.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "string or object",
                    "description": "The main sprite to remove"
                  },
                  "partner": {
                    "type": "string or object",
                    "description": "The partner sprite to remove"
                  },
                  "game": {
                    "type": "object",
                    "description": "The game state object"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "reverseDirection": {
              "name": "reverseDirection",
              "description": "Reverses the direction of a sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite affected by reverseDirection."
                  },
                  "partner": {
                    "type": "object",
                    "description": "The partner sprite involved, if any."
                  },
                  "game": {
                    "type": "object",
                    "description": "Current game state when effect is applied."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional parameters for the effect."
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "scoreChange": {
              "name": "scoreChange",
              "description": "Increases game's score by specified value.",
              "parameters": {
                "type": "object",
                "properties": {
                  "score": {
                    "type": "integer",
                    "description": "points to add to game score"
                  },
                  "value": {
                    "type": "integer",
                    "description": "alternative points if score is missing"
                  }
                },
                "required": ["score", "value"]
              }
            },
            "setSpeedForAll": {
              "name": "setSpeedForAll",
              "description": "Sets speed for all sprites of a specified type.",
              "parameters": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "Speed value to be set."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of sprites to change."
                  }
                },
                "required": ["stype"]
              }
            },
            "shieldFrom": {
              "name": "shieldFrom",
              "description": "Provides a shield to a sprite from a specific type.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "type of the shield"
                  },
                  "ftype": {
                    "type": "string",
                    "description": "type to shield from"
                  }
                },
                "required": ["stype", "ftype"]
              }
            },
            "slipForward": {
              "name": "slipForward",
              "description": "Chance to slide the sprite forward.",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "The probability of slipping forward."
                  }
                },
                "required": ["prob"]
              }
            },
            "spawn": {
              "name": "spawn",
              "description": "Creates a new sprite at the current location.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "Type of sprite to spawn."
                  }
                },
                "required": ["stype"]
              }
            },
            "spawnIfHasLess": {
              "name": "spawnIfHasLess",
              "description": "Spawns a sprite if resource is below a limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "Resource to check"
                  },
                  "stype": {
                    "type": "string",
                    "description": "Sprite type to spawn"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Resource amount limit"
                  }
                },
                "required": ["resource", "stype"]
              }
            },
            "spawnIfHasMore": {
              "name": "spawnIfHasMore",
              "description": "Spawns a sprite if resource exceeds or equals a limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "string",
                    "description": "Resource name to check against."
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of sprite to spawn."
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Minimum resource amount to spawn."
                  }
                },
                "required": ["resource", "stype"]
              }
            },
            "stepBack": {
              "name": "stepBack",
              "description": "Move sprite to its last location",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite to move back"
                  },
                  "partner": {
                    "type": "object",
                    "description": "The sprite's partner"
                  },
                  "game": {
                    "type": "object",
                    "description": "The current game state"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional arguments"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "stochastic_effects": {
              "name": "stochastic_effects",
              "description": "Effects triggered with some probability.",
              "parameters": {
                "type": "object",
                "properties": {
                  "prob": {
                    "type": "number",
                    "description": "probability of effect activation"
                  }
                },
                "required": ["prob"]
              }
            },
            "subtractHealthPoints": {
              "name": "subtractHealthPoints",
              "description": "Reduces health points of targeted sprites",
              "parameters": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "Health points to subtract"
                  },
                  "stype": {
                    "type": "string",
                    "description": "Type of sprites to target"
                  },
                  "limit": {
                    "type": "number",
                    "description": "Minimum health to avoid death"
                  }
                },
                "required": ["value"]
              }
            },
            "teleportToExit": {
              "name": "teleportToExit",
              "description": "Instantly moves sprite to a random exit point.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "type of sprite to teleport to"
                  }
                },
                "required": ["stype"]
              }
            },
            "transformTo": {
              "name": "transformTo",
              "description": "Transforms sprite to specified type",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "type to transform into"
                  },
                  "forceOrientation": {
                    "type": "boolean",
                    "description": "retain orientation of the sprite"
                  },
                  "killSecond": {
                    "type": "boolean",
                    "description": "destroy partner after transformation"
                  }
                },
                "required": ["stype"]
              }
            },
            "transformToAll": {
              "name": "transformToAll",
              "description": "Transforms all sprites of specified type.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "Type of sprites to transform."
                  },
                  "stypeTo": {
                    "type": "string",
                    "description": "Type to transform sprites into."
                  }
                },
                "required": ["stype", "stypeTo"]
              }
            },
            "transformToRandomChild": {
              "name": "transformToRandomChild",
              "description": "Transforms sprite to a random child type.",
              "parameters": {
                "type": "object",
                "properties": {
                  "stype": {
                    "type": "string",
                    "description": "parent type to get subtypes from"
                  }
                },
                "required": ["stype"]
              }
            },
            "turnAround": {
              "name": "turnAround",
              "description": "Reverses the movement direction of a sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The affected sprite"
                  },
                  "partner": {
                    "type": "object",
                    "description": "Another involved sprite"
                  },
                  "game": {
                    "type": "object",
                    "description": "The current game instance"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional optional parameters"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "undoAll": {
              "name": "undoAll",
              "description": "Reverts all sprites' positions except certain types.",
              "parameters": {
                "type": "object",
                "properties": {
                  "nontStype": {
                    "type": "string",
                    "description": "Comma-separated sprite types to exclude"
                  }
                },
                "required": ["nontStype"]
              }
            },
            "wallBounce": {
              "name": "wallBounce",
              "description": "Handles sprite's bounce and friction against walls.",
              "parameters": {
                "type": "object",
                "properties": {
                  "friction": {
                    "type": "number",
                    "description": "Decreases sprite speed"
                  }
                },
                "required": []
              }
            },
            "wallStop": {
              "name": "wallStop",
              "description": "Stops the sprite upon hitting a wall.",
              "parameters": {
                "type": "object",
                "properties": {
                  "friction": {
                    "type": "number",
                    "description": "Reduces sprite's orientation by friction."
                  }
                },
                "required": ["friction"]
              }
            },
            "windGust": {
              "name": "windGust",
              "description": "Applies a directional push to a sprite.",
              "parameters": {
                "type": "object",
                "properties": {
                  "sprite": {
                    "type": "object",
                    "description": "The sprite being affected"
                  },
                  "partner": {
                    "type": "object",
                    "description": "The sprite causing the wind gust"
                  },
                  "game": {
                    "type": "object",
                    "description": "The game instance"
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional arguments"
                  }
                },
                "required": ["sprite", "partner", "game", "kwargs"]
              }
            },
            "wrapAround": {
              "name": "wrapAround",
              "description": "Transports sprite to opposite edge when moving out of bounds.",
              "parameters": {
                "type": "object",
                "properties": {
                  "offset": {
                    "type": "number",
                    "description": "Offsets the wrapping position."
                  }
                },
                "required": []
              }
            }
          }
        },
        "data": "## conveySprite:\n  sprite: the sprite being moved\n  partner: the partner providing movement direction and strength\n  game: reference to the current game state\n  kwargs: Additional arguments as dictionary\n## wallStop:\n  friction: Reduces sprite's orientation by friction.\n",
        "runflowGenerating": false
      },
      "position": { "x": 5685, "y": 1215 },
      "measured": { "width": 809, "height": 749 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1727236474954",
      "data": {
        "label": "",
        "data": "Please extract the types of game termination conditions in an array using following format:\n\n[\n\"termination1\",\n\"termination2\"\n]\n\nPlease only output the array and do not output anything else.\n\nElements:\n**Game Elements**:\n- Player: The character controlled by the player, usually represented as a movable sprite.\n- Box: Movable objects that the player character pushes to solve puzzles.\n- Goal: Target locations where boxes must be pushed onto to complete the level.\n- Wall: Static obstacles that limit the movement of the player and boxes.\n- Floor: Free space where the player and boxes can move.\n\n**Game Interactions**:\n- Player, Box: The player pushes the box in the direction they are moving, provided the space beyond the box is free.\n- Player, Goal: The player can move over a goal, but does not interact with it directly.\n- Player, Wall: The player cannot move through or push walls.\n- Box, Wall: Boxes cannot move through walls.\n- Box, Goal: Boxes must be pushed onto goals to fulfill the level’s objective.\n\n## Explanation:\nThe game will terminate when all boxes have been successfully pushed onto all goal tiles.\n\n## Game Termination:\n- MultiSpriteCounter: when the number of boxes on goal tiles matches the total number of boxes in the level.",
        "string": "Please extract the types of game termination conditions in an array using following format:\n\n[\n\"termination1\",\n\"termination2\"\n]\n\nPlease only output the array and do not output anything else.\n\nElements:\n{element}",
        "dict": {
          "element": "**Game Elements**:\n- Player: The character controlled by the player, usually represented as a movable sprite.\n- Box: Movable objects that the player character pushes to solve puzzles.\n- Goal: Target locations where boxes must be pushed onto to complete the level.\n- Wall: Static obstacles that limit the movement of the player and boxes.\n- Floor: Free space where the player and boxes can move.\n\n**Game Interactions**:\n- Player, Box: The player pushes the box in the direction they are moving, provided the space beyond the box is free.\n- Player, Goal: The player can move over a goal, but does not interact with it directly.\n- Player, Wall: The player cannot move through or push walls.\n- Box, Wall: Boxes cannot move through walls.\n- Box, Goal: Boxes must be pushed onto goals to fulfill the level’s objective.\n\n## Explanation:\nThe game will terminate when all boxes have been successfully pushed onto all goal tiles.\n\n## Game Termination:\n- MultiSpriteCounter: when the number of boxes on goal tiles matches the total number of boxes in the level."
        }
      },
      "position": { "x": 4590, "y": -555 },
      "measured": { "width": 300, "height": 243 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1727236529221",
      "data": {
        "label": "",
        "prompt": "Please extract the types of game termination conditions in an array using following format:\n\n[\n\"termination1\",\n\"termination2\"\n]\n\nPlease only output the array and do not output anything else.\n\nElements:\n**Game Elements**:\n- Player: The character controlled by the player, usually represented as a movable sprite.\n- Box: Movable objects that the player character pushes to solve puzzles.\n- Goal: Target locations where boxes must be pushed onto to complete the level.\n- Wall: Static obstacles that limit the movement of the player and boxes.\n- Floor: Free space where the player and boxes can move.\n\n**Game Interactions**:\n- Player, Box: The player pushes the box in the direction they are moving, provided the space beyond the box is free.\n- Player, Goal: The player can move over a goal, but does not interact with it directly.\n- Player, Wall: The player cannot move through or push walls.\n- Box, Wall: Boxes cannot move through walls.\n- Box, Goal: Boxes must be pushed onto goals to fulfill the level’s objective.\n\n## Explanation:\nThe game will terminate when all boxes have been successfully pushed onto all goal tiles.\n\n## Game Termination:\n- MultiSpriteCounter: when the number of boxes on goal tiles matches the total number of boxes in the level.",
        "data": "```json\n[\n\"all boxes have been successfully pushed onto all goal tiles\",\n\"when the number of boxes on goal tiles matches the total number of boxes in the level\"\n]\n```",
        "runflowGenerating": false
      },
      "position": { "x": 5220, "y": -585 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "JSEvalNode",
      "id": "JSEvalNode_1727236543149",
      "data": {
        "label": "",
        "string": "function process({types, type_dict}) {\n  const arr = JSON.parse(types)\n  const result = {}\n  for(let key in type_dict){\n    if (arr.includes(key)){\n      result[key] = type_dict[key]\n    }\n  }\n  console.log(result)\n\n  let output_str = \"\"\n\n  for(let key in result){\n    let parameters = result[key][\"parameters\"]\n\n    output_str += `## ${key}:\\n`\n    for(let property in parameters[\"properties\"]){\n        output_str += `  ${property}: ${parameters[\"properties\"][property][\"description\"]}\\n`\n    }\n  }\n\n  console.log(output_str)\n  \n  return output_str\n}",
        "dict": {
          "types": "```json\n[\n\"all boxes have been successfully pushed onto all goal tiles\",\n\"when the number of boxes on goal tiles matches the total number of boxes in the level\"\n]\n```",
          "type_dict": {
            "MultiSpriteCounter": {
              "name": "MultiSpriteCounter",
              "description": "Terminates when specific sprite count matches the limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "description": "Target sprite count."
                  },
                  "win": {
                    "type": "boolean",
                    "description": "Determine win or lose."
                  },
                  "bonus": {
                    "type": "integer",
                    "description": "Bonus score awarded."
                  },
                  "stypeN": {
                    "type": "string",
                    "description": "Sprite types to count."
                  }
                },
                "required": ["limit", "win"]
              }
            },
            "SpriteCounter": {
              "name": "SpriteCounter",
              "description": "Ends game based on sprite count and limit.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "description": "maximum sprite count allowed."
                  },
                  "stype": {
                    "type": "string",
                    "description": "type of sprite to count."
                  },
                  "win": {
                    "type": "boolean",
                    "description": "true if reaching limit wins."
                  },
                  "bonus": {
                    "type": "integer",
                    "description": "additional score if limit is met."
                  }
                },
                "required": ["limit", "stype", "win"]
              }
            },
            "Termination": {
              "name": "Termination",
              "description": "Default termination condition; always returns false.",
              "parameters": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "Timeout": {
              "name": "Timeout",
              "description": "Terminates game when time limit is reached.",
              "parameters": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "number",
                    "description": "Time limit for the game."
                  },
                  "win": {
                    "type": "boolean",
                    "description": "Indicates if the player wins."
                  },
                  "bonus": {
                    "type": "number",
                    "description": "Bonus points granted on timeout."
                  }
                },
                "required": ["limit", "win"]
              }
            }
          }
        },
        "data": "error: Unexpected token '`', \"```json\n[\n\"... is not valid JSON",
        "runflowGenerating": false
      },
      "position": { "x": 5775, "y": -915 },
      "measured": { "width": 809, "height": 749 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1727249536068",
      "data": {
        "label": "",
        "data": "Now you are a game designer. You are making a sokoban game.\nYou need to design the game elements, game interactions, game effects and game terminations.\nHere is a basic game structure written in VGDL:\n```\nBasicGame\n    SpriteSet\n        floor > Immovable hidden=True \n        camel > color=BROWN\n            randomCamel > RandomNPC\n            straightCamelFast > Missile\n                fastR > orientation=RIGHT\n                fastL > orientation=LEFT\n            straightCamelMedium > Missile\n                mediumR > orientation=RIGHT\n                mediumL > orientation=LEFT\n            straightCamelSlow > Missile\n                slowR > orientation=RIGHT\n                slowL > orientation=LEFT\n        structure >\n            goal  > Door color=GREEN\n        winnerNPC > Immovable color=RED\n        winnerPlayer > Immovable color=PINK\n        avatar > MovingAvatar frameRate=8\n            left > img=newset/camel5L\n            right > img=newset/camel5\n\n        wall > Immovable\n\n    InteractionSet\n        avatar goal > transformTo stype=winnerPlayer scoreChange=1\n        camel goal  > transformTo stype=winnerNPC scoreChange=-1\n        avatar wall > stepBack\n        camel wall  > stepBack\n\n    LevelMapping\n        g > goal floor\n        r > randomCamel floor\n        h > fastR floor\n        n > mediumR floor\n        t > slowR floor\n        f > fastL floor\n        m > mediumL floor\n        s > slowL floor\n        . > floor\n        A > right floor\n        B > left floor\n\n    TerminationSet\n        MultiSpriteCounter stype1=winnerPlayer limit=1 win=True\n        MultiSpriteCounter stype1=winnerNPC limit=1 win=False\n```\n\nNow you need to modify the game structure to add the game elements, game interactions, game effects and game terminations you designed before.\n\nHere is the game elements you designed:\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive\nHere is the game effects you designed:\n## Game Effects:\n- **Player Box**: conveySprite\n- **Player Wall**: wallStop\n- **Player Floor**: nothing\n- **Player Target**: nothing\n- **Box Wall**: wallStop\n- **Box Box**: wallStop\n- **Box Floor**: conveySprite\n- **Box Target**: conveySprite\n- **Game Completion**: changeScore\nHere is the game terminations you designed:\n**Game Elements**:\n- Player: The character controlled by the player, usually represented as a movable sprite.\n- Box: Movable objects that the player character pushes to solve puzzles.\n- Goal: Target locations where boxes must be pushed onto to complete the level.\n- Wall: Static obstacles that limit the movement of the player and boxes.\n- Floor: Free space where the player and boxes can move.\n\n**Game Interactions**:\n- Player, Box: The player pushes the box in the direction they are moving, provided the space beyond the box is free.\n- Player, Goal: The player can move over a goal, but does not interact with it directly.\n- Player, Wall: The player cannot move through or push walls.\n- Box, Wall: Boxes cannot move through walls.\n- Box, Goal: Boxes must be pushed onto goals to fulfill the level’s objective.\n\n## Explanation:\nThe game will terminate when all boxes have been successfully pushed onto all goal tiles.\n\n## Game Termination:\n- MultiSpriteCounter: when the number of boxes on goal tiles matches the total number of boxes in the level.\n\n\nYou should respond using the following format:\n\n## Explanation:\nHow do you modify the game structure?\n\n## Game Structure:\n```vgdl\nxxx\n```\nPlease modify the parameter refering the document below:\nElements:\n{element}\nInteractions:\n## conveySprite:\n  sprite: the sprite being moved\n  partner: the partner providing movement direction and strength\n  game: reference to the current game state\n  kwargs: Additional arguments as dictionary\n## wallStop:\n  friction: Reduces sprite's orientation by friction.\n\nTerminations:\nerror: Unexpected token '`', \"```json\n[\n\"... is not valid JSON",
        "string": "{content}\nPlease modify the parameter refering the document below:\nElements:\n{element}\nInteractions:\n{interaction}\nTerminations:\n{termination}",
        "dict": {
          "content": "Now you are a game designer. You are making a sokoban game.\nYou need to design the game elements, game interactions, game effects and game terminations.\nHere is a basic game structure written in VGDL:\n```\nBasicGame\n    SpriteSet\n        floor > Immovable hidden=True \n        camel > color=BROWN\n            randomCamel > RandomNPC\n            straightCamelFast > Missile\n                fastR > orientation=RIGHT\n                fastL > orientation=LEFT\n            straightCamelMedium > Missile\n                mediumR > orientation=RIGHT\n                mediumL > orientation=LEFT\n            straightCamelSlow > Missile\n                slowR > orientation=RIGHT\n                slowL > orientation=LEFT\n        structure >\n            goal  > Door color=GREEN\n        winnerNPC > Immovable color=RED\n        winnerPlayer > Immovable color=PINK\n        avatar > MovingAvatar frameRate=8\n            left > img=newset/camel5L\n            right > img=newset/camel5\n\n        wall > Immovable\n\n    InteractionSet\n        avatar goal > transformTo stype=winnerPlayer scoreChange=1\n        camel goal  > transformTo stype=winnerNPC scoreChange=-1\n        avatar wall > stepBack\n        camel wall  > stepBack\n\n    LevelMapping\n        g > goal floor\n        r > randomCamel floor\n        h > fastR floor\n        n > mediumR floor\n        t > slowR floor\n        f > fastL floor\n        m > mediumL floor\n        s > slowL floor\n        . > floor\n        A > right floor\n        B > left floor\n\n    TerminationSet\n        MultiSpriteCounter stype1=winnerPlayer limit=1 win=True\n        MultiSpriteCounter stype1=winnerNPC limit=1 win=False\n```\n\nNow you need to modify the game structure to add the game elements, game interactions, game effects and game terminations you designed before.\n\nHere is the game elements you designed:\n## Game Elements:\n- **Player**: MovingAvatar\n- **Box/Crate**: Immovable\n- **Storage Location/Goal**: Passive\n- **Walls**: Immovable\n- **Floor**: Passive\nHere is the game effects you designed:\n## Game Effects:\n- **Player Box**: conveySprite\n- **Player Wall**: wallStop\n- **Player Floor**: nothing\n- **Player Target**: nothing\n- **Box Wall**: wallStop\n- **Box Box**: wallStop\n- **Box Floor**: conveySprite\n- **Box Target**: conveySprite\n- **Game Completion**: changeScore\nHere is the game terminations you designed:\n**Game Elements**:\n- Player: The character controlled by the player, usually represented as a movable sprite.\n- Box: Movable objects that the player character pushes to solve puzzles.\n- Goal: Target locations where boxes must be pushed onto to complete the level.\n- Wall: Static obstacles that limit the movement of the player and boxes.\n- Floor: Free space where the player and boxes can move.\n\n**Game Interactions**:\n- Player, Box: The player pushes the box in the direction they are moving, provided the space beyond the box is free.\n- Player, Goal: The player can move over a goal, but does not interact with it directly.\n- Player, Wall: The player cannot move through or push walls.\n- Box, Wall: Boxes cannot move through walls.\n- Box, Goal: Boxes must be pushed onto goals to fulfill the level’s objective.\n\n## Explanation:\nThe game will terminate when all boxes have been successfully pushed onto all goal tiles.\n\n## Game Termination:\n- MultiSpriteCounter: when the number of boxes on goal tiles matches the total number of boxes in the level.\n\n\nYou should respond using the following format:\n\n## Explanation:\nHow do you modify the game structure?\n\n## Game Structure:\n```vgdl\nxxx\n```",
          "element": "",
          "interaction": "## conveySprite:\n  sprite: the sprite being moved\n  partner: the partner providing movement direction and strength\n  game: reference to the current game state\n  kwargs: Additional arguments as dictionary\n## wallStop:\n  friction: Reduces sprite's orientation by friction.\n",
          "termination": "error: Unexpected token '`', \"```json\n[\n\"... is not valid JSON"
        }
      },
      "position": { "x": 6750, "y": 705 },
      "measured": { "width": 300, "height": 360 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "StringFormat",
      "id": "StringFormat_1727250768924",
      "data": {
        "label": "",
        "data": "```vgdl\n\nBasicGame\n    SpriteSet\n        floor > Passive color=LIGHTGRAY\n        wall > Immovable color=BLACK is_static=True\n        goal > Passive color=GREEN\n        box > Immovable color=ORANGE is_static=True\n        player > MovingAvatar color=BLUE\n\n    InteractionSet\n        player floor > conveySprite sprite=player partner=floor\n        player wall > wallStop friction=1.0\n        player box floor > conveySprite sprite=box partner=floor\n        box floor > conveySprite sprite=box partner=floor\n        box wall > wallStop friction=1.0\n        box box > wallStop friction=1.0\n        box goal > align orient=None, changeScore score=10\n        player box goal > align orient=None, scoreChange score=5\n\n    LevelMapping\n        P > player floor\n        # > wall floor\n        . > floor\n        B > box floor\n        G > goal floor\n\n    TerminationSet\n        MultiSpriteCounter stype1=box limit=0 win=True\n\n``\n\nPlease generate the related game map. Please only output the map and nothing else.",
        "string": "{vgdl}\n\nPlease generate the related game map. Please only output the map and nothing else.",
        "dict": {
          "vgdl": "```vgdl\n\nBasicGame\n    SpriteSet\n        floor > Passive color=LIGHTGRAY\n        wall > Immovable color=BLACK is_static=True\n        goal > Passive color=GREEN\n        box > Immovable color=ORANGE is_static=True\n        player > MovingAvatar color=BLUE\n\n    InteractionSet\n        player floor > conveySprite sprite=player partner=floor\n        player wall > wallStop friction=1.0\n        player box floor > conveySprite sprite=box partner=floor\n        box floor > conveySprite sprite=box partner=floor\n        box wall > wallStop friction=1.0\n        box box > wallStop friction=1.0\n        box goal > align orient=None, changeScore score=10\n        player box goal > align orient=None, scoreChange score=5\n\n    LevelMapping\n        P > player floor\n        # > wall floor\n        . > floor\n        B > box floor\n        G > goal floor\n\n    TerminationSet\n        MultiSpriteCounter stype1=box limit=0 win=True\n\n``"
        }
      },
      "position": { "x": 8340, "y": 1350 },
      "measured": { "width": 300, "height": 243 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "MarkDownPreview",
      "id": "MarkDownPreview_1727250822853",
      "data": { "label": "" },
      "position": { "x": 9210, "y": 1530 },
      "measured": { "width": 240, "height": 255 },
      "selected": false,
      "dragging": false
    },
    {
      "type": "LLMNode",
      "id": "LLMNode_1727250829590",
      "data": {
        "label": "",
        "prompt": "```vgdl\n\nBasicGame\n    SpriteSet\n        floor > Passive color=LIGHTGRAY\n        wall > Immovable color=BLACK is_static=True\n        goal > Passive color=GREEN\n        box > Immovable color=ORANGE is_static=True\n        player > MovingAvatar color=BLUE\n\n    InteractionSet\n        player floor > conveySprite sprite=player partner=floor\n        player wall > wallStop friction=1.0\n        player box floor > conveySprite sprite=box partner=floor\n        box floor > conveySprite sprite=box partner=floor\n        box wall > wallStop friction=1.0\n        box box > wallStop friction=1.0\n        box goal > align orient=None, changeScore score=10\n        player box goal > align orient=None, scoreChange score=5\n\n    LevelMapping\n        P > player floor\n        # > wall floor\n        . > floor\n        B > box floor\n        G > goal floor\n\n    TerminationSet\n        MultiSpriteCounter stype1=box limit=0 win=True\n\n``\n\nPlease generate the related game map. Please only output the map and nothing else.",
        "data": "```\nW W W W W\nW . . . W\nW P B G W\nW . . . W\nW W W W W\n```",
        "runflowGenerating": false
      },
      "position": { "x": 8715, "y": 1500 },
      "measured": { "width": 400, "height": 421 },
      "selected": false,
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "StringInput_1726302111781",
      "target": "LLMNode_1726302211017",
      "targetHandle": "prompt",
      "id": "xy-edge__StringInput_1726302111781-LLMNode_1726302211017prompt"
    },
    {
      "source": "StringFormat_1726302264545",
      "target": "LLMNode_1726302345407",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1726302264545-LLMNode_1726302345407prompt"
    },
    {
      "source": "LLMNode_1726302211017",
      "target": "StringFormat_1726302264545",
      "targetHandle": "StringFormat_1726302264545_output",
      "id": "xy-edge__LLMNode_1726302211017-StringFormat_1726302264545StringFormat_1726302264545_output"
    },
    {
      "source": "LLMNode_1726302211017",
      "target": "StringFormat_1726302462343",
      "targetHandle": "StringFormat_1726302462343_output",
      "id": "xy-edge__LLMNode_1726302211017-StringFormat_1726302462343StringFormat_1726302462343_output"
    },
    {
      "source": "StringFormat_1726302462343",
      "target": "LLMNode_1726302512305",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1726302462343-LLMNode_1726302512305prompt"
    },
    {
      "source": "LLMNode_1726302345407",
      "target": "StringFormat_1726410607177",
      "targetHandle": "StringFormat_1726410607177_elements",
      "id": "xy-edge__LLMNode_1726302345407-StringFormat_1726410607177StringFormat_1726410607177_elements"
    },
    {
      "source": "StringInput_1726302111781",
      "target": "StringFormat_1726410607177",
      "targetHandle": "StringFormat_1726410607177_task",
      "id": "xy-edge__StringInput_1726302111781-StringFormat_1726410607177StringFormat_1726410607177_task"
    },
    {
      "source": "StringFormat_1726410607177",
      "target": "LLMNode_1726302662702",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1726410607177-LLMNode_1726302662702prompt"
    },
    {
      "source": "LLMNode_1726302512305",
      "target": "StringFormat_1726411227000",
      "targetHandle": "StringFormat_1726411227000_effects",
      "id": "xy-edge__LLMNode_1726302512305-StringFormat_1726411227000StringFormat_1726411227000_effects"
    },
    {
      "source": "StringInput_1726302111781",
      "target": "StringFormat_1726411227000",
      "targetHandle": "StringFormat_1726411227000_task",
      "id": "xy-edge__StringInput_1726302111781-StringFormat_1726411227000StringFormat_1726411227000_task"
    },
    {
      "source": "StringFormat_1726411227000",
      "target": "LLMNode_1726411481002",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1726411227000-LLMNode_1726411481002prompt"
    },
    {
      "source": "JSONNode_1726572559865",
      "target": "JSEvalNode_1726575035227",
      "targetHandle": "JSEvalNode_1726575035227_json1",
      "id": "xy-edge__JSONNode_1726572559865-JSEvalNode_1726575035227JSEvalNode_1726575035227_json1"
    },
    {
      "source": "JSONNode_1726575053250",
      "target": "JSEvalNode_1726575035227",
      "targetHandle": "JSEvalNode_1726575035227_json2",
      "id": "xy-edge__JSONNode_1726575053250-JSEvalNode_1726575035227JSEvalNode_1726575035227_json2"
    },
    {
      "source": "JSEvalNode_1726575035227",
      "target": "JSONPreview_1726575023701",
      "targetHandle": "JSONPreview_1726575023701",
      "id": "xy-edge__JSEvalNode_1726575035227-JSONPreview_1726575023701JSONPreview_1726575023701"
    },
    {
      "source": "JSEvalNode_1726575035227",
      "target": "JSEvalNode_1726575185778",
      "targetHandle": "JSEvalNode_1726575185778_data",
      "id": "xy-edge__JSEvalNode_1726575035227-JSEvalNode_1726575185778JSEvalNode_1726575185778_data"
    },
    {
      "source": "JSEvalNode_1726575185778",
      "target": "StringFormat_1726410607177",
      "targetHandle": "StringFormat_1726410607177_element_simple_description",
      "id": "xy-edge__JSEvalNode_1726575185778-StringFormat_1726410607177StringFormat_1726410607177_element_simple_description"
    },
    {
      "source": "JSONNode_1726575539243",
      "target": "JSEvalNode_1726575565990",
      "targetHandle": "JSEvalNode_1726575565990_data",
      "id": "xy-edge__JSONNode_1726575539243-JSEvalNode_1726575565990JSEvalNode_1726575565990_data"
    },
    {
      "source": "JSEvalNode_1726575565990",
      "target": "StringFormat_1726411227000",
      "targetHandle": "StringFormat_1726411227000_effect_simple_description",
      "id": "xy-edge__JSEvalNode_1726575565990-StringFormat_1726411227000StringFormat_1726411227000_effect_simple_description"
    },
    {
      "source": "JSONNode_1726575918434",
      "target": "JSEvalNode_1726575929458",
      "targetHandle": "JSEvalNode_1726575929458_data",
      "id": "xy-edge__JSONNode_1726575918434-JSEvalNode_1726575929458JSEvalNode_1726575929458_data"
    },
    {
      "source": "StringInput_1726302111781",
      "target": "StringFormat_1726575993216",
      "targetHandle": "StringFormat_1726575993216_task",
      "id": "xy-edge__StringInput_1726302111781-StringFormat_1726575993216StringFormat_1726575993216_task"
    },
    {
      "source": "JSEvalNode_1726575929458",
      "target": "StringFormat_1726575993216",
      "targetHandle": "StringFormat_1726575993216_termination_simple_description",
      "id": "xy-edge__JSEvalNode_1726575929458-StringFormat_1726575993216StringFormat_1726575993216_termination_simple_description"
    },
    {
      "source": "LLMNode_1726302211017",
      "target": "StringFormat_1726575993216",
      "targetHandle": "StringFormat_1726575993216_elements",
      "id": "xy-edge__LLMNode_1726302211017-StringFormat_1726575993216StringFormat_1726575993216_elements"
    },
    {
      "source": "StringFormat_1726575993216",
      "target": "LLMNode_1726575988051",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1726575993216-LLMNode_1726575988051prompt"
    },
    {
      "source": "LLMNode_1726302662702",
      "target": "StringFormat_1726799068801",
      "targetHandle": "StringFormat_1726799068801_elements",
      "id": "xy-edge__LLMNode_1726302662702-StringFormat_1726799068801StringFormat_1726799068801_elements"
    },
    {
      "source": "StringFormat_1726799068801",
      "target": "LLMNode_1726798985895",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1726799068801-LLMNode_1726798985895prompt"
    },
    {
      "source": "LLMNode_1726411481002",
      "target": "StringFormat_1726799620119",
      "targetHandle": "StringFormat_1726799620119_elements",
      "id": "xy-edge__LLMNode_1726411481002-StringFormat_1726799620119StringFormat_1726799620119_elements"
    },
    {
      "source": "StringFormat_1726799620119",
      "target": "LLMNode_1726799736409",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1726799620119-LLMNode_1726799736409prompt"
    },
    {
      "source": "LLMNode_1726798985895",
      "target": "StringFormat_1726799886550",
      "targetHandle": "StringFormat_1726799886550_chosen_sprite_types",
      "id": "xy-edge__LLMNode_1726798985895-StringFormat_1726799886550StringFormat_1726799886550_chosen_sprite_types"
    },
    {
      "source": "LLMNode_1726799736409",
      "target": "StringFormat_1726799886550",
      "targetHandle": "StringFormat_1726799886550_interaction_final_set",
      "id": "xy-edge__LLMNode_1726799736409-StringFormat_1726799886550StringFormat_1726799886550_interaction_final_set"
    },
    {
      "source": "LLMNode_1726575988051",
      "target": "StringFormat_1726799886550",
      "targetHandle": "StringFormat_1726799886550_termination_final_set",
      "id": "xy-edge__LLMNode_1726575988051-StringFormat_1726799886550StringFormat_1726799886550_termination_final_set"
    },
    {
      "source": "LLMNode_1726799961050",
      "target": "JSEvalNode_1726800661543",
      "targetHandle": "JSEvalNode_1726800661543_llm_output",
      "id": "xy-edge__LLMNode_1726799961050-JSEvalNode_1726800661543JSEvalNode_1726800661543_llm_output"
    },
    {
      "source": "JSEvalNode_1726800661543",
      "target": "MarkDownPreview_1726800529269",
      "targetHandle": "MarkDownPreview_1726800529269",
      "id": "xy-edge__JSEvalNode_1726800661543-MarkDownPreview_1726800529269MarkDownPreview_1726800529269"
    },
    {
      "source": "LLMNode_1726798985895",
      "target": "StringFormat_1727232665067",
      "targetHandle": "StringFormat_1727232665067_element",
      "id": "xy-edge__LLMNode_1726798985895-StringFormat_1727232665067StringFormat_1727232665067_element"
    },
    {
      "source": "StringFormat_1727232665067",
      "target": "LLMNode_1727231818162",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1727232665067-LLMNode_1727231818162prompt"
    },
    {
      "source": "JSEvalNode_1726575035227",
      "target": "JSEvalNode_1727232927566",
      "targetHandle": "JSEvalNode_1727232927566_type_dict",
      "id": "xy-edge__JSEvalNode_1726575035227-JSEvalNode_1727232927566JSEvalNode_1727232927566_type_dict"
    },
    {
      "source": "LLMNode_1727231818162",
      "target": "JSEvalNode_1727232927566",
      "targetHandle": "JSEvalNode_1727232927566_types",
      "id": "xy-edge__LLMNode_1727231818162-JSEvalNode_1727232927566JSEvalNode_1727232927566_types"
    },
    {
      "source": "LLMNode_1726799736409",
      "target": "StringFormat_1727236116969",
      "targetHandle": "StringFormat_1727236116969_element",
      "id": "xy-edge__LLMNode_1726799736409-StringFormat_1727236116969StringFormat_1727236116969_element"
    },
    {
      "source": "StringFormat_1727236116969",
      "target": "LLMNode_1727236113033",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1727236116969-LLMNode_1727236113033prompt"
    },
    {
      "source": "LLMNode_1727236113033",
      "target": "JSEvalNode_1727236194664",
      "targetHandle": "JSEvalNode_1727236194664_types",
      "id": "xy-edge__LLMNode_1727236113033-JSEvalNode_1727236194664JSEvalNode_1727236194664_types"
    },
    {
      "source": "JSONNode_1726575539243",
      "target": "JSEvalNode_1727236194664",
      "targetHandle": "JSEvalNode_1727236194664_type_dict",
      "id": "xy-edge__JSONNode_1726575539243-JSEvalNode_1727236194664JSEvalNode_1727236194664_type_dict"
    },
    {
      "source": "LLMNode_1726575988051",
      "target": "StringFormat_1727236474954",
      "targetHandle": "StringFormat_1727236474954_element",
      "id": "xy-edge__LLMNode_1726575988051-StringFormat_1727236474954StringFormat_1727236474954_element"
    },
    {
      "source": "StringFormat_1727236474954",
      "target": "LLMNode_1727236529221",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1727236474954-LLMNode_1727236529221prompt"
    },
    {
      "source": "LLMNode_1727236529221",
      "target": "JSEvalNode_1727236543149",
      "targetHandle": "JSEvalNode_1727236543149_types",
      "id": "xy-edge__LLMNode_1727236529221-JSEvalNode_1727236543149JSEvalNode_1727236543149_types"
    },
    {
      "source": "JSONNode_1726575918434",
      "target": "JSEvalNode_1727236543149",
      "targetHandle": "JSEvalNode_1727236543149_type_dict",
      "id": "xy-edge__JSONNode_1726575918434-JSEvalNode_1727236543149JSEvalNode_1727236543149_type_dict"
    },
    {
      "source": "StringFormat_1726799886550",
      "target": "StringFormat_1727249536068",
      "targetHandle": "StringFormat_1727249536068_content",
      "id": "xy-edge__StringFormat_1726799886550-StringFormat_1727249536068StringFormat_1727249536068_content"
    },
    {
      "source": "JSEvalNode_1727232927566",
      "target": "StringFormat_1727249536068",
      "targetHandle": "StringFormat_1727249536068_element",
      "id": "xy-edge__JSEvalNode_1727232927566-StringFormat_1727249536068StringFormat_1727249536068_element"
    },
    {
      "source": "JSEvalNode_1727236543149",
      "target": "StringFormat_1727249536068",
      "targetHandle": "StringFormat_1727249536068_termination",
      "id": "xy-edge__JSEvalNode_1727236543149-StringFormat_1727249536068StringFormat_1727249536068_termination"
    },
    {
      "source": "JSEvalNode_1727236194664",
      "target": "StringFormat_1727249536068",
      "targetHandle": "StringFormat_1727249536068_interaction",
      "id": "xy-edge__JSEvalNode_1727236194664-StringFormat_1727249536068StringFormat_1727249536068_interaction"
    },
    {
      "source": "StringFormat_1727249536068",
      "target": "LLMNode_1726799961050",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1727249536068-LLMNode_1726799961050prompt"
    },
    {
      "source": "JSEvalNode_1726800661543",
      "target": "StringFormat_1727250768924",
      "targetHandle": "StringFormat_1727250768924_vgdl",
      "id": "xy-edge__JSEvalNode_1726800661543-StringFormat_1727250768924StringFormat_1727250768924_vgdl"
    },
    {
      "source": "StringFormat_1727250768924",
      "target": "LLMNode_1727250829590",
      "targetHandle": "prompt",
      "id": "xy-edge__StringFormat_1727250768924-LLMNode_1727250829590prompt"
    },
    {
      "source": "LLMNode_1727250829590",
      "target": "MarkDownPreview_1727250822853",
      "targetHandle": "MarkDownPreview_1727250822853",
      "id": "xy-edge__LLMNode_1727250829590-MarkDownPreview_1727250822853MarkDownPreview_1727250822853"
    },
    {
      "source": "StringFormat_1726411227000",
      "target": "LLMNode_1726411481002",
      "targetHandle": "LLMNode_1726411481002_prompt_handle",
      "id": "xy-edge__StringFormat_1726411227000-LLMNode_1726411481002LLMNode_1726411481002_prompt_handle"
    },
    {
      "source": "StringFormat_1726410607177",
      "target": "LLMNode_1726302662702",
      "targetHandle": "LLMNode_1726302662702_prompt_handle",
      "id": "xy-edge__StringFormat_1726410607177-LLMNode_1726302662702LLMNode_1726302662702_prompt_handle"
    },
    {
      "source": "StringFormat_1726575993216",
      "target": "LLMNode_1726575988051",
      "targetHandle": "LLMNode_1726575988051_prompt_handle",
      "id": "xy-edge__StringFormat_1726575993216-LLMNode_1726575988051LLMNode_1726575988051_prompt_handle"
    },
    {
      "source": "StringFormat_1726799068801",
      "target": "LLMNode_1726798985895",
      "targetHandle": "LLMNode_1726798985895_prompt_handle",
      "id": "xy-edge__StringFormat_1726799068801-LLMNode_1726798985895LLMNode_1726798985895_prompt_handle"
    },
    {
      "source": "StringFormat_1726799620119",
      "target": "LLMNode_1726799736409",
      "targetHandle": "LLMNode_1726799736409_prompt_handle",
      "id": "xy-edge__StringFormat_1726799620119-LLMNode_1726799736409LLMNode_1726799736409_prompt_handle"
    },
    {
      "source": "StringFormat_1727236116969",
      "target": "LLMNode_1727236113033",
      "targetHandle": "LLMNode_1727236113033_prompt_handle",
      "id": "xy-edge__StringFormat_1727236116969-LLMNode_1727236113033LLMNode_1727236113033_prompt_handle"
    },
    {
      "source": "StringFormat_1727232665067",
      "target": "LLMNode_1727231818162",
      "targetHandle": "LLMNode_1727231818162_prompt_handle",
      "id": "xy-edge__StringFormat_1727232665067-LLMNode_1727231818162LLMNode_1727231818162_prompt_handle"
    },
    {
      "source": "StringFormat_1727236474954",
      "target": "LLMNode_1727236529221",
      "targetHandle": "LLMNode_1727236529221_prompt_handle",
      "id": "xy-edge__StringFormat_1727236474954-LLMNode_1727236529221LLMNode_1727236529221_prompt_handle"
    },
    {
      "source": "StringFormat_1727249536068",
      "target": "LLMNode_1726799961050",
      "targetHandle": "LLMNode_1726799961050_prompt_handle",
      "id": "xy-edge__StringFormat_1727249536068-LLMNode_1726799961050LLMNode_1726799961050_prompt_handle"
    },
    {
      "source": "StringFormat_1727250768924",
      "target": "LLMNode_1727250829590",
      "targetHandle": "LLMNode_1727250829590_prompt_handle",
      "id": "xy-edge__StringFormat_1727250768924-LLMNode_1727250829590LLMNode_1727250829590_prompt_handle"
    },
    {
      "source": "StringFormat_1726302462343",
      "target": "LLMNode_1726302512305",
      "targetHandle": "LLMNode_1726302512305_prompt_handle",
      "id": "xy-edge__StringFormat_1726302462343-LLMNode_1726302512305LLMNode_1726302512305_prompt_handle"
    },
    {
      "source": "StringInput_1726302111781",
      "target": "LLMNode_1726302211017",
      "targetHandle": "LLMNode_1726302211017_prompt_handle",
      "id": "xy-edge__StringInput_1726302111781-LLMNode_1726302211017LLMNode_1726302211017_prompt_handle"
    }
  ],
  "viewport": { "x": -927.1980793261969, "y": 435.1461286415256, "zoom": 0.5 }
}
